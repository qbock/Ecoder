node {
  name: "x"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "decoder/dense/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 24
          }
        }
        tensor_content: "\177\203\033\276\374\255\004>\371R\225>\206(\315\275cma\276>\247H\276\'\002\256\275K\333\003\276\245\313I=\320\262\212\276*\263Z\276\225\244\276>\256Y\371=\t/\261\275\307p-\276\260\227\005>N\n\327>\324\312\320>,.\317=\375\215\320=\365\034\366\275\323\373:\276\274\010\203>\034\260=\274^^@>\235\347\220\275\202J\366>\2706t>\024\340\266\276\323\304Z\276k\317\305>\220\357,\276\335\276\315>\322X\203\276B\335\276\274R\330\232\275g\326\242\276\255\212\272<\246%2\275\273G\310>];a\275\245\350\373\275}\"\277>\204z\263>\275/\213=\345\344\207\276\241*\301>\212\376<>\362/\033\276\344\020\243>\266>\322>\353\373r>\365e\303\276d\342\203>\211\255+\275\321\257\303>/V\257>\016\001c\276epF>\305\004\330\274Fa\333>\r\320T>\263\361\271\275{\373\232;\177\216\201<\367\352\256>\356\374\265\274W\222\331>\301\n\234=\013\304\224>\376\302\250>\275\001\302>\025\271\214\275\2014\355=\266\rl>\362\316\356>\377g\336;\2606z>D\231u>F\244\212>`\224\343>\207\001\377=\272\226\302\273\265\243\\>\344Nv>\335\354\207\276\344\207\024>\2122\323\275\233\277\356\275\347!;>m\020\'\276\337\025\202\275|\033\222>W\237v>\274f\360;\261>\211>x;->\327\026\354<\223\321\303>o$\'>\032\353\262>v\222\212=\302y\036\276p:\205\2769\255\351>Q\332\025>\207\243\237\276\322\223b=\222Lc\276\261\013+>\035\304%>\177@M\274\266\206\230>\236\3063\276\346\223\322>\r\255->-\353)=J4]\275\302Q\361=\'%\331>\035!\234\276Ta->\"\303\375\275\025\3301>Z\331->R]\220\275T(\n>X+\326\275rke\276B{\326\2747\363 >\241G\232>\037J\037\276TJ\221\275dW\023\274V\253\240\276u7\">\374}\206\276\204f\376<\230\272\234=\211Z\254<1\ts\276\325\370\246>\016<\235\276\201\237\210>\315\t\005\276\3379\310>\310\336\331>\007\210\242>\337\351\247>=y\334>\0244M\275\245\324\004\276\t\317\024\276\rjt\275Xz%>\231\245\337>\344\341\336>\313\225\362>=\216\262>E\360\237>\362T?>\351\346\202>\035\206\245=ob\375\275\335C\307>YU\032\276\363\0331>\336\272\002\276\233e\272=\203\206\014?h\326\307=tk\262\2753\254\231\275$\331\020\274\2660\210>\002j\347>IU\245=\270\267\225>\016\357l=\347\252\365>\250\000\327;\202d\350>h\203\027\274\000r/>\323\207\255\275\366\267l\276\2156r>\203\207.=1\237v>\004\373\\>\245%N>`\274w\276\365S(\2761->>\353I\244>!\017\225=\350\252>\276\215\203N\276\221\370O\276\360\244\230=8U\'\276\243\204\305\276FH\210>\211*L\276\204[\370\275\262\334\307>\027\336\214<Jy\375=\315\035{=>\277\205\276\0325\317\273Isj\276\364P\334>\222\274\240>\274n}\275E\2709\276`\204\001\276\346`?>\210\253\n\275\023\020\256\275\032\364\252;w\377\345>]=\247\276Aw\004?\324\254\"\276\213\260\022\276I\255\347><|\007=\206C\253\275\344\227\005=\r\230\256\276\365\366\207>_\313\310\274\357{\203\275\263^-\276ml\220>\266\323\304>\226\333\276>\230\350\265\275T@\300=\2149t>c4\036\276\346\357\342=/\260\200\276\234\353Z>\353\234p\274\311\220w\276\037Y\250>\361\267I\276/D\222>\324\017O\276n\210\001>\272\314\232>\375 ?<a\240\352>\376\nK\276v\036\201>\355n\261\276xd\234\275\202/\204\276\035\355\271<\026\\\030\276E\200v>\362\304F\276\355{(>\nn\360>C\267\306>-\367+>\026\203\221>\254,\210>\377x\235\276\332\301\216>\006D\232\276\357\377\007\276\223}H=\313N\211=\362\010\305>\320l\334>\316\216\347>;\213\202\275b;\263>s\237\235=B\344\n\276\020\361\370\275{\035\023>\237\035\355=4\017:\276,\247\201\276\236![\276\230\355\031\276\037e\327>\341\276+\276L\"\031\276\023\267\023\276\316u\223\276v\024\005><1\316\275\362T-\276k]\241>\367\274\217>\360\177{\274\035\017\244>J\303\365=\310I\202\276\253\314G>5\345\351=\332\352\354<y\332\252\276NcZ>Q\300w\275\306\220\000=\037\327\241>\250\334\326\275\350\376h\276\n\006\230>:B\220>\033\370^=v\354\355>\372\253\232>\345\374\247>4\373\231>\337\214/>\026%\251>\000\027\022>\335\351\021>\036(\354>g!J\273\301\277\022\276\337h\342>)\245@\276%km\276\231f\222\276#\010\233>\200h\214>\332\"S=\215\255V\276\362\227\233>\277\t\371>\234E\217\276X\r\200\276\347\363\001>\240\231\003>\350s\261>[\021#=\257a9>\367A\234\274*\241\372>\372u\210<A\275\024>E9]\276\010\367\026>\355I\265\275\243\332\273\2750\221\263>Z\000\250>^\253\357\275\313\223\246>\001\202\251>Op\254>\005~5>\206\2351\276A\346\225>\352\356\246\276-Y\200=y\316\213>\n\007f\276\356M\247>\332\324\225>\307\257\340<MI\277\276\311\230%\273\335:\223\274\363\262\320>P?\006\274S\330\353\275\224\220\237<7wt\2762\317\231>\230p\034\275\210N\034>\"\247l>\023\367\214>\264-\234>"
      }
    }
  }
}
node {
  name: "decoder/dense/MatMul/ReadVariableOp"
  op: "Identity"
  input: "decoder/dense/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/dense/MatMul"
  op: "MatMul"
  input: "x"
  input: "decoder/dense/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/dense/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        tensor_content: "\017Bi\274\203w\275=\274\236\267=\353\230\262=\003\272\370\273\010f\033>46\211=\240,\232<s\315\246=EB\025=\375i\220\273\312\265\271=\"\344:=\033\264\251=dy\261=I\274\256=\023i\255=$\331\254=6\335\202<\261c\213=9\320\024\274\002(\252=E\340\207=\226=\204="
      }
    }
  }
}
node {
  name: "decoder/dense/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/dense/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/dense/BiasAdd"
  op: "BiasAdd"
  input: "decoder/dense/MatMul"
  input: "decoder/dense/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/dense/Relu"
  op: "Relu"
  input: "decoder/dense/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/reshape/Shape"
  op: "Shape"
  input: "decoder/dense/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/reshape/strided_slice"
  op: "StridedSlice"
  input: "decoder/reshape/Shape"
  input: "decoder/reshape/strided_slice/stack"
  input: "decoder/reshape/strided_slice/stack_1"
  input: "decoder/reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/reshape/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder/reshape/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder/reshape/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "decoder/reshape/Reshape/shape"
  op: "Pack"
  input: "decoder/reshape/strided_slice"
  input: "decoder/reshape/Reshape/shape/1"
  input: "decoder/reshape/Reshape/shape/2"
  input: "decoder/reshape/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/reshape/Reshape"
  op: "Reshape"
  input: "decoder/dense/Relu"
  input: "decoder/reshape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_transpose/Shape"
  op: "Shape"
  input: "decoder/reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_transpose/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2d_transpose/Shape"
  input: "decoder/conv2d_transpose/strided_slice/stack"
  input: "decoder/conv2d_transpose/strided_slice/stack_1"
  input: "decoder/conv2d_transpose/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2d_transpose/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/stack"
  op: "Pack"
  input: "decoder/conv2d_transpose/strided_slice"
  input: "decoder/conv2d_transpose/stack/1"
  input: "decoder/conv2d_transpose/stack/2"
  input: "decoder/conv2d_transpose/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 6
          }
          dim {
            size: 6
          }
        }
        tensor_content: "\211\326\366=K2\222<|\357P>\242\315\023>\203\311G\275\232(u=\254\010G\274%\315\032>\223\304\350\274KSB>?\312b>\221\247n>\207\210\316\271\240\313\244\274\231WI>by<=\034\246\217=\316\367R>\327(T>8t\007\275\347\364\027>\006S^>\317\312N>\243QK>\237\235\343\274t\337\336=\225\341\024;\323\300\331\275\313(\313=m)\212=\243\374:\273#)\312=\362\003s>\372\231H>&\275\'=\3505\222=\366\332\032>\262\241\001\272\365\220C>\222;\010\275g\334.>i]\330<\200\271\014>\"\211*>P\270\230=2\375\260=\336L\325<\375\366\246:VK\251=\262\3472>\366\370I>\020\r\312<\364\350\227\275Z}V=\264\253\307=!\0214>,\300c>w\347\307=M\333[>\336h]>\tJ\014>\264\313\036\275\267I >\355\202Z>i;\240=\203\351I>e%\215\274\235\334\365<H\\\0349B8Q>E\337\353<6\364\323\273\375\0275>\007k->\035\t\r\275\025+\324=\314h\316=\200\026\030>y\037G>\265\225l>\317\371j>\345\356\354<u{\030>\016d\\>*6\212=E\213y=2\236\366<\007(O=6\244\023>$d\010>v\007\364=\205F2>{\346\276=a5\256=\2546\336=\320.[>\243\377\241= \332$>\350\221\010>{\033\231=\223\222=>\305\305\317<w\314v=\307\032\262=\337\0144\275\002\303/>\235\037\001\275\233\tc=W\334L>\022r\301=\254\352\037>a\031<=X\232t>/\367X\274\020\273u>%y\\>QkG>\362j\250=7\265H>\216\242\010=i{\264=R\247\210=1\371R>;\027{\275p\355\024\276\260\302\316=\247\2219=g\3638>1\"1=\234\223a>\014\344==\307e\030>\216p*=\000B@>\263/B>\271\311\217<~\241\205=n\366K=\264L\204\273\211U\340=X6=>\036\257O>\235\200\037\273K\014\r>\223q\244\274\017H$>\251\335\312;<\344\245\274\376\370\002>EZ\013>\351\225\n>\037]\302=\277\026.>gC\037>\'\031)=\237\270>>\3319\233=\366\305\357=J\360V>\221\231\322=Y\243\201\275\357\036\034\276\347\265$=&\355;>T\317\366\274y\276f>~\303v=\200F\325<\350\372\324\275\033\367\021>S\032.>\306\271\203\275`\210\'\274$\252\n>\253KF<\345\3049>\335\371\262\2744\232@;B\355\013>@\274/>+92>\351\325\007>\317\364\267\274J\034\014>Dj\337=\34531>T\277\321=\261\020\245=\014\002\224=\240\264\250\273\367M\246=tO\300\273\004\224\243=\034\305I=#eg>\320\234\"\275\266\002.\276\321\273\253\274\031~\244\274\021\0042>/\317F>p{\013>C!h>la\037>\3749^\275\004\203\201>\365K\322=\237\315\243=\004\241\322\275\013\321\245\275\351\302\027>\030\375\261<\024\t\347=\236E.\2753\331\020>\317\244\r=\214K\272=2\237f\275Q\253\337=\201_&>\214\020\014>i\237\007<~\r\350=\304,\242\274\335\271!>\306\004->\313\277\274<J=Y>I#\363<9\234C\275\001z\n>\025\276b=\024Ku\275\002\264\013\273b\377\263=\031\332\371=\261\366\342;k\004Z>\336\247\322<zL4>\325\315\347<\303\256\'=H\205\221=\277\222\236=\212\017\276=\350\314\311=\222\225f>\257!\366=(\351\020=\3257\272\274\334\204\003>G\341C>0\3702\275\360?\324\274X\224\330=\240F\313=s@T>\261M@\275\213\220\227<\034M`>>\306\033<\274\032\314<\330 \313=\342\r\343<zL\230<\216\032A=\337\235<>\242\r\007\275\2172>\275\276\317\022\275bp\\>\0357l>\365\220\370=T\005`=\2767\252=\230^\375<S\354\354=\311Eb=x|*=\326;\002>\355\256\037\274q\221>>\305\302\322\274g\r\333=[W->\253\3211>\275Qg>\357 %>\310\247\302=`iS\274?*\363=\2166V=\3433~;\032\200\335;\034p\272\274\251\342\260\274\362(\256=\276\301O=^\374#>.N\225<B\374\365=\\\346\320\275\377\374s=\3265\362=<\035\300\275Zr(>\363\342:>\366\231\221<\274\322\355=;\007\356=\273\204\205<j\253\224\274_\361<\274\247r\031>Ns\212=J}_=\254\370\204=\365I\327<\313\301\373=\t\274e>\341[\365=+\037$\275\336T\306=\340\350\">\311\352\031<&\221 >\305+G=N\203\301<\265\277\325<R\250\225\271k\2640=Q+o>+\017U>\351&_>\326\227,>\212\177\374=\244\337\250\275\215\200\360\275\037\202\311=yj\327=\352\352\030\274\026Y\255=\260.;>dA$>\220\334\017>>\310\232\274\302U\207=\031\001S>\320\236\304\275Q\007\335=\370\177\017> O\t=csw=\375P\205={\305\335\274t\367\025>\243\255\317:A\203i>\017U\021>_.\251=\375c-=\303\377*=\036\356.>\001\006\352=G\262\344=\207=\212\274\215h\343\274a\0359=.K\206=\317t\243=\265/X>\314\332\021>\2170\220\275A\361\343\2755\210\t\276}\307\013\276\314\277\272:S\323\226\275`\245t=Dzb\274H[f>\233\035\242=W\317e=~T\232=P8S=\"\307q\275e\177\243\274\336?\247\275$\031n=U\370\260\2758\004\006>`\\\020>\003\026L>\371q\224<Q\302\016\273\033\212\031>\335\353!>\010\221\261=*\251\234;\017\332\326=_\020\242\275\001\0347\275\217c\210\274\007`h>\240\330)>\275\367/>\221\247$>\263I/=m\243\'>\214\364F>\223\372\027\275\327\327\356\274\021\314\020=\235&\025>\246\226)>\320{->\345\3610\274\2103\312\274cxz=S\354+=F\275\001=d\332\014\275\264\237\332\275EO]\275\013#\365;\010\220#9\000\367\216=\302\254\010\275y?\023\274\225\317\216\274~v>>\255\362R>6\3530>[\244T\273D\277\204<\311\373\010>\203\234R;\324Y?=+\372\025=U\376\304<1\205u\274\275\377@>OS?>{\317K=@\221\237\275/W\333=J[\312\275j\247\217=6\223\003\276\231\375\333\275\260\330\022=\270\336\324=\202>\251=\271\323m>\002\316`>%\221\361<\016k\373\273\275\244\007>b\224\020\275\276\322\265\275\\\202\250=\356\272\214\275(O\321\272\243\202+>\024{\320=\275\r\355=~;\252=\010s\035\274\354\347:=\026\034\357\275\363%\t\276\3460y<z\313\t\275[\007\240\275\363\010\252<\315\253\235=\371P\"\275-\026\204<\211\213<=\'-\000=\326\224F\273\372l\004>Q\274\021\276\033\323\020\276\207V\213\275\214\3247\275&G\034>z\367.\275\217>`>\273\024p\274=\251\022=\361\345$>\247\2346=\\[Z<}\222t=z\025\206=\226G\321=p)\252<\271\250\033>\260@O>\375\026\004>\317\324\"=\377\214\210<\233:\366=\362\261\234=V\005\362=z6E<O\345\342=\003\000f\275\226\251\350\274\215<s;\361\345\220=\317\234\232=\010\317h>+\346\017=\345- >\344O\334\275\302c\310\275\032,\332\275\010\221\322=e\2571\275\n\354\225=q\031{\274\326*\r>\200=C>\314\360W>\371\332\021>G\351`\275\242\353\336=d\367\364\275\3517\262<\313`f=\013.\340=U\332\344\275\260\030C>F\220P>xM:\274\266\004\350=?5S>\002.\346=\214\035\366=m^\307=\227\321\237\275\374\030E>\030\022\247=/;A=\266\370\251=S\023\336=d\363\214<\303\357\262=\237z\005>R\3737>\273\203\265=\216f^\275\353\206\213=\232\374\341<?\252\224=D\201\255=h\252+=\300\301\332=\346\363%>\034\271U=\226\234w=\254]\017=\277(\301\274\010\\\214=\303\331\033\275\370\3215\274B\017\016=\371\332\216\275 =\222=\316C\027>\272\2645>\344\357\032>\310\032l=\023jB>B\203*\275\222W\245\275\350%a\275\340~\033\274\002\216\002\275{\236\202\275\200B\260\274\311\233\300<=f\034>\221Q&><!\257=\340\266\">\375\177}<\372u\215\275m\225\251<H\334\214\275\034\204\312=\335\375\203\275Y[}\274\230\243i>\311@Z=\216\340%>\336f7=z\320R>\374\337\023=\266\277+=u\016\005\276\204q\222\274\272\225\013\276kd\211\275hO >\r\311R>\3351p>}CK>\263[e\275\346y >@E\004\276l\226\350\275 x\336\273\236\301\355\275Sf\335\275J\242\314\275\200\246\302<H\013\253=\343\337\">\202\315\036=\237\\ \275.NT\274T\227x\275%\257\331=\250\025\220\275\2179\021\2766\316\232\274\363.\007\276\035\023P>\350C+<\247\025\024>\376(^>$#2>\274b(>\202\2719\2752p\265\2759H|\2749\215\312\2755\023\231=8(\221\275\254\353{>\223R[>\341\245\365=\343\ra>!Rr>p_$>\260\256]>&W\034=\310\342j=\037A7\275k\255\025>j\274\005>e\324Y>$\202D>5\"r=\210\2510>\025|\036\275~{\036\275o\325\234\275\347K\313=)r\t\276\230\006e<\034\331\005\275\201\367#\275}\014]>\023\376\325=\317\213\037>\n\351:=^\312\022>GSp< \273\007\275\205\0315\274\332\367\000>c\345\330<\302~\253=\247w\342\273\333\337\353\273\337\307\000\275DY\337;\377\333M\274ZBU\274s((>\'bf>\253\024*<s\2736>\023\217\333<\211s\016\275\373\273a>39\035>l\311\312<\002\222\362=[\210*;\306Y\345=\241(.=\300\242\200=\356\320`=\323\310\343=\206i<\275\377\252\331\2745\320\241=\364\374\323=\023\200->\215\256%;C=P>\273\335\026>e0\330<kF\243\275so[\275!\235\030\275\313\010\231=\204h\335=\360\247X\275,\274\327=\236c\267\274\344u\031>\266Dz=4R\243<\247XK\275d\325Z>\240\273\251=r=D>\301\317\001>8>?\275RL\031<T\0362\275E\366\204;\307)\002>\323\350V>\362?8=$\356\354;C0\254\274\3137\300=\220\"\233=\222\325\024\276\020\223`\2741pH=\337\204\\=\326c\274=\263Ug>q\243\376<.\340\306\275_\nM>d\034)<m0\323\275\006\276\327\275-\267\\\274R1\206\275zy\206=\352\214\317=\254^\022>\204\236\265=\032\003\036>\307\237O\275\002\310m>%\321)>\304\367\204>*\022\026>\254\006\240=G[\002\276\346\255B>mM\225=\031\306\003\275\363\331\317=\270\325\256=C\247\006=MR\004\273\037\312J\275\342 (\275\r\256\212=6\361\244\275\207d\227=w,\236\274\'p\232=P2\350=\310]\004;c\357@>\\1\255=9\232\332\274\031\347.>\240c\203=\222\204\177\275\024\376\314=uW}\275\341v\334\275\257\257\036>O\037\335;wtO\274x\226L>\317\227N=\001U\230<U!\210=}\372\256\275!\314\276<\273&d\274I\356$=Q\325 >\335\212\330<I\000\014=oB\264=(\021\267\274\031\213\206=\r\330*\275\207ye<P\017\250\275)^\237=\037\231\346=\325>\333\274\256\252\004\276j\355\306=t\205\332=\335\035\014>\202\026\372=\347\372\005>=\353 \275\024sz\273\226\037\255\275\301\231\000=foc=\272\246\002\276\262\002\321\274\221\315\345=\034\357:>M8N>Z\3463<\220fG\275W\227\020>j\245\037>\336q\030>]\0012>\002:\265\275\n\214\260\275\254\340D>.LJ;\331i\000=!\220H>,xL=\272\212[\273\254\220A=*\t\367<\027\036\374=MV\013>O\rO\275\273\357\347=\233\221D\275\341j\366=\016Q\034\275\353:\316=\005-_>\376\023\343\274>J\n>d$m=\031\336\372=\025\032\220\275\227\250I\275\r\254\032=\304\006\206\274\241X5>\255\230(\275\314\333\004\275}\\3>\023\273l<\325\365\037>\327\372\336\275\n\366\201=d\276c\275\320X{=\312$\307<\3709\353=\225\247|\275\247\270\306<\272\t=>\016[L<\245\nx=\253P6>\351\001\332=\244v\237=u]<\276\256^\350<\211\'\n\276YK\337=\307\365E\275@\265\022\275\020O\\=\366\220\\>+\323\301=4n\200=\017\340\273\275\322\326\251=C\313\323=\035\232\202=\215g$\275\204\276\340=K\254A\275`\243b>\202\177D>\3116\200=\022r\031\275\t\336\017>"
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2d_transpose/stack"
  input: "decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  input: "decoder/reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 4
        i: 4
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2d_transpose/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
        }
        tensor_content: "hcc=\244\354\217=\027IU<\216\327\232=\314/\230<\226\361\231="
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_transpose/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2d_transpose/conv2d_transpose"
  input: "decoder/conv2d_transpose/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/conv2d_transpose/Relu"
  op: "Relu"
  input: "decoder/conv2d_transpose/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/Shape"
  op: "Shape"
  input: "decoder/conv2d_transpose/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2d_transpose_1/Shape"
  input: "decoder/conv2d_transpose_1/strided_slice/stack"
  input: "decoder/conv2d_transpose_1/strided_slice/stack_1"
  input: "decoder/conv2d_transpose_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/stack"
  op: "Pack"
  input: "decoder/conv2d_transpose_1/strided_slice"
  input: "decoder/conv2d_transpose_1/stack/1"
  input: "decoder/conv2d_transpose_1/stack/2"
  input: "decoder/conv2d_transpose_1/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 1
          }
          dim {
            size: 6
          }
        }
        tensor_content: "E\031\t\276\235\270_\276F\276\017\275\014\205:\276\357\3753\276\212*q\276\261\303G\276\327m\333\273\203dU\2754\027Y\276\201 #=;\352\315\275_O\210\276Y\013\370\275fGQ=\276\221\362\27562\247<!\274K\276\360\016\001\275\356\364\273\275\232r\304\275\363n \276\235<.\276\320\367\032\276\311c\237\275\0142\202\276\261\366\032=*,\215\276\rH\312\275\"\001\300\275\233\231\216\275:\371\032\276\200c5\276\031-\001\276\310\336V\274\324\251\236=;\303#\276\362O\215\275\036\036\307\275 v3=\371\370&=\265O\207\276\2552\207\275][\201=\350$M=\220\0359\276\025i\030\276\322J\200\2766\3165=O\361J=\r\352\272\274eR\340\275n\355P\276\'C}\2754\262;\274\307\006[\276\325w\t\275\321L\256=z\376\301\273\035\331f\276\356\024\232\275\264\345\256=\022\220\253\274\223\350\267=g\215&\275\336\'\205=i\367\213\275\250c|\276\"\273\242\275\351\335\333\275\225\304l\276\025p\333;oT\262\275\256&\240\275U\371p=\235\311\201\276a\031\023\276\317\342\203=9\2226=\215[h\276W\310\204\276\365\014\010\272\373\362\302\275\372\200\235\275\372xy\276\335\014\315\275\371\320\224\276I7\"\276\252\007\225=*\\\217\275,\215_=\032\005U\276\337a\035\276\177\322w=\372z\242<\363m\"\276\325\271F=\354\274\240\275\005\334\256\275\014Cq\276\022$\220\275s\257\027\276\306As\2756;\207\276\271m3\275<%$\276\247\225\212<\201|\020\276\373\032C<\022=+\276\0379Q\276(\276\226=\177O\005\276s\266{\276M\000O\276\234\r\211\276?H\206=\364\006R\275\277a\325\275\262\207%\276\303\326\004\275x\256!\276\365E\217\276t\311\252\274\340\017\030\275\310\332B=\224\025\204\275\241\217d\276*;\221;\023\302T\276U\216\300\275\254\265\205\274\372\223\213\276R\035\003\276l(\217\276o@%\276\212\204X\276\224\344?\276E\220\014\275\026\034\267\274\264\031\017\274\001\006\347\275\345\245t\276h\306\276\274\025(X\276l<_\276B\204\177;A\004\355\275\222\364\276\275\021\3370\276"
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2d_transpose_1/stack"
  input: "decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp"
  input: "decoder/conv2d_transpose/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: -0.058517660945653915
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2d_transpose_1/conv2d_transpose"
  input: "decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/decoder_output/Sigmoid"
  op: "Sigmoid"
  input: "decoder/conv2d_transpose_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "NoOp"
  op: "NoOp"
  input: "^decoder/conv2d_transpose/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  input: "^decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp"
  input: "^decoder/dense/BiasAdd/ReadVariableOp"
  input: "^decoder/dense/MatMul/ReadVariableOp"
  attr {
    key: "_acd_function_control_output"
    value {
      b: true
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "decoder/decoder_output/Sigmoid"
  input: "^NoOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 1087
}
