# test the computation of earth-movers distance for calo images
import numpy as np
import matplotlib.pyplot as plt
import ot

def main():
    ins, outs = GetData() # two 12x4 images, mimicking real data
    # ins, outs = GetSimpleData() # two 2x2 images for simple tests
    in1, in2 = ins
    out1, out2 = outs
    # in1.shape = 12,4 and similar

    coords = GetHexCoords() # x,y for cells (shape=48,2)
    #coords = GetSimpleCoords() # x,y for cells (shape=4,2)

    M = ot.dist(coords, coords, 'euclidean')
    
    # solving transformation
    T1 = ot.emd(in1,out1, M)
    T2 = ot.emd(in2,out2, M)

    # the distance metrix
    print("The EMD for event 1 is = ", ot.emd2(in1, out1, M))
    print("The EMD for event 2 is = ", ot.emd2(in2, out2, M))

    # print transformation matrix entries if desired
    if False:
        for mx in range(T1.shape[0]):
            for my in range(T1.shape[1]):
                if T1[mx,my]:
                    print("{},{} = {}".format(mx,my,T1[mx,my]))

    inputImg =[in1.reshape(12,4), in2.reshape(12,4)]
    outputImg=[out1.reshape(12,4),out2.reshape(12,4)]
    inToOut = [np.matmul(T1.T,np.ones(48)).reshape(12,4),np.matmul(T2.T,np.ones(48)).reshape(12,4)]
    outToIn = [np.matmul(T1,np.ones(48)).reshape(12,4),np.matmul(T2,np.ones(48)).reshape(12,4)]
    fig, axs = plt.subplots(nrows=2, ncols=4, figsize=(8, 4))
    
    for i in range(2):
        axs[i,0].set(xlabel='cell_x' if i==1 else '',ylabel='cell_y',title='Input_%i'%i)
        axs[i,1].set(xlabel='cell_x' if i==1 else '',ylabel='',title='Ouput_%i'%i)
        axs[i,2].set(xlabel='cell_x' if i==1 else '',ylabel='',title='inFromT_%i'%i)
        axs[i,3].set(xlabel='cell_x' if i==1 else '',ylabel='',title='outFromT_%i'%i)

        c0=axs[i,0].imshow(inputImg[i])
        plt.colorbar(c0,ax=axs[i,0])
        c1=axs[i,1].imshow(outputImg[i])
        plt.colorbar(c1,ax=axs[i,1])
        c2=axs[i,2].imshow(outToIn[i])
        plt.colorbar(c2,ax=axs[i,2])
        c3=axs[i,3].imshow(inToOut[i])
        plt.colorbar(c3,ax=axs[i,3])
    
    plt.tight_layout()
    plt.savefig("displays.png")
    return

# lookup (x,y) values corresponding to the 48 cell centers
def GetHexCoords():
    return np.array([ 
        [0.0, 0.0], [0.0, -2.4168015], [0.0, -4.833603], [0.0, -7.2504044], 
        [2.09301, -1.2083969], [2.09301, -3.6251984], [2.09301, -6.042], [2.09301, -8.458794], 
        [4.18602, -2.4168015], [4.18602, -4.833603], [4.18602, -7.2504044], [4.18602, -9.667198], 
        [6.27903, -3.6251984], [6.27903, -6.042], [6.27903, -8.458794], [6.27903, -10.875603], 
        [-8.37204, -10.271393], [-6.27903, -9.063004], [-4.18602, -7.854599], [-2.0930138, -6.6461945], 
        [-8.37204, -7.854599], [-6.27903, -6.6461945], [-4.18602, -5.4377975], [-2.0930138, -4.229393], 
        [-8.37204, -5.4377975], [-6.27903, -4.229393], [-4.18602, -3.020996], [-2.0930138, -1.8125992], 
        [-8.37204, -3.020996], [-6.27903, -1.8125992], [-4.18602, -0.6042023], [-2.0930138, 0.6042023], 
        [4.7092705, -12.386101], [2.6162605, -11.177696], [0.5232506, -9.969299], [-1.5697594, -8.760895], 
        [2.6162605, -13.594498], [0.5232506, -12.386101], [-1.5697594, -11.177696], [-3.6627693, -9.969299], 
        [0.5232506, -14.802895], [-1.5697594, -13.594498], [-3.6627693, -12.386101], [-5.7557793, -11.177696], 
        [-1.5697594, -16.0113], [-3.6627693, -14.802895], [-5.7557793, -13.594498], [-7.848793, -12.386101]
    ])

# get two events of test data...
def GetData():
    in1 = np.array(
        [[0.3       , 0.        , 0.        , 0.        ,],
         [0.        , 0.        , 0.        , 0.        ,],
         [0.        , 1.        , 0.14285714, 0.25714286,],
         [0.        , 0.15714286, 0.        , 0.2       ,],
         [0.11428571, 0.        , 0.        , 0.08571429,],
         [0.25714286, 0.        , 0.        , 0.        ,],
         [0.        , 0.        , 0.        , 0.        ,],
         [0.        , 0.        , 0.9       , 0.        ,],
         [0.        , 0.17142857, 0.        , 0.14285714,],
         [0.75714286, 0.        , 0.        , 0.        ,],
         [0.        , 0.        , 0.        , 0.        ,],
         [0.85714286, 0.4       , 0.44285714, 0.3       ,],])
    out1 = np.array(
        [[0.09859886, 0.12918286, 0.5486735 , 0.02220123,],
         [0.18802562, 0.07107367, 0.08021325, 0.33764017,],
         [0.12378869, 0.441673  , 0.7268136 , 0.34598863,],
         [0.10687689, 0.18388654, 0.03978781, 0.08151976,],
         [0.10594828, 0.13050689, 0.17412923, 0.27357438,],
         [0.03581319, 0.07626997, 0.20979328, 0.14080817,],
         [0.19682622, 0.08929565, 0.11797801, 0.19590157,],
         [0.14829372, 0.13184243, 0.045522  , 0.24725968,],
         [0.24148938, 0.04069295, 0.17356819, 0.19837458,],
         [0.38491213, 0.15304215, 0.10970578, 0.24472383,],
         [0.07892589, 0.38769034, 0.0658447 , 0.12592277,],
         [0.29380956, 0.15895613, 0.22337708, 0.1185891 ,],])
    in2 = np.array(
        [[0.        , 0.        , 0.        , 0.        ,],
         [0.        , 0.        , 0.        , 0.24137931,],
         [0.        , 0.35344828, 0.        , 0.        ,],
         [0.        , 0.09482759, 0.38793103, 0.        ,],
         [0.        , 0.        , 0.23275862, 0.        ,],
         [0.        , 0.        , 0.        , 0.        ,],
         [0.06896552, 0.17241379, 0.        , 0.        ,],
         [0.        , 0.        , 0.        , 0.        ,],
         [0.        , 0.0862069 , 0.06896552, 0.        ,],
         [0.        , 0.09482759, 0.        , 0.        ,],
         [1.        , 0.        , 0.        , 0.44827586,],
         [0.        , 0.03448276, 0.        , 0.        ,],])
    out2 = np.array(
        [[1.49283171e-01, 1.51307276e-02, 3.27306520e-03, 7.15911984e-02],
         [3.34629342e-02, 7.77058210e-03, 1.37532473e-01, 5.68615496e-02],
         [4.24807891e-03, 2.92012896e-02, 9.73903984e-02, 1.57845616e-02],
         [1.00701608e-01, 2.82746013e-02, 5.80247454e-02, 7.22430050e-02],
         [6.13115355e-02, 4.54726443e-03, 5.39988391e-02, 3.15590203e-02],
         [1.22176819e-02, 9.41779814e-04, 7.73781091e-02, 5.75992055e-02],
         [7.51764029e-02, 3.18588540e-02, 7.31739728e-03, 8.79612193e-03],
         [1.20853223e-01, 5.22355025e-04, 2.06854604e-02, 1.00878626e-01],
         [1.75095573e-02, 2.26505054e-03, 2.80607399e-02, 3.46314372e-03],
         [2.99266540e-03, 8.00692737e-02, 5.13675064e-02, 4.49316427e-02],
         [9.80014920e-01, 1.76106412e-02, 8.61695632e-02, 1.30950794e-01],
         [3.42293233e-02, 1.51885080e-03, 7.51764029e-02, 3.60160694e-02],])

    in1  = (1.*in1/in1.sum()  ).reshape(48)
    in2  = (1.*in2/in2.sum()  ).reshape(48)
    out1 = (1.*out1/out1.sum()).reshape(48)
    out2 = (1.*out2/out2.sum()).reshape(48)

    ins = [in1,in2]
    outs = [out1,out2]
    return ins, outs

def GetSimpleCoords():
    return np.array([[0,0],[0,1],[1,0],[1,1]])
def GetSimpleData():
    in1 = [0.5,0,0,0.5]
    out1 = [0,0.5,0.5,0]
    in2 = [0.5,0,0,0.5]
    out2 = [0.25,0.25,0.25,0.25]
    return [[in1,in2],[out1,out2]]

if __name__ == "__main__":
    main()
