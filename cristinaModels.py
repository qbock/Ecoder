import numpy as np
import tensorflow.keras.optimizers as opt

edim = 16
arrange443 = np.array([0,16, 32,
                           1,17, 33,
                           2,18, 34,
                           3,19, 35,
                           4,20, 36,
                           5,21, 37,
                           6,22, 38,
                           7,23, 39,
                           8,24, 40,
                           9,25, 41,
                           10,26, 42,
                           11,27, 43,
                           12,28, 44,
                           13,29, 45,
                           14,30, 46,
                           15,31, 47])
arrange8x8 = np.array([
    28,29,30,31,0,4,8,12,
    24,25,26,27,1,5,9,13,
    20,21,22,23,2,6,10,14,
    16,17,18,19,3,7,11,15,
    47,43,39,35,35,34,33,32,
    46,42,38,34,39,38,37,36,
    45,41,37,33,43,42,41,40,
    44,40,36,32,47,46,45,44])
arrMask  =  np.array([
    1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,
    1,1,1,1,0,0,0,0,
    1,1,1,1,0,0,0,0,
    1,1,1,1,0,0,0,0,
    1,1,1,1,0,0,0,0,])
arrMask_full  =  np.array([
    1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,])
calQMask  =  np.array([
    1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,
    1,1,1,1,0,0,0,0,
    1,1,1,1,0,0,0,0,
    1,1,1,1,0,0,0,0,
    1,1,1,1,0,0,0,0,])

arrange8x8_2 = np.array([
    44,45,46,47,16,20,24,28,
    40,41,42,43,17,21,25,29,
    36,37,38,39,18,22,26,30,
    32,33,34,35,19,23,27,31,
    15,11, 7, 3, 3, 2, 1, 0,
    14,10, 6, 2, 7, 6, 5, 4,
    13,9,  5, 1,11,10, 9, 8,
    12,8,  4, 0,15,14,13,12])

arrMask_split  =  np.array([
    1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,
    1,1,1,0,0,1,1,1,
    1,1,0,0,0,0,1,1,
    1,0,0,0,0,0,0,1,])

arrange663 = np.array([  0,0,0,0,0,0,
                         0,12,13,14,15,32,
                         0,8,9,10,11,33,
                         0,4,5,6,7,34,
                         0,0,1,2,3,35,
                         0,31,27,23,19,0,
                         0,0,0,0,0,0,
                         0,28,29,30,31,0,
                         0,24,25,26,27,1,
                         0,20,21,22,23,2,
                         0,16,17,18,19,3,
                         0,47,43,39,35,0,
                         0,0,0,0,0,0,
                         0,44,45,46,47,16,
                         0,40,41,42,43,17,
                         0,36,37,38,39,18,
                         0,32,33,34,35,19,
                         0,15,11,7,3,0])

arrange663_mask = np.array([  0,0,0,0,0,0,
                              0,1,1,1,1,1,
                              0,1,1,1,1,1,
                              0,1,1,1,1,1,
                              0,1,1,1,1,1,
                              0,1,1,1,1,0,
                              0,0,0,0,0,0,
                              0,1,1,1,1,1,
                              0,1,1,1,1,1,
                              0,1,1,1,1,1,
                              0,1,1,1,1,1,
                              0,1,1,1,1,0,
                              0,0,0,0,0,0,
                              0,1,1,1,1,1,
                              0,1,1,1,1,1,
                              0,1,1,1,1,1,
                              0,1,1,1,1,1,
                              0,1,1,1,1,0])
arrange663_CalQmask = np.array([  0,0,0,0,0,0,
                                  0,1,1,1,1,0,
                                  0,1,1,1,1,0,
                                  0,1,1,1,1,0,
                                  0,1,1,1,1,0,
                                  0,0,0,0,0,0,
                                  0,0,0,0,0,0,
                                  0,1,1,1,1,0,
                                  0,1,1,1,1,0,
                                  0,1,1,1,1,0,
                                  0,1,1,1,1,0,
                                  0,0,0,0,0,0,
                                  0,0,0,0,0,0,
                                  0,1,1,1,1,0,
                                  0,1,1,1,1,0,
                                  0,1,1,1,1,0,
                                  0,1,1,1,1,0,
                                  0,0,0,0,0,0])

arrange663_tr = arrange663.reshape(3,36).transpose().flatten()
arrange663_mask_tr = arrange663_mask.reshape(3,36).transpose().flatten()
arrange663_CalQmask_tr = arrange663_CalQmask.reshape(3,36).transpose().flatten()

adam_slow = opt.Adam(learning_rate=0.0005)
SGD       = opt.SGD()
SGD_nesterov = opt.SGD(nesterov=True)
Adadelta  = opt.Adadelta()

defaults = {    'shape':(4,4,3),
                 'channels_first': False,
                 'arrange': arrange443,
                 'encoded_dim': edim,
                 'loss': 'telescopeMSE',
                 'nBits_input'  : {'total': 10,                 'integer': 3,'keep_negative':1},
                 'nBits_accum'  : {'total': 11,                 'integer': 3,'keep_negative':1},
                 'nBits_weight' : {'total':  5,                 'integer': 1,'keep_negative':1},
}
models = [
    {'name':'Sep1_CNN_keras_norm','label':'nom','pams':{
            'CNN_layer_nodes':[8],
            'CNN_kernel_size':[3],
            'CNN_padding':['same'],
            'CNN_pool':[False],
       },
    },
]

for m in models:
   m.update({'isQK':False})
   m.update({'ws':''})
   if not 'isDense2D' in m.keys(): m.update({'isDense2D':False})
   for p,v in defaults.items():
        if not p in m['pams'].keys(): 
            m['pams'].update({p:v})
