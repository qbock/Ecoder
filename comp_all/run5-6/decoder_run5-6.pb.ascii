node {
  name: "x"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "decoder/dense_3/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 32
          }
        }
        tensor_content: "\215\336\324\275L\354\316\276\366\253\207>\006]\253\276\325\223:\277\322\007[\276TD\320\275<\036U\275\255P\275>W\0257>[\000\356>)\003\023?\354\371\205>\267%\001\276\'_\027?\021x\337\276T\306|>/\374\261\275\330>\361>g\353M>\333i[\276og\331>\216\202\006?8\263A<c\027\357>:\370\254>\332\337&\277c<->tG\213>\332\232\276=\361N\367>Yl)?\310b\313>\324q\211\275#\362:?\256\224s>52\016?\023X\243\276@\031\020>\366=\030\276D\364\024\275!H\302><\003\255\276e\217\005\277\002[\023?\220\032\240\275\326\024R?\004v\030\275\335\356\202\277\021\320t\276\330\345R>\303s\220\276\235\345>?\014}\352>\215\231N=r\213C>\301\267\007?\265O\320=+\311Q\276u\305\006?\014x$\276\2419\315\2766\314\236<B@\323\276\346\252\353>@\332\346>\306\217\010\276\033u\273\2769D\217>b\'\200\275\"D\364\275\370\025\234\276\361\233\200=\233\177\026\275\212FM=+\323\224<\362J\031>\217df=M\260\330>\034\245\336=\345\013\303>/\240e>}\352\021=4\205\326>\314F\312>\346\030+=+S\360>K?\325>\237\337e\276\303=\341\276nv\247\276*\311\246>\010\260\234>\322\033\221>[\251\327>\026v!?\024x!\276\037\3201\276;\202\\>\204\373\017>O-\005>\233k\254\276z@\225\275\366\035^>\1779\263>\2247D\275\001\005Z?s!\265\276\304(}\276\225\3347\276\273\316Y\276#\203\253>/\314\332>\251\"5=J\342<\2766!\345\275\312\367\372>\313\375\225>U\313\263=\323\342R=mI\330\275\354\033\337;U\325\261>n\237\221>6\321\301=\013\343[>& \340>\017EK\275\334\255\232>\326a\n\276\270\3178\276\331\251\233>\207/(>J\230\321\275`\342\242=\276\024\212>\373\372O\276(\246\344\276\000^\323=\254\016\r\276\n\200*\276l\366\200\276\265~\026\276h%\013>6\241v>\205\235\004?\001\334\301\275H\204[\276\267\250\303\276\203\270/\277\224\304\273>\331\267\345\276\035\254\331>s Q=0\237\"\276A\334G?\262i=\274\246x\315\273\376\257\271\274\317\243\244\275\307*\371>\204\263\270>&\341\221>\263\205\306?A\237\215\277v\005\211\275~\246\021\276\032YJ\276\271?\230\276\317!\254>vm\252>\225\331h\276Q,d\277\375\253!\277=\270|?m\355\360\276\315\210\212?\220\351\231>$\206\372\277uz>\276\341\226\004\277\360\335^\276\206\370(\277\376\316g>\253\204\300=\336\'\014?\3161\'\275\345\234\304\276\331\231\212>\332\342\017\277[\370!>.\021\236\276(\224\257\274>^\215=\'\031\020\277\230\246\366>\231<\354>\242\323\030\276\261F\302\276,1D\276\n\'\034\276\252\372\014?S~1>\3510t=\207{h>\244[\252\275\n\304X==\261\247>p\257K=$\335\021>\000Rd>e\201\232>\037\353f>\323\226U\276\320g\034?\216\026\320>\356\257\210>\346\301^=\227\231\303<s\230\235\276\325nd\277\307\023\020>Es\327;\302=\307=\275\273\030>\350\316\262>\331\334\027=k\206\212\275=k\203>=a\"\276Z\331;\276\234\002\317=\306o\251>M\265:\276\325\262\316\275\327a\027>\274\340\213\275\201\036\304\275\021c\236=E\314\224\276\203\206\260=\362\311\205>#v\224\276C\356[>\220gb=Y{\003>{W\372=\311\252\211\276\247,\215\276\2757\237\276\003\365\001\276\253%\377=\346\304\232=\262j]\275\250\n\207\275\250\003$>\327\006\360>\350i\021?\206}\235>9\354\002\276\207;\234;\330\n:\276U)1>1\205/\276\'\305\335\275\250\343\n?S\206\270>=\"f>\340\3746?\373\351\327>+g\032\276Pl\225\276vL\227=k@\301=\353\305\">bV\250>Bfu\276\274dq\275\203O\010?\006i%\276\001\014\212\276P\014l>\014K\227>\027\277\243\276uP\256>7\305l>\026\267\206>\351\253\020\277B\305\363\276\034z\030\277}\221\024\276\205t!?\232\215&\277\200\234L>\265_\325\276\213\010\234>\325p\025<\'u\233\273\235\216\251\276\356\316y=J\327\210?\343b\256>S\256\241\275\177\276\203\274\312\360\t?\363\370.?xj\264>\263*\216\276\230\030\272>\242~\007>i\tX\276i:\007?\314\360\214\276v\350\341>\236CL?\224\230y>\275c&\276;\256\222>Q\373z>\301\261\324\275\202#\260\275\276\025I\274\372u\347\275\370\352(>\373\267\225>w\3754\274\236\")>\225\244G>\321o/>\352\355\235\276\004\363\r>\360\022\006\275~DB\276 \322\252\275)\377Q\275\350\226\343=s\251d>9\036\325\275\026\344\026<\035\006\220>5k`>D\355\272\275\320\217\220>\0219a\275\316\324\006\275m?\016\276\212\006\216\276\323W\267>\374g\210=\253\217\014>\217W\220>z\373/>\215\266\262>^\246%>\354[\267>\312\206{\276\030\371\263=\016\033\222\276\272X\211\276\256\341\007\276\277\302\214>S&\240=\215TC>\366$*\276$\306\020\276\275\375\331>\307\202r\275N=]=X\371;>^~\372>e\301\234>\331\224H\276Xy\342>\212\335\242\275\306\264\232>+w\033\276\365S.>\201\n\213>\202\2167\277\367\204#\276\251wq\276\032\"v\277\333\324\306<K3\031?\203\222\326=\021Z\227\275\246\202{>S\343\223>\302s\230=[\005\214>\340J\007\276M\220\267\276b>\217>Z\000\233>\300\245\324\276\276z;\277r\337\242\276\275\234\274>\250X\253\276\022\211\224>n\250r\276\rM\346=jN\022\277\006\300\373>\337\273\336\276\315\236\027>\357Y\023\276\'\242\352>\207:\303>\347\227\257>\231 \365<\351f\202=FQ\033?\320\260\310>\252\036e=\242\254\343>\310\242\\?\243\200\253>UN\013\277\210\200E\277\t\211q?\246\272A>t\370Q\271\312;,>\220\277\254\275\005\340M?Y\236\356=\022$\306>\201\311\002?i\251\321\276\232\014\033\275l\307!\277L\372\314>\251)\305>\310W\024\277U?\337>\332\254\335>\362dy>\262?\212\276\014\"x?\332\325\220?\233\033\230?\326\251\027?\227\271\340\276\237P\270?\007\225\206\276{?\202\277\246\262\237>~\021\241\274\200\201\310>\244\262~\276p\237@\276\340\025N>\025\235\376\275\255_\024=\267\364 \275,\204=?,\366\306=\263q\202\276\311\005\230>\262\324!=\270i&>]\214\233>\3767\253=\3045 ?9\001\335\276\206P\235=0\325\255\276*\317\203\276!\004\351=v\363\215>\217\366\221\275\235\205\022\277Q\302-?\367\351\207?\253e\334>y)\317\275\237\246\010\275\256(\263\276Z`\245<;!\001\276\003wU\276\374\266.=\2148$?\274\317P>\262h7\276\253|_\276\207\304\223\276)\321\371\276\251\231\230\276\36519\276\304a\243\272l\231\211>V\343\227\276x\307h>\247^V?>\364\200\276%&\026\277\033\005s=\234\336\337=vh\244>M\341\017\277,k\304>P\343\023\277\323!\\\276\303hY\276\034\371\251>s3)\277\237;2?PI\274>Oz\020\277\006\226\302>"
      }
    }
  }
}
node {
  name: "decoder/dense_3/MatMul/ReadVariableOp"
  op: "Identity"
  input: "decoder/dense_3/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/dense_3/MatMul"
  op: "MatMul"
  input: "x"
  input: "decoder/dense_3/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/dense_3/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        tensor_content: "g\370=>tH@\277b6\211=g>6<f\372\200?\226a\235<\314{\364\274J\302E\273\311)^>f\203\221>\371\014(<9Z2\276z2\322\275C\0218?\213\336\010>\265\341O>\331\3642>\016\r\262\276\027s@?,\005;>\255(5>}hc\276\334\3604\276\031\321\223>0\224[\276r\223\232\275\233\007.\277\362\215\321>8\335r>\264\035\260=\341\272e>R\022\331\276"
      }
    }
  }
}
node {
  name: "decoder/dense_3/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/dense_3/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/dense_3/BiasAdd"
  op: "BiasAdd"
  input: "decoder/dense_3/MatMul"
  input: "decoder/dense_3/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/dense_3/Relu"
  op: "Relu"
  input: "decoder/dense_3/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/dense_4/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        tensor_content: "\265\337{>=\rP>\251\200]>\032\"%\275{\306h\276\304\3717\275\3045\030<\200\323c\276\374^\370=\241+5>wo\222\276F\221@>\n-\374=\256\016\234>7vO\276\262\350^=b\003\204\2764\241\307>\271\3247=w\022\036>\3700\333\275z\346Y=:\305\303>\236\035\013?\222N\370=\377\342\272=cv\332\276\273\031\267\275=+\324\274#\264\020>)\301\003\276\271\303\205>\235\256\034\276\263gI>\330b\240\276=\240_>\005\311 \273\266\030\025\276\243 \037?\020F\257\276 \010\'\275\267s\r>\\lq\276\256\030\206\276T\305\036\276\004\256c>\331\354\021?=\254\220\276\023&\360\276\217\210\314>S\210b?j\300\024?T\231\206>\242%\001\275;\017\232?Q\242\333?\t1q>\256\327s\276C\013X?\254\016\022\275\310S\037\277\2665\204>b!\224>/\371\311?\005\317!?\276\017,<0\246\004\274\275\307z>H\220\201\275\026\241\201=\227#\227>\245\007\343>r\317o>\031\373\242>\250\214Q=J`\t\277r0 \276\343\346_>\220]_>\034\265\270\273OTi=\377\346g>\251\375o?6C\300=\306\261\205\276>?\311\2736\306\350\275\352\030\305>o\356\205\276W\301\267>\371\034\000\277\232\257r\276\327|\335\275\t&\334\276g\3427>\210\227\307\276\205\340\361=\323\0322\276\340\316\020?\315\026\203\275\256\217\355\275+\277\320\276\027\373W\276!\3478<X\313\300\275Qn\273>\232\201\324<qN\215>SB\352\275\311\246\201>V\317\206;\030\234\264>4\330\351=\215W\230\276\014\375\370>c\255c>\302\244c\275\3423e\276\r1L\275\264\010\367\274\227\271\330\275\264\355I\276s\330\315>\353Y\004>\311T\247>&\213\247>\226\354\317=\000A\257\276W\223\350\275b\207\331\2751\216\225>\376\010\230\275X\233\'\2768\304A>\001\372\232\276\206]\305>8\317\246\275\340O\036>\255\232.\276*\224\245>\356v\201\276\343\002G>\350\350\360=\226\027E>\177G\305\276\250\320\227<n\213\n\277S\313\222\274\321\001\220\273r\317\236=\245_i\276\272\225\360>\212\3035\276\032\270\227\276\354\003H\274\037\2672=\364c\255\2762,v=\315D\235\2760\200\257>\332\335\362\275\340\030\013\274\276\3159=\033\342\273=\2470\001\276Gg\213=\300\360\024<\032CE>:\3728\276\355\207\177\275\207\r\020\276Ce\222\276\347\317\t>\2655\267\275\354\210\237>w\362\355\275W\302<>\037C\014\276a\213}>I:\206>4\251\376\275juu\276\276\332\204\275\345\326]>&$a>\273\n}>\274\035\322=\216\253`>\'6\325=\000\346\270:\364\265\222=\200\240t\275M\240\020\276\256\342\215\276x\343\017>3\313+\275\3153\211\276@\345\336\275\232LB=\253\327\336\275\254\313>\276\330\007\022\276h\002B\276\333\224\216<\037\203c\2752\220\032\2750\0261\275?\r\206\276]\365\216>T\027n\276\342d\202>+\223\211=~\345\241\275\0067\200\276\327T\036>\002a\341\275\020\342/\276\314R\277=\001e\321\273\266K\340\275^\304N>T`Q\275Kn\210>/\366\r\276k\240\234\276\314\313\361\275/\372(=\370\216\333\275\203e\202\276\222\367.\276G\235D>\362\377\021;\205\360\000\276\3769\216\276EE\300=\217;Q\276q\247!\276\'\354%\276\'\334b>\346\244\200\276l\245\005\276\333\025V>\013\335\211>\266QF\273\321\244\352<\333%\217\276y\213\253\275\0245m>\343\031\206\276?\t\016>\374P\316\275;\342\220>Yeu\276\330\364\004\276\225\303:\275\"\300\222>u\225k\276tC\261=\327\243\226\276\277`\000?X\274\275>\303\233\000?\255=(>\2169\314=\005\232\215\276nE\357\275\217\355#>7#O>\310g7\276\270\001\344=\025{n\276\277\'\323>\032\205/\276\370\266\223>\342\244\345=\253\334\243>0JF;Zro>\360N\017\276z\235&>\030\277d=o\220F=\320U&>\304\032n\2761\237\323\274G\362\"\276\211F\251=EM6\275\256\346\362>\255\257\200\276\037\231\032>\rS\251>\005\"\346>\\5\345\275\321\376\226\276/x\363=\206v\021>a\326\307>\217\254!\276\351V\340>\233$$>e\216\236>u\351\200\273}\010\246>/\005D\275\263H&>JP\034>\036\376\034\275\354_3\276\240\203X>o\023\217=\247\036\202>;j\010\276\205\217<\275\203)\215\276\367\032\231\276t\222X\276X\324%\276\363\357f\276\233B\301\275G\322\222=\274r\247\275\344/\246>S\342\360=(\236H=(-z?Mf\236>\275\322\300\276s%\'\276x\255\305?I\276\334?\354\317\004\277\035\341\272>@\366Q>\226je?\031(\323\275h\016\276\276\244\301\020\2767\205\017\276.\266B\277\377|\231\276\247\315\301\276@\016\275<\3365\276\275$\031f\276{\233\006\277\376\310\350\276h\274\251\275\255\344\030\276F\036{?\016\001\206<\271_]?C\306)>\230\221\001\276^\307%?\241\266\210>\361!\010\277\n\347e\276\340\245k?\2612\203? H\360\275;\'\250>\333\3775\277\364\375%\276\371\254\235\276\275\377\361>B\001\273\276\315\347\342>\354\263\335\276\250\272\004\277W\217\257>\356k\344?0Ob=\177\013\225\27576b\276\357Z!\277\213\204\247=\025X\243\277+\376\221\276\353\265H\277\275\314\021\277\327\0170>E\364\\\276\265\240\016?\246\021\364=\335\010\200>\227\001\240\276b\302\214\276=n\372\276\332\025\256\276q\2117\276\362\277\016\276:\307!>x\270\372>k\"\275\276\354\242\013?3\216\'>3Q\317>\361\230\214>\350_\365=/X\027?\332\002\035?\222&\272<\373\262>?j\364\265\275\021j\363>\'\245^\2746=A\277YO\277\274\314\315\330>{\245\240\276\262\224\205\274i\322\326=\206\244\034\277\312p\255\276\242\274\331<\310\341\016>\231k\207\273\234\254\300\276\251y\246>\347\275G\275\323@\323\275bwY>\237\003 \273\306M\265\275nc\301>\377\366-\277K\202\350\274G\345\273\2763\243\216=`{H\276\303o\350>F\245\221>\2421:\274\375<\262\2766k\356>\001kU\274\314\371h>\013\007\254=\2649\225>\264a[\276\2722I>\315\2570\276\377\306\244<\371\231J>\331\274\342\272\316\305\r\276d{\354\274\235\3261\277\210e\224\276\221\271\306=\\\275\264\276\\\316d\276\tH-\277;\221\333\276\255wQ>\030\342\353=\310[\r=\342\263+\276\224T\206>>t\303=\327xc\275$\0051>\367Am\276\252\350\225>\033\275P?}\034{?6\235\256=}J\322\273\333{`=L\037-?!\330\313=\262\\}>\"\362,\276w\373\036\277\275\272u;\027l\365=\210\205\005>Y`V\276\316\037\311=\260\266\343\275\3241\237=?a\253>V\260\300\275\361\375S\276>\003\363\274\303\010\227\276\371\266\265\275\230\244\017\275?[\253>\334p\316>\346+ <w\020\226\276\020\031;\275n&Y\275\331\257\277>\002\034!>h\203\272\276\373\263\233<\007\264\265>\206\217=\276\263y\207>O\214\002\276%\214\333>\204\253\023\276N\240\256>EJ\334>\2556p>z\237\336>\236\342\327>\207O\032>\351\213\262>\2350i>p\'\204\274\0131\273>3\"\256>\'k\221>\361\014\037?\316\204K?S\322->\000\020\227\276r\216g\276N\221\306=\270<w>\201\354>\276\206\"\314\276\220\377b\274>H\'>\201Q\374\276\232C\322=oo\236\276/\013\270\276\254G\215\276\331\303\002\275\242\004\224=d\277\363\276_\304b\276\177Z\247\276d:\220>0O\303=m\\x>\340\377P>\253\352i>\323\032;\276Fmh=y\337E>\014\303\305>\317\017\203=\2760\223\275\210\363\304>065?\341\252\010\277\023\241\227>\037]\216>\225_\023\277\305\010\277>!\272.>E\251\244>\275\330\014\276\201\352\234\275\256\2168>\"\250B\276\242\236\207\276\347a\303>\003\021\223\276\343\214\322\276\330]\316\273\313]L\276>\226/\276pI\025?\236\007\r>\3233\035=|F\347\275\375\322\330\275x\234x>\322\t\231\276%\026*?\000R=:\213E0?,\371R\275\274\221\365\272!\222(>G\006\016\276gg\355>zE\r>\374^\301\276\024\003\021>\274\017\206>\247\255\276=\205\331\325\275\3557\t\277?A\013?\3458A>\227\2331?\001\2364>\247\275c\277\330Z\010\274\3776b\276\266\263\214\275A\331v?\256\021\262=\262\204,?5hY\277\232n\263>\177J\005>\037\360\304>L\246U>Z\371\\>\322\3214?J\276{\276\250\032Y\276\343m\t>\327\255\t\275\0266\032>m.\256\276Z\230\204\276\305\311\200\276\237\026\365\275\234:\241>\254\351w\2758\302\022?L\324\300\275|\006\203=[\254b=A\225+\276\221G\226\275\307uB\274l\240\340=\373\256w>S\213\271>GP\205>\376/\342>2\270H\276h\260\252>K\315\366>o\000\030?\245Q\201>\352\254??\271\322\007\276\330\345\207>\214\300\202\277\200\257b\276#\002\301\276~7\245\276\202\337\320\275\324\376\217\277A\026\255={\227\031?\217\212\223>O\030\265>U18?\023\244\363\276\314(\006>y\324\013?\326\324\302>7:3\276\013X\336>\212\275\264\276/\000_\2772l\246?\013\201\t>\315C\331=E+\n>~\267x\276\365\217-=\345\3762=\242\000\"?\r\233\217\276j\'\033?l0r\277@r\020>\3765+\276\224\316\342>|\230\005>vx\261\277\365KK?\342\010\r\276\341l?\277\220\022\303=\365\211\325?Bnd\276{\242\375\275N\340>\275\324\351\337\276\020k9\273\210\332\210=\002\231i\276\242\236+>\311Q\272>\006$\314>\n-\033>VY\363>\260\346\204=\251\350\322=G[\322\275\024\344\376>p\217|=\024\353\014?\271\314$\2763\223\240>&<\366;\361Q)\276\216<H\276J\227\353>y\310\217=\275\3344\276\367\255\257>\3068\034\275k\027o<\275\211\344<8+\003\275*x<\2762+\202\276\331+\363>\227\365\314\2757\252$=\311eI\274G\234\365\274\330\245\247>\244\337\216\275\271\274I>\247D\200>_Q->\256\231\302\275\302\372\354\275\033l\000?\376\255\212>\367\"b\273\355\335>\276LYt>\305\312Y\275\262\302\202\275\367\326M\275\265\356\035>(\275\267\276\312\261V>U\030\205>\250\313\211\276r\212\202=\244\333\261=\r\020\276>3\'\232=\372\346\226\276\006\314|>v\002N>\323\002W\27676\027\277\276\007_?\n\302}>\025]\r\277\311%\277>B_\t>\270%:>3\375\243\276\241\220\265\275\251\260\344>_\t\363\274t\362\223\276\326\216G>\275\013\255>\243\301\002>\361?\223\275&X\354>t0\232\276\214e>=\217\006,>jE\245\276\332\207\300>\255>\247>\222\3562\276\302\264\277>j\227I=-&\005=\326\260s>\375\350\237\276\003\035~>\350^\342=\255S\233>\204\367\244=q\377\001=s\266\032?\225\225]>^\t0=\322\260\036\276\377\261\270>ph\370=\317%\226>\376_\331\276\033\277\r>\203g)\277`d\214\276\371\251\207=\261\213N>\201\2714? CG\277\216/\032>\304\031\010>P\332\250\276\344\342\031=\250\t$\277\204\225^>\030\305e>\272\'\261\275\031\300\316>`\260\300>?\365\251>\016\017\263\276\274\235\221\276\355\202\224\276\257\271\270<&\222m\275Ew\030>\236\361t\276\271p\022><\365\021>\254\304\227>~j\261>\277\010\242>q1\226>,\303\203\276D\202~>\r\024\216\276\027\323\246>\312\\\205>U\352\026\275\n\254\325<\313\022#\276lDd>\300\027\234>|\344w\276\305qC\276\263\377\200\276\371:\013=\240g\363\274\000Z\302\276`R,><\3204\276db\261;\335J_\276\334Z\317\275\240\300W\275r:\251<\356\034s\276\3301\362?)tY\276\n\241\227?\373b\277>\375\243\366?\235K\263=1\205\023\276c\2649>:]\352\274C\367.\2765\335K\276!\355:\276\354\371\252\275\210\376M\274\325Vc?\324\351\023?\375\3503@\304\034\254?\347R\250?\340^F>6\274\265?$\205\004\277\275\031\210\276y\002\207>4\312\021>\235\2336\2761 e>\327\351J?E\360\220>f\374\312\275-}\274;D\017\321\276M\314\036?\351\216\205>\367\232\r\274-\203\252\275\031k\200>(4\377<\222\231\004>U\331\022=l\323O\276\354\377\n\276v\004\001\276\245\374Q\276iQ=>\320\355d\276>!;>,\\.\276g\211\366<dP\350>!\2072\276*\236\026\275\021\320\314\276\3676\211>\203\224P\276\355\227\230>?\250\314\276\001(\367\276<\002\254\276\325\363H?\337p>?\"BM\276\221\220>\277\207\260\225?bg;\277\006,\347\276Rd8\277\375\205\030\277\316a\225>\034\016\024?\232\021\255>[Q\301<\032\260\226;\261\232\325=5I\345\276\347Ju>\325/y>\\z_>\007R,?\235w\260?\237\277c?\322\333t?\252\222\257>n\252\374<\3334\273=y\"\351>f\224)\276\211\237\007?\014\232\023>E\001c\275\010R\232=\371aO>\021\013\225>\266\211^>,\302\227\276\037M\323>\372\233\t?7\035=>\301\346\'\277*\2232>2R\252\276\305\3777>\277\357d=\333\036\213>\352\245\317=\253(\233\275u\372\212>?J\316\275-\002\236>\220G(9\351\306~=T\365j?j\311@?\263\274\204>\226\314K>\014\025\211\275f:9?\302\277\301>\003\305:>{\034\337\274E\346\245>\327;6=\243\265D>\241\353&?\324S\276>*-\201\276h#1\275\354\246}<\'\236\203=\204\320\331>\234X\256>\353}\202>\000W\207\276\316Y\233=\0063\206\276\242\304\203>#7\231=L\373\261\274\301\352\177>#\224<<\353\246\014\276\354g\030\276K\204!>a\360\367\275\347\367\277>z\000\334\275-\330/=K\305\325=\370\210\335\275\244$\255=0we\276h\253\200?A1\002?\250\203\205>\177pq>\303vX\276\323N3\276\272\354\r\276\276\360!\277+:L\276\223\256/\277\'u\241\276\241\014\004\277\224u\005\277% \013\277}\264\213>\307g\252\275\226\210\322>\275\213j>\267g\332\274h0/>\026U}\276\3268B\276\220@D>\323iw\275\216-*\276\334K\233>\020\251i\2761\014\230>\031\365\245\273\024\362<<"
      }
    }
  }
}
node {
  name: "decoder/dense_4/MatMul/ReadVariableOp"
  op: "Identity"
  input: "decoder/dense_4/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/dense_4/MatMul"
  op: "MatMul"
  input: "decoder/dense_3/Relu"
  input: "decoder/dense_4/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/dense_4/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        tensor_content: "\356[\372\274\222\037@\271b\235\236\276\317I\251>\335\006Q\277|\3623\276Gf9?\320\2660?\000\000\000\000\177Kt>,c3\277\222\272\231>\362\304n\275N\337\232>\353\312\022\275\243\207\315>\227\027\035>\325\212\371\275L\205\254\276\255\202\375\276\213\355Q<\274K\217>e\357+>2e\332>[\354\r\274\217\361\206\277\003\317!\277\001\262\032?\re\272\273\331\033\227?X\371\024\274\020NQ>"
      }
    }
  }
}
node {
  name: "decoder/dense_4/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/dense_4/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/dense_4/BiasAdd"
  op: "BiasAdd"
  input: "decoder/dense_4/MatMul"
  input: "decoder/dense_4/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/dense_4/Relu"
  op: "Relu"
  input: "decoder/dense_4/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/reshape_2/Shape"
  op: "Shape"
  input: "decoder/dense_4/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/reshape_2/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/reshape_2/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/reshape_2/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/reshape_2/strided_slice"
  op: "StridedSlice"
  input: "decoder/reshape_2/Shape"
  input: "decoder/reshape_2/strided_slice/stack"
  input: "decoder/reshape_2/strided_slice/stack_1"
  input: "decoder/reshape_2/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/reshape_2/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder/reshape_2/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder/reshape_2/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/reshape_2/Reshape/shape"
  op: "Pack"
  input: "decoder/reshape_2/strided_slice"
  input: "decoder/reshape_2/Reshape/shape/1"
  input: "decoder/reshape_2/Reshape/shape/2"
  input: "decoder/reshape_2/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/reshape_2/Reshape"
  op: "Reshape"
  input: "decoder/dense_4/Relu"
  input: "decoder/reshape_2/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_transpose_4/Shape"
  op: "Shape"
  input: "decoder/reshape_2/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_transpose_4/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_4/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_4/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_4/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2d_transpose_4/Shape"
  input: "decoder/conv2d_transpose_4/strided_slice/stack"
  input: "decoder/conv2d_transpose_4/strided_slice/stack_1"
  input: "decoder/conv2d_transpose_4/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2d_transpose_4/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_4/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_4/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_4/stack"
  op: "Pack"
  input: "decoder/conv2d_transpose_4/strided_slice"
  input: "decoder/conv2d_transpose_4/stack/1"
  input: "decoder/conv2d_transpose_4/stack/2"
  input: "decoder/conv2d_transpose_4/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2d_transpose_4/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        tensor_content: "\\\364j\274\336\'\206\276\237\023\201>\214\261\024\275\n\377\265>\372o\257\275\243\252\322\276\023=g\275[\357$>)\247\206\276\310i\027\276\273Y\261\276\265\002\031\277`-\202\275\233\002%>\310C\025>\352\202\354=\020t9>\rN\221=\205\001E>\022\261\261\276\377*\362=\024\260x=U_\377<\243&J?\224u\205>\307\233\226=c\252g>\311\232\321\275\336\342H\276g\371\315>\325\351U\276\241yN=\301\274\246\276\323Z\264=iV+\275Bx\277\276\316\354\340>\212\260\377=\037\007\304\275\236\275\000=\211\376\316=\234\341{>\226\230x<\022\331\212>i\271\313\274<wr\275L\267!\276\322|\232>\330\031\271\274Q\236q>[\'\247>\372I\027\275\256\022\">c7\373\275\270\3439\277\177\301)\276V\234\332\274\364\266\205=T\0353\275(DU>\0104\033>\276\r&\276r\211W>]\352\340\276\007\253#>\037\252\223>S\036\"\275\222\027\206=FI\375\275\370\367F>\313\316\204\276aU\331\275v\321\213\276\312k\026?\304\017\354\275|\311\177\276\373/\371=h\211<<n\271\263\276\323=\276=\326\023#\272\374\266Z\276$\272\231\2732\036\335<\244\355\036>\033\372\375>67\374\275G\3766\276\001\227\225>\203M\206\276\177hs\275\213\224\215\276\363p\325\276x\377<\276\004\243Y\275\'\331?>\243\270;\275\005\220\r>Q++>]\315S\275\276H~=w\353\">H\000#>\253\331\211>n\352\177>\036\021{\276\372?\335\275}e\335\274?\260\311=\234\020\215\275\316&\233>\250\354\354\2761z\234\276-\2202\276\245\350\303\276P\245\275>\223\027\007\277\223v\024\277\205;\370=]\025\203=\036\223&=Ki \276\317\022(=\224\260C=+a\327\276\244Bv>\310\231\217>B\267\340=\322Hw=r\212\240;\036!!>~\300~>\021\331\023=\367\363\317=i_\356=h\335K\276\214\030\375>j\366<\276e`\221=\217\036\370\275\202Z\325\276\307\255R\276\324]\306>x\331\216=\232?\324\273\036\350\253<\027:\323=$\277\021\276\215[\341=\315\212\221=\026\371\370\275\365\356N\275>n\373<~e\266<\3545\337=\325\316\206=\216\213\213=\364\312\277=\225\244!\276\"qO\3000\376(\274\273\216\356=\245\344\000\277\004J1>\216\001\270\276\324t\200?\376\213\310<\n\311\262\275u\326;\273\364\276!;$\254x>\250\005\372=\220Y\026>\221r\002\276\300\025`>\327\236\336\275\333\023\204\276\363\273\027\276!\025-\276\227\277\000:\025s\t\276(\n\256\275\201\241l\276\364\257_=\"\300S>0\215\246=I\200\220=\244\317\207>\373\006\200>1\201\243>\375q\007\277\211\337\253>4\206\031=\315\026p\274\220lu\274\030\001\223;0\376\204\275\333\033\214>\024\017\235>!\321$\275\235\037\001\276\030\352\"\275\004n\\\275\302\257\004\275b>\030\275\350\017\035=C\356\355\275^\035\r\276j\210v<\270\362\026=@\322\361=*b\214\275LZ\375>\217\3738>B\344*>\2673\230>\003\004\036>\273\007%\274H}U=\223\274F?\347\267\002\276\005\317f>;b\332\274\034f\021>\276\037\035>W\222\341=\237\216\223=\212|\020>\004-\357\275~\313\204=7\345\320>\357F0=\222^6\274\014d\025\276\204\\\354\275\2109\236=\303\246\036>\025\2331>\000\302\247>5=\367=\006\245\035>7\353\320<5+\276\275\\\271\331>\303\202\016\276\234\003]\276\030\230\005?\236\032\221>\355$\033\276\215\346\255\276\326\032\201>\254\231\r>*\030==\0004w>\362o&\275\t\000\\>9_\216\276&\204-\273\262\201\031>\\@\033>k\245l\275\202\323\217=\373\265g=\223\372I<\330q7<\346Q\253\275\n\241\342\275\303\361\334=\346\243z=B\360\323\275\013\260\205=\313\t\276=\374\203\r?\304\214\031><x\224=5\342\303<\300\304S\276\021n\217\276\244v\333\276\"O\220>\216\206\322<\024\314\014=H\0048>\2622\005?\255w\000>z$\023\277F\224\300=\0373+\274%\256\217\275\272O\252\275\016\231`\275\272\217M?~\2253;\321\036\001>L\265\343=||\007?\\\342\013\276\027\345\304\276\207\336\350\275\004\360h?B\031\026>\200\272\242\275\263\270}>\016{?>\304r\350=,\246\314\274\300f\021\275\245cQ=\024\232~>\325\331\367\271\t\261\217>\005.\246<6\014\334<D\354\"\276\305\336H=\002\250A?\200D/\276{\202\024\274\257!\201>oJ\361\274\361\301\252>S\2662>\211K\026=\235\036\314=6\357\337\275\241)]\273\274.\322\2769\202\260=\370\270\320\274\033j\230\274>\027\216=\2479\241\276\014\267\210>\300\236>>/a\376=< U\275\214$\023>Vqx>!\357#=\303a\221<%C\031>\t\'\351<~%\216\2751\336L=O\251\313\275\347A\305\2751so\275\215#U\275e\204\231\275b\016\256\2757\252%\275%!%\277\244\324\233>\037\272\274>4\254\205\275\340OB\276V\341\366=\227S%\276\3236S>\322\271\260\275J\241:>33\367\276\355\021Q\276%\351\220=|\226\225\276X\220\316>\366*F>\307K\233\275KwU>E\t\030=\364M\220>\212\275x>\003\016\030\275\1773}>\352i\204\274\003\254\364\274\334\023\214=pW\016>\021\026\\>\214_\252=\314g`>\r(\357=\351\033\013\276\362\035J=\244OG>\334c\357\274\354\226\267>\206\017\026?\0247\261\275\355{{>K3\035\277\305`a=C\334\300>\230v%>\356\333?>\314\264\023\277hQ\241\276&T/?\212&\255;a\030\304=\203\311{\275\327\"6>\303\003:\274\375\210\323<Cf\253=\204\355\237\276\334p\242=f\351R\277\265\204T\300ZA-?\0357\277\276\364%\256\277\274\264\342\276F-!>\351\312\020>\231|(\276\240\277\250\275\032yq>\237\323\257=\033\026i\275?\252\362=e\233\223<iW->\3162s=\312e\005?\207\024\006\277a[\010\277k\345D\276.B\030>\245\257\001?\360\341\203\275)\351S\275\232R\223=\257\333\252=\224e=>8%1\276J\314\265>\262\234\324>y\027(>Nv\016=#\332\276=\222>\275<\331\322\261=p\031\005=s`\033\275\320\276\267=2Z\"\275L>\260\275\323\006\236\276\004\244\341\275C3S\275\274e\314\276\276\202\250=3\201\010;\365s%?\260\323\260>\315\311\036\277\377d\357\276l\326\036\2754\327\024\275(\254i>i#\216\276\220\004\352>\302\374\225=\n\002H\275P\356\240=\347\265\257\274\246\323\323=\205\250\224>\361-$>\240\243\004>\341\2420>\213\217\356>\306\003s\275\367Z\302><S#\276\254\025\351=(E\017=Wf\002\276\372\311\351\276\025\222\022\275\261[\264=`\272\021\276\265\264$>\215\263\355=\220\274\r>\024\371\010?#\352\003=\3625\222;.\340B</\213n=\211\016#>`\333\370=\362r\343\275\215?\273<\316\316\246>\262~\337\276.#\'>\343c\370>\241\316~=\244$\373\275r*\031\275~\271]>DYP>\236wR>\355\264\017\276\232\334\350<PyS\276\363\323\266\275\247}e\275\331\004e>\300\341\301\275S\265\350\275\003\253=>%\272\211=bZ&\277\270\262\204>\261.\310\276\364\214\267>\235\2478\276\343\300\310>\026Z\304\276\346Z\215>\357\262\342>\314\353/\276\207&\331=\311\215\200>\312\236\205\276;\274\025\276^\270\310\274\020/\t>\377jd\274\030\306\037=\333ip<t\233\255>K$\025\275\305\366\000?*,\334\274\030\257a>\332\220!?\023\262/>\2567-\275\326\366\323=\353\370\272\276\234\255R=r,==\025\334\335=\256\312\013=-%\006\276\244\027\310=}\237\224>\301_\241\276%\214\213>c\247\035>\375\320K\276\267_\335=\235c\246>\264\225\030>\373f\306\275\272\332\371>\254\350\357\276M[q:\233*\225\276\356\025\330>\340\3707>G\313+?\232\261\276\276\037\3446\276!\240\021\276\263\301\200\276x\366\331\274qw\">\236Y\022?1\365x>7\211r>\211\343O=\221\212\001>\177\265+>Qv\223<\261C\231\276X\304t>\016\241\226\275\221\216\017=\214\026\261>b\014\232=9\266f>|\363x>\333\014\005>f\000\236>\007C\205\275D\310n\273i\303\214>\021(|\276\364J\344\275\021\213\270\276N\256\"\275#G\305=A\010*>H\342\277\273x_\307\275p\310D=xb\001\276d\177\353\275\244\361\233\274\345\014\223\275\006\301\304\275\032ne=\022\006\240\276\010_l>\273;C\276\2131\003>\272v6\277R\305_>\n\034\000\276\366\016\220=\363\273\020<\352\2264>\273b\255=\203O\244\275\270\342C\277\230\361\025\276\363\222\207>\323h\325=\340\225+\275\312\033#>\006CP\275Ui\270\275m\322?<\177\210\203\274\330]\363\275\323\026\036\276\007\231\211\274\320\260I\276\3128\'>{\357\t\276\251\215G?\334jv\276F\034\314>\034Z\021\276\362\033g;j+\237>!#4\274\3529\360;m\324~\277\372\354><\311<\240\273\260ac>\371\326/\276\226?m>\364\260)\275\333\237p=\003\303)\275>\374l<-\316\275=B\3402;\206\277&\275:h\037>\206\312C>\223\257e>V\350\024>\007\206\n\276\203w\200=\316\036I\276\267{\220\276\362I^>\216\204\020=\310\213\">0k3=B$\204=\306\201\005?H\247\257\276\333\007\036\275\235,~>(9M>\346\213R=\235\235a>\302w\036\274\301sc\275\017\366\276\276\355\013\274\274h\317\367=\205p\231:V\363\377=\036\272\\>\354\362\261\275s\256\327=\237P\203=\201\3278;\217\344\005\275E/\213\275H\236\236\275\376\326V\275\277\371\033=\037\306\r\275\037\3402\275\271\313\375\274J\343\337<G\221.>Gj\302=\031\211\264;4\321p>7]\3329L\020\264=\005\221(>\374\234(>b\262\244\276\306N\024>\242?\230>\305\3628?\320\347A>\003\014\356\276\030\273L\277p\007\222>n\3357\276\312\034\264\276\031y\334\275&\177)\276\347\365*?\336\033N<F\367\343\274\376\230\207<zsH>\213p\001><\363l=\301\025\177\275hs\207\275\317\3545\275=\025R\275{t\306=\221\253X>d\245r\2734\320\206>\227k\243;\364&\301\276X\002T\273\372\313\036\276\373\262\304>\232\377\267>\024Ea\276\035\322\313>\230\312$>B\365\233\276\375R\202\276\374\2068>\312h@\275,\203k\276)\371_>0\200\000>\212jT>K.N\276\316-\214=\367\222\246=\000\236\264<\262\341\307\274\344\020\025>\303Q\325<\3138\230\275\017\005\211=\211\266\354<]\305\256=\234\311\t<Pm\363\276y$`>\005\010\223\276\266\200\342=\264\236&?\201\214\026>\347\207\202\274@\220c\275p\014\245\275-\356\005\276s\337c<\212M-;\320\361\350\275\314ix<\361JM>^N!\277\300\023\t?$\344Q>\334 \222\275\216\241\327\274\276\246\255>\251\205U\277\033\036\266=\244eT>\353\"\356<|o+\275\027Q\225\275\245\344Q\276<!\200=\364\014\204\272.D\216\275\260|k>~\341>>\033\232\347\275\257\225\":\267\375\322>\226\377\213\275\242\305x\276\200`\027\276\337\254\332=\241\305\222\2755\177\013\276\033O\357\276\273n\325>h\225\246>s\202\033\276\013\020\226>\354\235\327\275:\246\033\2761\202\025?\333\250m?\364^\247\276\2427\352\276\253\230k\276\344\374\013\277?\'\005\277SZ\033\277\254X\351>\265\010\263=H\334)?\253I\210>\261\327V\275\373u1<p\267)\275L\364\303\2744w\230\275I\346\354\276\217\0043>(\031|>\026\271w=\316\212\307>\223\353\007\276\204\312\276=\303\370E>\250l\250\276\332\236\265>\345\266\021\277{\360\262>\226qW>\237Y\322\274?\214\203>E V>\0246E>\024\353\'>h\"z\275=\206\252>\313\264\037\276\030-\023>y\276\334\275\034\347\240>\024\365\204\275\202\270\311\274\2300\267:T\211\340=\034\0231>\300p\037>u\033\026\276L3W<\031\320D\276G\236\220\276=2\210=\231)\270>w@\361=\340\345\305=7aP=\r(3>TE\333>\345e\222\275~Me>\036P\264\275d\342\257\275\262\307P\275\\\300\025\277\243\001\213\275\227Ji?\277\026\037>y\374\004?]\\\246>\355\243\361>\211\271\341<\347P\241\276\007r\225>a#\177>\t\021K>\032\237\327\275\243\0340\276\371U\240\273\243\263l\276\364\"=\276\220\010\234>\006x\234>\232P~>\2714;\276\252\246R>\000\017\261\275U\317\003\277\307<\315\275:=2\276\025P\206=\344c\361\274\033$d=15\241=:\361=>A\361\276=\326\254)>#GI=\267\321\236\276\202\334m\276\324\034\342\274\233\302\262=\347\022\367>2\373\315\276\322\227\251\276M\343f>v\300E?\267p\270\275\252\\\241\276\245\327\345<\325s\032>\37233\276Zp\312<\2270->\201\023\315\276C\370W\273\266\007L\276S\224\327\276\343\304\277>\303\265\033\276\247r0\276\340\200\256>rF\277\275^`\036=\271y\247\276\300\255\347\276\257C\002>\367\217\007\277\300/w\276\002\341\241>\370\304!\276\374\275D>\030\354]\276uy\274=\327\356\351\275rJu\275\257\035\020\275\327Q\242\275\371K\324={\276\230=z\202C=\300\256A\275\354\362\321\273\342O\330>\256\272\327>\341\354\'\275\007\205\002\277x\206\204;\002\006\214\276}r\203<I\366\267=\226~}>\030\013y>\306\303\177\275x\216\217>!U\244\276\235G\225\274\225-,>\360\036\013\300M\021\240=\200\335 >+\374\211=D#\310<\220{\n>\013\005\375\275[\007g=\210\034\344\275\213\217,>\277\277\200>P\313=\275d2\230<\001\244\262\276\236\254\275\276\232j\344=\251\372\225>\265\263o>\232\023\304=Q\005h\275\254~\201>%\024\t>\215\010\034\277/\252\375\275\247v\032\2769\243\267>\032]->\010\367\376=\0021\356\273t,\202\276\215\\\256\275\200\264\336>Ow\233=\327\177\302=\367\020\017>\030M\350\274]\263\346\275\216\343\335\275\276\240M=\314\336\207=\025\263\345\274\201\205.\275=J\356\276{?\252=q\265\272\275Xrb>\206X\242=\326\352\361>\230)\203>\363\230->\246{\304>M\204O\276FW\242=\341\217\213\276N\010z\276\\\361\207\276e$\215\274\375N\r\276\316\334\006\276l\022\207>\361\357.\276\2151\321\276)Z\205>\314\204\001>\272\032|\276_\tj\276\205\023\030?\313\372\364\277Sj\036\275\332Kz?4d\206\276\215\362N\277y\263\023\276\\\211\351<\035\000)>\270a\377=5\240\252>\232\372I\277\241\374\034\276\346\224\210>O#\345=\345\250\023>\241\317Y=\373\035\004\276\250\320\017>\250w0\277]+\227\276\344~\200>O\332\227\275\257\0076>w+R>\257i\020>EH\210=1\036\303\276\205M\266=\004(\337\275\270\352\037>\365\304!\276.\342\330=+@\231>XA\177=q-\267\276\337\255?\276\247\321\373\275l]\212\275\027\231\030\274\346=\021\275-\"\261>\257\333\345=\326\027\254>#o\303> M\230\275\365\375p\2757\036\207\275\243\342Y>\376#\206>\300D\240\275M\236\211\275\357\361U\274\200zL\276^\014\037\276\231\361@=\006\033\";\265[@=\355\230\222?\216n\214\277\032F\334>@\326\270=Y\310E=mk\033\276R\240\256\2756i\231\275\ra\217=\226E\341<t\226V<\034E\036\274\000\267\373\276\205\236\005>ci\306>U\340\341\2766\023\270>Z\n\302=\025\350\301=_\272.>\332\325|\276\351vS>\224\315\302>\210\230\303\276%\3462>.\002K\274\302\377\212\276\340\314v>*D6\277\031\256\001\275NZ\010?\215\335\270\27652\301\277f\373^\277\256\317H\276u\260\233>$\305 >F\020 =P\312\302=\032\2651\2745\273\300\276\233\241m>v\017[>\362\2211>\306\2774\276gk\366\273~\207B>\'\357\217\276(\344\351\276w\032X\274/\037\360\275\025q\212>LZ\361\276\226\327\200\275\006\333\301>\226\256\217\276q\314\236\276:\250\334\276\210`Q=\302\307\330>m\335\206\275I\200\020>\211\257\333<J]\016>\2063\306>o\007\241\2763U\027=\310\204\203=\312\202\001\277\037z\221>d\014\211\276~\230\304>\357:\260>[F\024?\005\247\017=2\032\240\276U\266\216\276\004u(>\365\246\236=5\035\226\275\235g\002\276\234\350\220<k\232\315>\370\322\021=\t\363\n\275\303\266\323=\377\347\007=\032\\=>\316\243\247\276\332\024\232>RI\036\275\311\206\270>l\252g\275\204\202(\276\240\310\030\274\341-\365\275\313\204\346<[lQ=F\017\341\275\311]\026\276p\014\206\275\262\360T<\266\326\206=\205h\370<\350=\023?\"\237\232=j\376c=j\232\357\275\216&\227\275\302\367\322>\261\317\235\273\241%\302\276\005>1\275\2606\200\277\332\236k\277\025\311\260>G\306\007\276\351K\361;l\244\000\277y\201c\275\255\r\315>\251\201\323>kl\014?\034p\023;\007\254\237>U\001\217\275\317\370G\275\302\324\363<\205s~\276y\365\231\275zt^\275\274*@\276H\026\234>\226\343\202\275k\277#>\007\244\335=q\310X\276\251\031a>\2758\234\276\2550\034>qA\356<\334\0069=\267\335\226=\016f\033\276\233J0>\007bk=\350\013\266=\261q.=\336\024\343;\264r3=\002\212e>f\213\013\275\2439&\277\\\353i=\307\272\253>\021BU>\271`\235\276r\2165>\370\255\021\276p\233\250\275\264rB?G\n\374\276\246\241\024>qZ\t\275fA\322\275\035\267\001>\352\3335>\232\t\277\276x\251G\276s\307\325=R\340`=\323\026\253=\006$\201\276p\345\324\275\032zu\276\222 \037\277P\177\266?l\241\332>\n]\310>\2670\006\277\007\304\022\276\202\227\221\275\230\271\'\276\340\217\031;\364\241-\275\216w\207=\341:\276\276\241\213,\276\260\343\370\274_\224k>\343\356L>\r\240\305;#\"S\276\235\212\204\275Z\204l\276U\010\372>\323\375\336\276\254N\236\275=\320\262>\031e\301=\311R\010\277\340*&\277\204\341\306>\320K\356=\003N\007\2769\235\205>\345\343S\275g+\214\276\301\"\301=\202\370\027\2776\366\010\2734\352\250>1\322\313=\225Zu>@\226\354=\263\332\322;Ue\373\274v\227w=\206\305\254\276?7\006\276\346A\207=8\007\266>\232\274\022=\303\256R>sZN\274\031\337K\276\005\250\340\276\365n\231>\341=\002>\363Z\257\275R\003C>\277y\263\275\330\342\321=ZY\224\275\327\274\031\276\351N\221\275\005H\327\276c\214\224<\251\345\t>\375Z\330\273\257M\323\275U|\221\276\207\345\203;?\234\303>\3671\353=\325\177O\274o\243\247=\354tQ>.\351\r>Y\236V>t\240\215\276se\355=E\374\230\2751\n\247\277G)M>5[\220>\240LS>\375\350\037\277&h\271\276\313\236\347>>>#\276\324\004\331=\314\021Z\276\t\033\"\276\224iw\273\234\260\332\275\353\003\215\275\337K\353\275\017N!\275\026o?>\225\206\350\274\"\314\313=\201\025!=T(7\277\2328\240>s\376\200>\3748\022\275\227\304\241>\321\020B=\344<\256=\260\231\215\276;T\242>\266\357\255>\232,H\276\244g\301\274\353\017\236>m\022[=\212\010\304\276\214Y\340=\303\037\207\273Vm\366\276\370\353\226=\370^\317>\007\337\337\276\334M\305\273\271\226G\277\332\2171>\302\231\214\276\235\364P\276\036,\246\275\2266\236\275\263I\224=\243\256\244>`;\220\273\t\207\014\276\323Y\305\276\304\030\243>\013\214\014?\200\034)\276Gn\207>\232\037\035>\302\273\322\275T\245\324\274\216\300R\276\200\370\025>\353b\217=~\375\323>\'Q\360\276\223\230\224=Da\250=U+&\276\033\276\t?e[@>Q\346\004\277\316\177\355\275N\027\244>\237\223\026>\314D\301=\317\306\233=c\261\345\276m+\\>zx\341>\266\310\210\276\035\344\022\275\026\333\266=Z\357p\276\324\267\313\275\0078o\276\335:\235>\236\351}>\262i\246\276\201X\323=\204\360\363=\220\244\246=\005\360A\276\307\354\302\275\223\337\002\276\020\336_>.\325%\275\017U\376>\377\222u\277\315\232d>\202R!\275Zq\212>;v\354\275\035\301\356=\341\315\351\274\022\243\336>\010\273\353\275\334+6>l\337+\275\365\265\260>\007\034\022<\003;k=\217\345\350\275,\261\034\275?t\274\275O\316\251=*<\201\275T\320`\274u\263]=\355\371\377\2742\243A\277.6\n\277\275\276\023>\303\270\201\275V\305\246\277?\261m\277\336\255\271\276\014\377\356>\257w\235\276\216\033\333=\315aD\274\307H\320\275\220\014w\276\'\227\270=Xc\272=0/p\276\025\374\364\274\277\252\007\275\010\016\216=\317=\205\274\363\375\271;s\000z\275\306\037c=\250\252\362\275\266\004\334\276#I\232\276\007k\306\275x\"\203\276\226Ne\276k\267\246\277\245W=?\202\332\321=P\234x\275\324d\033\300)\233z\276\207\273 \276\221\334\024\277\002E\335>Y+u\276R\014\361<\002\226D\275\212\\\275=W\270\233\275Fa\000\276T\"\235\276\226\330\252=x\200:>\226\236\n=\033\272\310\300\244o;\277.\340\001?\013\0216?N\344k\276\037Z\350\277%B\267>\277l\033?\220\r\217<\355\307\275\275GU@=\022I\265<$\023\244=S\016u<\2139O\274\322\004\224>\370\025\026\275D3\303=K]\330<@\225\211=<\343+\276\255\301\005\276\223\340e>4\327\237\2766\232x>Uu:\275\350&\331=#H\032>\272(l\277\314\332\001>\234N\300\2769\017 ?\310\270\235\274\342\0225=\220D\204;N\333>= \214\307\273\302\005c\275<u\272\275\250\200R\274\263FN\2769\211\224<W\275\301=\255fo\276\243m\037>n\256\n\277\244 \371>\311\362\346\276Lq>>\371\'\214\275J\007\242=\236U\315\275^\316\013\277\025h\211>=\0162\276\220(\231\274\304Xl\276@|\"\273\246)\021>\261:\034\276\005\0234?\023\220\013\277\365\016\263>;^\222=\3215_>\372n\026=\324\215\226\275\374\255N\273B\004\325>\222b\203>aI\017\276\267\224\340\276J\223$\276;\261\227\275i\326F\274\367\256#\275N\264\036?\314\204\005=\310R0=\027\250\010>\177l\025\275\270]\327\275\n\272*=;c\200\276%\014\260\2750\320\215>:\203\006>\3333\244\276"
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_4/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_transpose_4/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose_4/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2d_transpose_4/stack"
  input: "decoder/conv2d_transpose_4/conv2d_transpose/ReadVariableOp"
  input: "decoder/reshape_2/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 4
        i: 4
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2d_transpose_4/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        tensor_content: "\003\0265\276m\231\270\274fXF=\213\324\035\275[3\242\275\251m0>B{\322=Q\237\r="
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_4/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_transpose_4/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose_4/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2d_transpose_4/conv2d_transpose"
  input: "decoder/conv2d_transpose_4/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/conv2d_transpose_4/Relu"
  op: "Relu"
  input: "decoder/conv2d_transpose_4/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose_5/Shape"
  op: "Shape"
  input: "decoder/conv2d_transpose_4/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_transpose_5/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_5/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_5/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_5/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2d_transpose_5/Shape"
  input: "decoder/conv2d_transpose_5/strided_slice/stack"
  input: "decoder/conv2d_transpose_5/strided_slice/stack_1"
  input: "decoder/conv2d_transpose_5/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2d_transpose_5/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_5/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_5/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_5/stack"
  op: "Pack"
  input: "decoder/conv2d_transpose_5/strided_slice"
  input: "decoder/conv2d_transpose_5/stack/1"
  input: "decoder/conv2d_transpose_5/stack/2"
  input: "decoder/conv2d_transpose_5/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2d_transpose_5/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 1
          }
          dim {
            size: 8
          }
        }
        tensor_content: "=5{>Bh\232>1\006\224\276\376Xu\275\030\347L\276K\201\234>\207\251$\277\347[\024\276E\255\210>V\247\240>YT!\276\255<\214\276+\023\367\275\350\242\010\275\265\215`\276\024\351\376\276\333\250\021\274`\001l>T\020\366\276\'n\177\275me\210\276\277D\222\276w\311+\275n8\033\2766\352\254>k\254y>/\374\354=\276\013Y\274\357Jg\276\351\227%\276%\361a\2762\2212=\025Z\034\276\207\302\256>\3029\322=>\031\267=Q\236\211>\340\277?\2766vS\276a\336\352=\016~a=%9\003?\334\343S>\373#\022\275\305\247\252\276\024(\307\276\250p\275=\261\252w=\323p}\276\006\333\215>\341\333\330\275\371\342\304\276!\031\022=\231\303a>(\305\211=*\310\310=\002y\257=\317\027\333=p6\005\276E\'\273\276\313\3137\276\277\217\266<\031&\210\275\253\343_\275\243\007\242\2769\r\213>\306\024\366\273\310\337\273=\341\267|=2,\253\276\247;\345\276\250e/\276\215\032\311\276\036\020\010?t\357P\276\034\212\020\276x\277W>\253\213\230\273\245H\303\27567l>D[\025>\232\3640>\\\2015\276\317\210\222\276\020/\217>\2016\320\275\301\177\313>\241\315 \277\213\203@\276\3072\336\275a\025\025\277/\006\221\276M\270`\275\021ps>E5\244>L\001\207>\314\006\355\276\234\265?>:AY<_n!\276]\350B\276\024\035`\276\246\352u>)\312\347\276Z,\'\277a\317a>!*\310=~T\253\275e\335d\276\351\336\020\276j\360\305\276T\233c\276\340Re\276)/\352>A\224\203\276\2722[\275\004\365\231=\221\\j\276\227\230T\276\313d\t>\237K\'<O\222\366>=\036\267\276\323\323N\276\027\361\204\276\227V\257\276&.\276>C\223S\276\034\204\276<\021\'\303>\303&\030\275+\321\306<c\366\350\276GY\206<\2724Q>\264\026\024\276\313Vp=~d\344=\256UE\275\225\251\212>\227\000\314\276\270>\210\2761s\237\276\242\321\275\275Y\242\356=,\232\210>\014\265m>\213iM\275H\371\t>@\267\271\275\212\006H\276Z\263\345=~d.\276L\271\206>\202l(=\3009\215\276\305\340\254\275\223\374\030>\225-\221\273\371\322)>\251[\037\276\264F\023?\217\014\370=\007\033\215>y\235\017\2769\367\246\276\327e\200>J\246.\276\307rL\276t\207\204>2\212\\=E\004\241>(QJ=z\363\204<c\r1> \032\361\276\247\376c\275\204\320\037\274)X\214\276\2362\326>\006\237M\276\201\303\301\275\3535\236\276\366\341m=\355\326\302\275\375\317\250\274\250G\257=\362O\275>\362=\024\275\227\365\213\273\324V\334\275\005\305\320\273rr\213=\212\"&=\017\232+\276\027K>>)\'\252\276\317\204\204>\357\274\323<Q>h\275"
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_5/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_transpose_5/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose_5/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2d_transpose_5/stack"
  input: "decoder/conv2d_transpose_5/conv2d_transpose/ReadVariableOp"
  input: "decoder/conv2d_transpose_4/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2d_transpose_5/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: -0.030955875292420387
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_5/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_transpose_5/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose_5/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2d_transpose_5/conv2d_transpose"
  input: "decoder/conv2d_transpose_5/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/decoder_output/Sigmoid"
  op: "Sigmoid"
  input: "decoder/conv2d_transpose_5/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "NoOp"
  op: "NoOp"
  input: "^decoder/conv2d_transpose_4/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2d_transpose_4/conv2d_transpose/ReadVariableOp"
  input: "^decoder/conv2d_transpose_5/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2d_transpose_5/conv2d_transpose/ReadVariableOp"
  input: "^decoder/dense_3/BiasAdd/ReadVariableOp"
  input: "^decoder/dense_3/MatMul/ReadVariableOp"
  input: "^decoder/dense_4/BiasAdd/ReadVariableOp"
  input: "^decoder/dense_4/MatMul/ReadVariableOp"
  attr {
    key: "_acd_function_control_output"
    value {
      b: true
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "decoder/decoder_output/Sigmoid"
  input: "^NoOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 1087
}
