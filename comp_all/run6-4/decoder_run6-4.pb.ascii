node {
  name: "x"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "decoder/dense_12/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 32
          }
        }
        tensor_content: "o\265\264=\233B\357\275>\232\272>\276\354\312>G\257\004>\202\306\013\277\301j\314>J\001\'\276\000\001\262\276t\324\325\276\270]\231<4\010\304><\223\323>\276\323\001\276\032M\275\276\352\3747>\357\212\244>\226\3674\276\031\337\361<r-\007\277\320\035\324\274\325\341\302>o\262\374>\001$P\276~!\205\276xf\224>Y2\212\276\024\234\002>=\255y>\340VB>qV\322>\013e\002?\333)\362;\3329\226<0\256E=\033\210\001?\030\260\226=j\356k\275g\200\340=o\272\001?:\2445>\213\013,\277v\206\236;\3050\337>p\226n<\255m\225>\334zy=i\016\207>\247\341\342>G\314\300>\317\326\373>\252\226\267>tE\305>d\340\205>d\236;>\202ii>)\235\235>*e#\276\202\302B\275A34>\253R\343=y\272\222\275\221s\220>S\341\224>\226\374U=\323\325$\276\245\311>\277\0005G\277\312\304\'=\221\004C\276\220\0017?93\327\276\027\360J>\350\217\002?d\350\225\277l`\362>\200\023~\276\334\246\342>\277\023\217\276+b\264\276\270\266S\276\315\024\352\277\030\333O?\367\031\\\276.)]\275g@~\275gq\325\275{\360 ?JG\022?\017\360x\275Ce \276\325\206\222\277\310T7>\307\352\333\276s\335\023?\356\246??8T\200\276\355g\361<\263\341d\276\260\025\237\276 1\260>\2417d>U\'\016>\310\351\207\276\363a{>^\006\221\276\324v\357=\201\352\215>\332\254\205\276T\302u\276m*\204\276;\264V\276\217\270\251\276\310e\317;\311tw>\227\3466\276\272\253Q>\350\270P\276\205\364\000\27679\244\276\037\265\333\275m\264\255\276Pc\365\274\313\227\264\276\352\243\001=9\177\205>\267\026\004>0\335\356\275L\355\251\276U\266t\2748E\255>\272\336\335>H\035C<\371\303\023\276\234\277\352>\032\036\214\276\210\361\357\275ex\257>\370ZB\276!\001\241\276\246\000(\276\321\222\303>\250SC>J\236\225\275\211\007\233\276-\211\302=9\310\375>\307\025\265>\222\211\245>\200?\'\276\220s\024>\030\361\217\276v\363\343\275v+\225\276]N\210\274t\037V>\030\205.\276J\250\010?`\217\373:D\200\277>\330s\206\276\272Z\033\276\200\007\265</u\266=\261\377\367=\024I\365\276\264\210\212\276\311\352\211>\304\226D\276\2671\275>u7S\2756\322\216>\361\357*?\0264\036\277nRg>\212I,\276\324\355c>\301\265\t\277\335.\275\275\032\355\005\275\313\270D\276V\316\361<B\313 \275\3167\203>8\207\025?\336\335\355=\004\246\254\276\311\214\230>\220\235\020\276\362}\003\276\377\376\250>>)w>d\266\213\276\t\303y<\206\224\017>`Q\226>`\316U\276#\203\271\274\362us>\253Y\013?`UM\2742)U=\246\001F=\357\277Z\276j\244\n?x\375\346\276\306\260\n>3^\234\276\326H\370\276|r\376>%\023\372>\246\203\254>\375\347\322>:\"C\276\253~?\276\215eL>Q+\264\276\262\224\206\275\030G&>\227\367(>7\336 >\301\272q>\005\242\232>_\334r?\030wk\276\310\203p\276Ep\356\275\221\270>\2765\270\315\276\233,R>\341b\007?\311\223\022\276\016Nf\276e\234\251>\240\333\252>\207\244\236>\336h\275\276\343\r\267\276O\317n>=oe\276\'\347y>\325\202B>\307\344Z>\211\350\317>\266\232\323\276\205\245b>\344\304\365>ye0>\313\265\001=Y3\314\275\365J\306\275\340+\357>\232S\002\276&\242\222;\363\225c>=D\300<dO\024\276\177D\231=)\307\233>\2167\311\276\325|S>8y\330>\274\317\364<u\231q>\336\260\220\275\033\306\275\276\212\253@\276\263\320]>di\277>E\306\327>\275\014B?ua\313\274\301i\342>\260\314\226>\332\024T\276\216\376\376>\010Py>\313\227=\276 uL>\372*\026\276\236\007\035=N\223\254\276\004\000\017>4\222\320\274Bn>>\016\312\n\277\261\262?\276D\216\266>\362\222}==\225K=\305\3747?\000\356\217=\363I\321\275\236\177z?X.\232\2743ci\276\327*\252\276L\3316?\357\375\331=}\177\205\275=O1>\372);>*\244Q\272C\2663\273\201\361\300>\006\0179\275\355N5\275\253\\\203\277\266\'\267>\2300\246>\002\346(\277B%\277>\006\367\374>Y\244\270\276\\fJ\274\\\253\336\275E!\\\2763i\017=\265<\243>\033&Q>\227\320:<\347\225o\274\327\251\265=\313E=>=\366\331<\023#<\277\2619\324\276\322$\262\275A\302\204\276MHh=B\256[?c\334\201>\340.,\276\340SU?dU\213\276\013\300\213\276\rg)>F\277\346=\002\322\234>h\355D\276dd\220>C</\277\303\t\001>\265\377X>$}\242>\245gC>\262\321N=W\000h\276s\230\216\276\372o\204\276U\244\264\275\007Cl\276\355\002\251\276d\216Y\276\335N\033\276\2143\215? \312\210\274\232C?\276\313kX?\2522\223>\\l\303\275\335\301\217?2q\036>\337Y\226?\024=\270\274sZ\000?\250\217,\277WZ\003\276Q\023L?H\363\031>Hb\2719\344\374\273\276]0\307\276\257\241\034=m\355\022>\\\337\232=l\031\177=\355\234\250\276\010\005\357\275\276\207\277?\327\316L\276h\331 \275qI\014?\240\341k>j\257=>\017^)\276\253\261\370<\003\267\347\276\r\202f\276\314\366,\2764\356z\2766\032\351>U%U>\332\031\347:\241\301\025?\370\301\235>zr \276uMC\276?E1\275i5l>;\206\225\276\310{S>y<\321\276\346\322*\277\217\210\373=co\372>x\300\\=\375pc\2769M\017\277\021N(\276\257\256\215\276\220\030\007>\0329p\276\367\210\344> U\260\276\377\306\337\276<\301\020\275\375\302X\276\270:$\276\316Vc>\021Z\031\276\375\262\234=\tD\305\275\377\215\305>\302\261\265\274B\037#\276O\'\363=\257G\324>N\362\001>\177\306I\276\3550\326>\271^\274\276c\244\347\275y\371m\276\2062\342\274\030\272\022<\341w\365<\224\374\204\275X\221\324\276\005\370\010\277\r\265\210\276\220I\241\274\004\370\246\275\n(\177\2760\355\374\274\366\005\314\275ZP\276\276p\234\222>#\026\r\276\343\207\207>\023M\360\276\305\034U>\303;!\276\375\016\340>\316\246~\277\177\345\004\276\006$\277=\277\265\277>`&\215\274\341W\037?\376\267*?\265\030\336\276\200\'\002\276\034\2036\275\304\370\246\276!\364\221>\317\272v?\342=N?\3345\204\274\370\373\035\276\000Z\351=fI\326>\216\037=\276\207[\337\275 \\\235<d_\220?pi\224\275\255\221(\276j\342V\276\261\275\\\277\203\373\024\276\341\022\013>\313g\202>\210\261\337\274\004 \'>\327\223\307=p[\357=\1770\221\276\000eZ=\rIU\276\000\200\265\276\270G\312=\210g >\320\023\211>(\026\250>v#$\276\030\300\233>r\362\221>\272\007\273>\260\316\260\276\025\030\201>&\010\222\276fe\247\276ko\221=\341\373\241\276\326\214\313=\240\251\205\276\255\3246>\225j\201\276\004\310\232\276jg<\276`F\223="
      }
    }
  }
}
node {
  name: "decoder/dense_12/MatMul/ReadVariableOp"
  op: "Identity"
  input: "decoder/dense_12/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/dense_12/MatMul"
  op: "MatMul"
  input: "x"
  input: "decoder/dense_12/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/dense_12/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        tensor_content: "\275\363\034\275+\273/\273\341\341\354\275I\264J?\255\017d\274\301\333G\276\304F\330>\361\265\362<:{\254\273\363fS>7u\244\276KGd\275\247\364\235>\235x\254\276\307\333\256=\320]\026\2756\256n\274c\356\234>2\235\204>\005\357\236\277\005f\001>\211\3612=V\364b\276\246C\221>\310d\202\277;\004d\274\177\207{<\377\226\224\275\324\261b<i\321W\277\265\321\375\276\247\315\245\276"
      }
    }
  }
}
node {
  name: "decoder/dense_12/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/dense_12/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/dense_12/BiasAdd"
  op: "BiasAdd"
  input: "decoder/dense_12/MatMul"
  input: "decoder/dense_12/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/dense_12/Relu"
  op: "Relu"
  input: "decoder/dense_12/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/dense_13/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
        tensor_content: "\352 b\2763hm\276\235\351\020=\272\351\266=sk\255\2761!>>\"\2374\276w\177C>\272\340\336=\272_4>\330\257\257\276\332\013\271\276\010\271*<\270a\372=!C\034=\330\246 >\224\235k\276\344f\214=@cj>\257xH>\222D\227>C\333\326\275\371\332\370\275\r^\217\276\\\373\027\275\035\364\242=\356\354!\276s\374\263>\327\244\274=\216U\252>B\240\210>\334\234e\274x\016\262\274\311 \270>j\367P\276\343\255\310\276\366Y\351\275s}n\276C\235\243>\316i\240>Z*)\274\203\t\200>\234o\306\276NV\\>z\217\343>\332\222\205\276\0278\327>\366\333\021?:\2072>l\376\206>\021\266g>\216\023d\276\234\363\210\274\223\360\r\273F\002\'\276\221\265\001\276#\305\333>\223\376\256\276\240?\313\276\323\3305?\343}<>\233m\246;\305\354\224\276\225\2117\276\313\205\345=\235>c=o\240p>\036)\230\276\350\003\223\275\007\031{=D\r&\276\213\315i\275\373\330\\=\250\367\204=\263\376\211\276L)\000\275\013\362B>\034\326\215>v\302\224\274`\346A\276\305\216\316\276~\275\031?\215\374\006=\023x\343>`\303K\276v\000\206>Ssd?\326?\262?\024\341\311\276\t\275\201>\'\227\233?MHT?\323\020\263?\t\234L\275Rg\214>\024\326\211\276-\375\343\276\206Y\263<\326\3409?\271\r\272\276\207>\3329\340\000\305\275g\206\030\277\261\260\271\276\261\250\275\276\2275\301\275\210;\t?\260fW\276l\331\356= A\031\2768\260\322\276\217\357>\272\246\240\356>\2546\010\276\016\253\370>Xn\337=\2624$?\376\\\331\275\2713\034\275\026+\342>\337\332\306>( q\272\376\324q>\302\210\225>\313\257\000\275\354\026\361\275\236\016\005\276\3402\261=\236\036O>i\232\336=\211yN=q\372\211\276\306\014\250\275\264q\n<9-^\276\252\365\211\276s\000\215\275H\337\202>\333D\351\274\302\214z>\014\214\204\275i\307\212>\034\232R\276\302*H\275\225\024[\276\'6\">a/\035\276\014\036\222>\204\355/>Q\0237?\235\220\034>\373%\253>\350e\273\276\230\233\\>\345o\311\274b\361\326>\253\375\272>\351\345\225>\216M\312=\035\021\037>\267\305\025?\237qu=A%n\276\351vv\275\205\222\037?\340\274H>\207$V>\002L\347>t\312\n\277\341Z\205\275&?\267=\265\305\211>zK\261\275\0357\267\276:\363\351\276\226\317\320>E\010\277>\226\201\334<{o\266>\224\257(=\030~\215>\025T\232>\247Q\030>.u\274\275\310&\317>\217^\256\276h\347h>>\371^\276 \210\210\276c\216\202\276\204\000\266=M)M\276\340\300\237\276\321\306_?\370\351\004?Q4\222>\214\252S\276s\335P\274}9\027>\251\262\204\2764\"Q?._\327=\"\003\203\277\035~\331=\031H\343>\217\375\316=t5i?_<\215>\323\010+?]\033\020\277\366\3273?\312\2208>cT\036\276\037\312\023<\260#0?W\r\377>\347\347\352>\203\007\245\276\350 \\?\330\034\221\275F\215\210?\007\264\257=\010\251\230\276U`\021?\317\200U>Sc\342\275U\204.=\'\262\021?^vu?\274\234\221\276]\345\367\276\272>!?\346VW\276\214<\260\275\253\360\020?\355\364?\276\315\022\365>_\205\n\276\321K\206\276\313XK>M\024\324<\326`5\276\237\226\204>\205\003\013\276\206\\\\>\362|\346\274\316H\r\276u\331p\276\212+\335=\232\362\244>(\345\333\275\0350~\276q\222u>\304!\211\276\217\013\205=\263)\025>\377\224C>h\r\274>\013\037\014>\304d\003\276{\020\206\276%\364\312\276V\207\354>q\310{?\272\0206\277G\302B<*`g\277\372\005\\\277=\000 ?\025\\\210>9\212\311>\320})\277\017\340\367>\300\237\246\276\205\334\255?\350l\330>y \336\276\007\346\222\276\252h\214?O\344r?;0|>l\373\031\275\212\206\n?\027\213\357>\257\356\030?\234\242\251\276\344\035\267\275\266\001\224>5\016~>\320\326\005\276\273Nu>#\355j>@\362\216\276\305g\334>|\355\020\27612\356=\270\217\002?\213\376\305\276\022\337\325>W\037\361>\3645\037\276\245\213\232\275\025!\215>q\240\351<\226E\230?\260\266Q\276\246\246\020@\375\314D?\031@\363\273L\216\203\276a\330\247=\231\365Y\275]\272\021>\2341\366=\332\340y?\334\234\221>\270\370)>\337\206\t;\363\021b\275+\304\347>\325\nv>V\337+<\261\327H\276\341]_\276U\357\302\276\005\205D\275m\201_=-\222`>\316\023\314>\232O\303<\233%+\276\200x\303>?\312\202\275m4\371\275\315\"y\276#(\006>A\231\017\277[\374\004?\017\363\256=\336q\315\274\263q\362>\346\032\345\276\2609^?<\265\223\275\300\306\232>i\234\206>\342T\006>\252|.>\221\373F>\314 v\276,G\303\276\014\377\211:\"\020\356\276!QB>\263\351\037?\363\n,\276n\000\232\276\277\003?\276\245\301\331\276J\023\237\276\316\375\016\277,\372/\2761\253Q>\251\3605\277g/-\277\3249F\276\270E\375=\355\000\201>]-\363=\360\025\226>\2251\255>Y\200\346=\010\277%\277U\314c?_\222\014?\2714!?\026\302h>\366E,>\033\025F>g\320\357>\343\273\221\276\272\215\247\276Y\354S>\350\3722\277\305\362\251>\t\371\037>\207H\321>\t;\206>\207d\326\274C\007\313?\3615\023?\222\226\024?\0163\204\276[\374`>\235<\204\276\266Kb>#JM>;\030s>\335\2761?\r\351\364\275\311\2415>L\336[\275s\341\251>t<\317\275[\307\351\275\313\207\376;\203N\233\276\203&\221=\037\n3;\307\345\211\276$I7=G@{\275x}\254=\247\334\202\276\234)\r\276\251\342\027\276[\tO<\342\331\325\274\223\361\260=\205\241\262>\317\360\233>\264\373\272=\270\036\200;\000%\312\275\240\236\247>\216\311\002\276J\234\227\276ry\227\276\312\276\360\273K\320\247>\300\"\347=\014\026T>ni\360\275!\246\033\275\315\211\320>\000\006\252>\230\265V>\253\353\207\275N?\332>\355\2539\275\236\215\360\275X\\\001=v\357\020>z]\274>o\022W\276\377H\224:\004P\035\276\275c\247>\315i>\276\204M5>\345u\007<\010\316[<\350C\177=\220\000\236>k\031\352=\201+k\276d`t>\202V\370\275\004\253:>\273\272>\275W\273K>O\360\352=J\217\221>47\203\276s5\270\276\327\253Q\276W\334}\275\177\227\213\276\230\005\'?\322\026\t=\262rO?zz\206\277\361o\026>f\016\243>T$O?\206\264\211?\002\274\236?\300\225n9\251\340\204\276c\234\210?\014\233{\275B+t>\013J\326>\233\357I>\023\274\207\275\314\232\330=U\303\202>W\250\326>q\345\256>\375Y:=-)&=\252\320\001\276\326\323k>\305\256\231>\213$\217>\367\266\215>\220\330q>\226+\256;\207yr>\031@\270\275O\232\007>\tt\264\2733i[\275=\205\177>:\227@?7\370\253\276=\344\267\275\375G\014\276\273\230\363>x`\310\274S\221\t\276L\315\213>"
      }
    }
  }
}
node {
  name: "decoder/dense_13/MatMul/ReadVariableOp"
  op: "Identity"
  input: "decoder/dense_13/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/dense_13/MatMul"
  op: "MatMul"
  input: "decoder/dense_12/Relu"
  input: "decoder/dense_13/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/dense_13/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        tensor_content: "\234k\023\276\213\004\314\274\223\367\005?X\354\305\276\0142\251\273\360\335\032=\223u6\276\003l8;\005\235\204\275\303\337\t\275\227\264\215>\246qu?\205\022s>\364\227v<k\006}\276\230:\024\277"
      }
    }
  }
}
node {
  name: "decoder/dense_13/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/dense_13/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/dense_13/BiasAdd"
  op: "BiasAdd"
  input: "decoder/dense_13/MatMul"
  input: "decoder/dense_13/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/dense_13/Relu"
  op: "Relu"
  input: "decoder/dense_13/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/dense_14/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 64
          }
        }
        tensor_content: "\341\020+\275\270\303;\275\037Y2=\342\222\350\275e\211\177=\323\244^\276\304\001\031>\2118+?\224\177\240\274\361\370\346\274=9\035>#\247\373\276\377R]\276\006\361\224>\010\2042\273P\"C=\320\312\346\275\275\225\027\276\001\204\247\271\003Nm<\275\355\237>\264\265\t>\r\022u=\261\r,\276y\217\306\275zjY>%\233\205>\216\000&\276{\303\207>l\222\255=d~?>=\017\014\277\344s\304\275\243H/\276K\310\207\276]\007k\276\341\177\236\275\224dC;\263b\006?Jf\r>\301u\024>\274\337\276>!\002\340=\017\317\215>\034,h<\002\326B>\007\220\037?*O\003\277\362\274V\276\247~V>\000\243\315:\352\236\232\276\003=@=7\320\350>\033v\024>\330a\300\275\005\347\325\275\352)\320\275\331QH>\353\310\001\277\344%P>\260=*>\376\334\212>\330\241>\276\231\226\034>\262\317\023\276\007\334\215=\257f\211>\314=\036=7\342\377=?{\264\276\014\271K\276\033\243h\276F\317\200>BOP>\207\357\336\275\366\235\021=\275\372*\276v\350\200\276zr\031\276j\036=?\234\247/?\2437\237<c\272\211=\341y\014>\252\002\234=\356\3010>4F=\275\211/g=eP\232>)\250\226\275\310\234\211\276\227`\327\275s=\033>\036B\277\274\314\325\235\274B,*>\026\330\\\276\244\032\206\274]\031\247>\326\004\235\274\017\240\000?\002\007(\275\315!\361\275qwq>\372\326\023\276l\240\201=\245\201b>\203\025\331>!\303\026\275x\323\246\2754\037\371=\223\305\356=\317\346\n<\\\301/>\255\354\277=\0046\224\276+\370\237\276\242\304\230=3hH\276\030\212\343=N\204\327>$(s\276\006\321\200>\354\213\032>\300\276\332=\270a\231=+va\276\306/\262=\370Cy\276\2366\213\276\017\004\205\276\302;=\276x\347\250>K{\344\275\245\325\210=\216a\315=\252\324H>y\270\301>+\350\001>I\312\255\275\316NR>\261\277M<o\3160>\347#i>\301C\220\275\356\277T=h\3040>\321\376\377\274\366n\272=\241\031\020\276e\372\211\275\326\214\274<y$\204\276\263o\217\276\021\374\345=\277\026\270>\305\343\213\276\007\354\r\275\270OY\276\022\322\010\274\240\035V=\231\310w\276\3615\014>J\3212>\006L\373\274C\273U\276\277\002\354>\232}p>v1M=RCJ\276\005\245&\276M\004\320=k\006\361>/\246\207>\331\233g\276(\371!=\356E\310=1\305p\276^\032\252>\026\003\216>\016}P?\331\203\270>\311*\207\276\022O\201\276\220_\204>\251\034\304\274\214\027\007\2774\347\"\276_\271\\\276|\221\203\275\260\236\376\275\003h\265>6\200(>l,R>\300\326H>\245Do?wAM\275\23381=\351\000\200\276?\356/\276& |\275\335\212\203\276\010-\353=7&\366\276\316\014\264\275MC\223?\357\226\301>\265\210\037>\202S,?\2577*\277\303\325\317>\240T\202\277\331.?\277\003D\022?\222\275O>\320\373\223\276Z\007p>x\362Z\274\\y0\277E\0303?\224\027\017\275\215m;\275\323\232\202\275QE\005\277V\312\231\276!^B\276\2757l\276\356A\320\275,\352\224>jp\246\277$b:\275\255\000\257\277\016\006N?7\301\215\276\356\026/?\035N\377\276\202P\342=\021T\220\276-\353w?\017\014\346>@?\023\277\346\0301\276\315\270k?}sY? f\036\275\017\002\313>\204\310\t>O\\%>P*\262\276\274V\203\275zX=\277\370\367~>\304\261q>9|r\276`0w\276\372Tr\275u\244\003>I\272o\276\232f\207>\220\342\206\275\213\n\213\2758\257\335>\037\320\271>ng\307>\217;\326\276a\231\226\276\317\374`\275\354W\236>\312\271[>\352A\214<^\376\n\277z\224\344\276Z\243\007\277\013\004\233>\250\235#\276\211a\251\275\312\212\365\275)u\212\276@\204\355=!\005\332\275$\244\265>\332\017|\275\014\346\316\275\020e\303>E\232\353>0\265\205>\321\3634>\033\335f>\020\277f\276-w\375<\310Z\315=L\352\246==q\243>\331/\377\275F\257p=,\201\240\275 \215\255\276\005\000\272\276\364\235`\276+v\217=\266X\363\2760\247\204\275kuM?\007\320\222\276\276\330\312\276\310F2\276!\216i>n\014\007\276o\321\n<\277\007\324\276\304W\206\276\361\030*\276\275\271\247\276C\357\211\274\004\'\206>\320\223\271=HTi>\212\363\331\275\200.\276<\203\031K>|bE\274\354@)=$*[\276S\211\310>\204\233\260\276X\360\034\276\244J\220\276\312\372\205\276k>)>?\301\001>\347\255\304\275\306\212\006>\\\215\311>)\362\206>O\005Z>\215`+\275\357\303\274>\025y\265\276F+\245=\021i<?\361\377\240>\t\352,=\266ie\275C\232\354\275eV\023\276\343\310@\276YR\315\275\"\215\363=\022\3776?*\327\200\276\340\253\370=c\366,=\366\323.<\217u\371\275g\3614>\247\367W\276\006&\241\275Eg1\276A\216\306\275\347\236\335>kk\233\274+!\023\277\275\313\210>\0338\233>\243\\\205?XC\235\272x\205\330\276\300\377\201=\246\243\364=t\311\001> ao=T {\275\203\033\034>\343\327\376=80\221=\007>\030>!&\310>`B\006\276\243\274\323>\334\335\002\275\242uD\276$\303_>\026\3601>\215\364\271=\357\331\016>\264\024\203\276\005\253e\276[\325Z?-\\\306=\36068?$\266\317=SI\307>\0037\261>\321\016\262\275?z\266\275\337!\027<\246\270\246>\262\370I>\306\274\013?\300\353\022>%L\255<\244\261\036=\373\374\260=v\236\303<\'\323\035?\266\016Y\276+\013\r\276q#4>g?\241>\306\321\010\275\235\356\213>\225\223y\276\267\363\234\2757\322\344\275T\317\330=\265\347\247>\325\360>=X\253\351=\3363\212>\367\0078\276\021\363\257>\253\005\376>\225\351l>\037\241\256>H\026\030>\260\337\205?\002\313@=\320uB\277\300l\320\2763\324U\276\301Tj?>\372\340\276\271\017y\276\034\250\207>\t5~\2749\256\327\276\325V\265>\364\022\267= \002q\276o&\306=fQ\366=\255\302]=M\344\315>r8x\276\016+%\276\2203F>ie_\276\254\257\352=\364n\013>\032\216[\276\366\245\212\2751\263\277\275\225%\356\2733c\030=\332q\017=j\341\303=\0017\221\275\213\032\345=\214\220\266>\261\244\007\276c\365\365=\225\223\300>Zt\037<\376\265\232=\306\277>\276\246 \017=S\336\246>\351n\322=\017d&>7t\301>\216\004\232\276\n\252#\276\366M\365<\225\3218=yF\362<N\273\221>\001k\220<\366\004\034>\036\251\020=\302\030\237\276\002\013\261=\253\2561\275g\215\337\274d\272\365\275\374\361\224>\241\t\273>\352\244\273>\375\277\253\276\230x\017?6\231\270\275Q{B>t\205\324\276\307,J\2764\371\315>D\242\234\275F\366#= \215M>\211\354\014\276y\275\223\276\262S\337=\340\365\032?\2158)>\247&\037\276s\020\376\275\307\272l>CO\007\276\213\217\025\277hn^\275D\336\244=\244\004\330\275p\314\010>\233l\207>-\373#>\363-\264=\\\307\344\275\t\272\252>b\262*>\253S1>_\325\215>r(_>\016A\215\276\372_\\\276\245\nd>\014\216*?R\013r>\262\355\340\276\212\032$\277J\240\034=\332\t\253>\337\261P\276\324\222\021\276\022S\023\277\005\304\230=(\204\">\363WJ\275\312%\332<\033\260i\275\n~Y\276\215\207\022>\237\335c\275J\263\337>\227\223\235=\243\000\373>\261\274\240\275\255(\204\276\320,\037>\013s\324=\372\037\313\274\357\212\337\276O\002B\274\030\201\357;\n$u>\022\n\203\276B\254/?\373\212!\2774\0279?y\005B?\375$\372\275;\265$\276\351\002\247>\234\365\022?,\0140\276\264\261S\274\270\315\370\275\244\026`\276z\025\341<a1\021\276\211\300\356<\036\2761?xGS=n\266\206?\204}\004\276\223@\007\276\242G\210\275h\321\377\274_\021P\276\300d\r>\031\'\266\275\253\025_=\236\016M\275\261\230\214>\311&\210\275\023M3>\346\262a=l\006\205\276G\212\205>W\034\372\2756\231f\274\306\246\226=\311\303O>\"7i\276\220\264\351\275\035\'\232\273]\250\r\276\377\3063\275\220fj>8\335e;@\321\005>\255\265_\276\204\332%\276J\271\373\275I\267N;\267RR\275\375\255\221=D\217 \276@\020_>\213s\256\273\223\2352>\204\246\240\275V\217\376=c\020\202>P=D>v\036\316=\"k\313\275\362u\215=\371\221g>0\250\270\275\3612\030\276C\023\004\276\265Au\276\205\334\305=\206X\027>!R(\276\327t$\276\366j\033=\350\217>\276\231\035\376\275o[d\276x\006\202>\363\216*>\212o\267\275\240\322I=\325\311b\276\331\264\213>!zd\276^mL\276\364\207i\276@\353O\276\302p;>\257\231\321\276]ep=\244/ >\244\213\222\275\202\341!\277:P-\275\304\005\255=\033\217\315>`$\034>P1n>7\306\253=X\263`>zd\223>\274\026}>A\024\r?\367\320\000?@%-\276{\206\212=\273\002P>\263\252\027\277\033q\233>\257\000S>\365_\026>\t\3052\275\224\253\034\276\223\031\300\276\272\246\261\275\031]\205>\373\230!\274\013\3569>\202\033;\276d+\364>\251\357d=\224\376x\2765\001a\276\240\232D>g{p\276D\335\206>gC\227=\264P\337\275\266`\345>i\375\236=\010\006\034?~\033 \276)\340\312\276b\031u>\200\205^\275\364\265\257\276\037\010\376=\006\026\313\276h\021\304=\177\205t\275\220\334\230\276a\265\253\276\230|\303>\032W3\276\217\363\026\276\364\017\272>\235\311!\276\224F\010\277\276\375\242\275p\203\371< \322r\275\302^6>\221r\370>S\312\212>L\316\260=J\227?\276\035\243\336=\211H&\275\375\306\303\275{\355\232\276b\207\'\275\312\263\005>\235\235\210>8\3209\275\024\202\271>Flh>dD >\352|\315>w|5\277C\322\242>[>\013\276\342\261l\277\356\312\253>\037V\253>\330bN\276|\254\n\274.\330\211\276\245\335\033>F\272C>g!\302>\204$\034\276\020\rw\276\177\237\256>\224I\205\275sA\255>\244\314J>K\335\254\275\370\020\217>U\017\213\276\363J~\276`v\375<\321\365\377<4\251i=\276T\276\275<D\256<\276\313\001\276\246\314\025?\332\362;\277\237M\203\275E\'\212\275p\033\252>\200\270\026?\274Ju\276K\351\031\276R\371.\276\337+B>!w\271=\246\325C\276\\\350=\275\257\257\233\275\330\333L>\301[\r\277\266U\001\276\250\324\363=\"Z;\276\030pa\275\362\271\014\275\253\263\024\276\323un\274~\0266\2761\026\323\276\022\330\217=\325d\244\276\036o\232=J?\262\2757;`\276\260\302\220\2764\r\222>\253\345\301>f=\243\276\375p\001?\001\335T\276\227\326\271=s7\251\275\225\305\014>d\260O>\233C\314>\270\317e=\270P\221\276\306\314S>-j\027\274S6\247>\311\ni\275l\241\340<\005\237\000\276\376\245\346>\031\327\307<\217\200$?\326\"\003>\346E0\276#{\257=\312\363\330\275S\315\230\276\312Y\237\276\035\362\274>t\301\367>\222\3448\276\336\264\231>m\217\224>Sc\201>2\247h\277\215\032-\277\234\240t=\224\034\241\2761\211e\276b\243\023?j}\272\275\236\014D\276 \255\351<8\350+?\266\003!=4\314m>\317\216\205=\002\336H>\371\363\240\276`\345\265>\364\007]\276\242\236R\276\002\243+>\320\327\352<\345\315a\276\236>~\276\373\360\343=\021\343\351\274t5\346:&\350\203>\202\256Q>ym!>\241\257\256\275W\215p\276\213\001;\276\261\000C>\255\235\243=\306D\215<\320?\232\275w\313Z\276\373\020Y>\357}\320\275v*\036\276\217?>>\307\315b=t\220-\275\365\217\t>\372B\351=O\356K>\201\304\275=Q\024(>\320\336\025\276y\277=>\016\330\275=0\034:=\214\374\211>\224\315e>\342\364\314==$,\276\014\212\376=\333\240\201<\000\236A\276\006E\031\276y\260\006=\327\327k>8\021o>G\275\026>q,\260\275x\007\347\272\">}\276U\316\334=4\272\214\275\020\375\250\275K\260\212=`7$\2740\334]>?\347\200=\'?\367\275K/K\276\200 0\274\245^\375\274\000\306\306\275\302\367\222>\n\315\235\275L`\213=<\236i\275`-\037>0\311\003=\303\277=?\030\240\033\2774\2722\276\010Pt=w\354\027\277\033Y\306\275\375\307\010?l\321\317>X\302\204>\253\032T>\302t\034\277\356\017\323\275.w3?\226\305M>\227\017\313\276\207U\251\276\304\331.>\272J\264=\352\235\277\277I\217?\276\321\376\302>\372A\014\276z\252K\277\013\313\274=c\002t\276\277\262\352>\032U\353<\312d\244\276\332\315\352<\300\220\013=\245B\234\275\275j\254>\375t]\275\260\235.>\2723S>\220}\234\275W\355\307\275U\n\306\276\271\306\263>\246t\t?\262\326D?P\347\017\277\314?\024?R\'\033\276\321\256\271?\0044\026=7\374\316\276\022J6>\264\374\206\276R\253\375=\344\344g>\214\252\201>\036\343\207=\337G\021\277\207UA\277\366&E\276M\317\304\275\035m\240>\364\0054<_M\203>\350\025\036\276\340\237\177\276R3\336\275<;8\275\327\370\355\2756\340\260>\314\031%>\362\314\002\275K\344\202>\364v\337\275\364\037C>\260$+\275_\347\034\276\032\253\345>\006\277x\276Gq\345\276\332\001\332\276\326\016\243>\221M\323\276f\325\007>sC\234>\232\032\204=\322\321\264>\377\374\236>z\363\005>`\200\312=\374\2033\276\252v\000=G8\205=k\340\037?{V\351=\235\323\023\277aY\241\275HvZ</\262\314\275\026z \277\307;+?2\352{\2766\327_\274\376}\243>\230\031;\276\216\355\364\275\230\242&>\270Q\356=\304\230\243\275\354\222\001\277\225<\313>\031\204a?\215\236^?\031\225C?\230\367\356;)\240\\>\251v\026\276)q\220?DvY\276o\004\201<\242\t\305=\231\313\231\276\370?\301\275\200^\341<\323eJ=z\035R>|D\346\275\364z\r\276\252\363\213>\304\277\213>\272\213^>\370z\305\275"
      }
    }
  }
}
node {
  name: "decoder/dense_14/MatMul/ReadVariableOp"
  op: "Identity"
  input: "decoder/dense_14/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/dense_14/MatMul"
  op: "MatMul"
  input: "decoder/dense_13/Relu"
  input: "decoder/dense_14/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/dense_14/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        tensor_content: "0\3753>z\325\211>\273\340\343\273\350\213\345;k$\207\276\230\006]=\017\360R<\375\206\013\277\007\t\274\275_\200o<\240Z\202>\004-\331=\320\247\321>\235\303#\277\371-X=@\360W?\252AU\277>\215\235>\317\376\020\277\305x\261\277\3264\'?`B\204?\2269\004\277\3660\027\275\247\204\240\274\n\275\220\277\3706\236\272=m\245?\3461\222>\010\352\316\276\342\030\224?\305\302,?n\177\374<DBZ\275e\'C\273\001s\263>\323\2234\275E&\315\276>\367@>M\320\323>\231xQ@\271i\223\277bS\025\277}\345\246\277x\374\n?A\362\214\277\253\377r?wAS\275\273\222\325\276\353\236\263\276\000\000\000\000z\304\205?7\353\342\276@\333\323>\371\371\017\277\000\000\000\000\302\325R<5\253\270\276\343E.=}L\201\277\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/dense_14/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/dense_14/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/dense_14/BiasAdd"
  op: "BiasAdd"
  input: "decoder/dense_14/MatMul"
  input: "decoder/dense_14/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/dense_14/Relu"
  op: "Relu"
  input: "decoder/dense_14/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/reshape_6/Shape"
  op: "Shape"
  input: "decoder/dense_14/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/reshape_6/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/reshape_6/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/reshape_6/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/reshape_6/strided_slice"
  op: "StridedSlice"
  input: "decoder/reshape_6/Shape"
  input: "decoder/reshape_6/strided_slice/stack"
  input: "decoder/reshape_6/strided_slice/stack_1"
  input: "decoder/reshape_6/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/reshape_6/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/reshape_6/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/reshape_6/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/reshape_6/Reshape/shape"
  op: "Pack"
  input: "decoder/reshape_6/strided_slice"
  input: "decoder/reshape_6/Reshape/shape/1"
  input: "decoder/reshape_6/Reshape/shape/2"
  input: "decoder/reshape_6/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/reshape_6/Reshape"
  op: "Reshape"
  input: "decoder/dense_14/Relu"
  input: "decoder/reshape_6/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_transpose_12/Shape"
  op: "Shape"
  input: "decoder/reshape_6/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_transpose_12/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_12/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_12/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_12/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2d_transpose_12/Shape"
  input: "decoder/conv2d_transpose_12/strided_slice/stack"
  input: "decoder/conv2d_transpose_12/strided_slice/stack_1"
  input: "decoder/conv2d_transpose_12/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2d_transpose_12/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_12/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_12/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_12/stack"
  op: "Pack"
  input: "decoder/conv2d_transpose_12/strided_slice"
  input: "decoder/conv2d_transpose_12/stack/1"
  input: "decoder/conv2d_transpose_12/stack/2"
  input: "decoder/conv2d_transpose_12/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2d_transpose_12/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
        }
        tensor_content: "\361\320\277\276Z&\262>\021\267\215>\222\277]>\23170\277\322\014&?\243\214b>\372\305\200\277zS\313>\262\233\000\275\357\345\210>@\215\272\2769\\\316>\366\013\273\276Z\243\224>\334\017z>\333G#\276\224d5\276\tCG\277G\245\323\276(\346\255>\244\214\242\276\036!\222\274[\352\332\276.\2166>\321\367\247\275\"\350m=/\307/\2764{\274>\274\374m\276\016\310\266>\nz\211>\264\033_\273\344\364\255=\014\260$<T*\000>\004\342H\276\323*{>\363\255 ?{\234G\277ZW==]\345\224=|\205\211>\247j\002\274\217!\367\275\227\023\240=\304{N\276fWA>r@\017?\325R\375\276Z\335\266>=\377\252>x\000U>\254\365\201=\262/K\276\242\333\324\276\363\3019>\242P\034\277\372\235#>DF\305=\034\330\211>\330\020\306\276\2540\223>\261O\031>\306\2736\277I\0322?\252\020\300\277\377E\237\277\205\334\024?\211\030-\276\360\035\200\275EW\220\275\240n\332\2762\016\205=\365tP\276\316\355s\276\004\257\365\274q\365p\276M\256\001?c\371\337\276q\360\014>Y\366\372=\340\317\337=lR\253>cK\201>\035\177i\276\336\336\001?\206\345\210=z\360\205>i\021\337>Y\n]>#\232\216\276\014\264\231\276m\266\300>\211:\213\276\370ZO\275\250O\272\274\314\313=\277\225\202\245>\2304\020>\376\242R\277NLr\277\032\263P\277ey\344=\'j`\276\240\303]\277\262~8\276\341\344\342>{\\\274>!\233\037\277G\326\224>\366\000\217>\330 \370=\273\3572?\206\262\273\275\337\177\235\276PoO=\256W\367><li\277\t\252#?\342\211,?\254\030r\277\272\216\207\276\320\341\004?\031\374C\276~ed\275\351h\016\276@\274\304=_\3317\276\335\364\225>\230\237X>\026fP\276]\223Q=\264\303^?\222\035\276\277\305*\225\277\340Ao>\362\235?\275\210)\356>\207 \244>\260\370\222\276\005$\327=\215\253\320\276\265\342\340="
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_12/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_transpose_12/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose_12/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2d_transpose_12/stack"
  input: "decoder/conv2d_transpose_12/conv2d_transpose/ReadVariableOp"
  input: "decoder/reshape_6/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2d_transpose_12/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "a\\k>\010\262^\276c\330\263>:\337\257>"
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_12/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_transpose_12/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose_12/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2d_transpose_12/conv2d_transpose"
  input: "decoder/conv2d_transpose_12/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/conv2d_transpose_12/Relu"
  op: "Relu"
  input: "decoder/conv2d_transpose_12/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose_13/Shape"
  op: "Shape"
  input: "decoder/conv2d_transpose_12/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_transpose_13/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_13/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_13/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_13/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2d_transpose_13/Shape"
  input: "decoder/conv2d_transpose_13/strided_slice/stack"
  input: "decoder/conv2d_transpose_13/strided_slice/stack_1"
  input: "decoder/conv2d_transpose_13/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2d_transpose_13/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_13/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_13/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_13/stack"
  op: "Pack"
  input: "decoder/conv2d_transpose_13/strided_slice"
  input: "decoder/conv2d_transpose_13/stack/1"
  input: "decoder/conv2d_transpose_13/stack/2"
  input: "decoder/conv2d_transpose_13/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2d_transpose_13/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
        tensor_content: "\031\363\305>3\261\346>\307\214\201\276\213\222P\277D\002\017\275\316)V>\375\263\337\276\300|\014\277\027)\224\2762xQ\277\006\253=\277\313q\360\275\014\'\026?\344\262\261\276\316: \277\267/\024\277X\2626?\037G\303\276\237\002\036\277\004\377\"\277{\231\003>\357\246\254>\021*\236\276\221\223\223\276\336_u>a0$\277\316\027\013\277\202\004;\275l\261_\276\343%\241=/\355e\276\361\374\"\277\222qb\276w\021E>\365\272\267=\037o\205\276"
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_13/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_transpose_13/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose_13/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2d_transpose_13/stack"
  input: "decoder/conv2d_transpose_13/conv2d_transpose/ReadVariableOp"
  input: "decoder/conv2d_transpose_12/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2d_transpose_13/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.03928005322813988
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_13/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_transpose_13/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose_13/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2d_transpose_13/conv2d_transpose"
  input: "decoder/conv2d_transpose_13/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/decoder_output/Sigmoid"
  op: "Sigmoid"
  input: "decoder/conv2d_transpose_13/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "NoOp"
  op: "NoOp"
  input: "^decoder/conv2d_transpose_12/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2d_transpose_12/conv2d_transpose/ReadVariableOp"
  input: "^decoder/conv2d_transpose_13/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2d_transpose_13/conv2d_transpose/ReadVariableOp"
  input: "^decoder/dense_12/BiasAdd/ReadVariableOp"
  input: "^decoder/dense_12/MatMul/ReadVariableOp"
  input: "^decoder/dense_13/BiasAdd/ReadVariableOp"
  input: "^decoder/dense_13/MatMul/ReadVariableOp"
  input: "^decoder/dense_14/BiasAdd/ReadVariableOp"
  input: "^decoder/dense_14/MatMul/ReadVariableOp"
  attr {
    key: "_acd_function_control_output"
    value {
      b: true
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "decoder/decoder_output/Sigmoid"
  input: "^NoOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 1087
}
