node {
  name: "x"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 8
        }
        dim {
          size: 8
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "encoder/conv2d/Conv2D/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 1
          }
          dim {
            size: 16
          }
        }
        tensor_content: "X\014\010>E>\311\273\226\334x\277Do\365\276h\025\354=\310\233\245=\353a0\275\362g\217=L\307\245\272\261\371!?\232\032\214=\316E1\2768S\206\274\227\275\205>\t\027\036?\211\356Y\300<\n\002\276\030\2346\276\355z~\277\206\\\247\276\304a\037\275\236x\215=\003hJ=\340\220\025?\004\357K<\317\251\231?\216\034\263>I\256f>`\375\037>\274\221\227>\374\214\252>\r\223\310\276\346\255.<\254b\206\276\004\356<\277\224\224Q\274\0331\243=\314\001-<\033\225\034?\034\205\316=\334\213\243\2745\352s?\t\337-?\265\323\212\273\312\004\t>\303\363]>p$L\275S\254\204\276\316^d>\331\341\035\277u[.\277d|\342>K\202\006<,\210\003=\2164D?\2639V=\3345\n\274Zy\032?\207\275\361=\016\220\306\275\350\266\363=\023\222\322\276\270\010]\276\244B\370=\247\366\256\274T\030\225=w\033\036\277\370\224\353=<\205\366=\207\334d=\255\224\224>\035\'\374\275G\352\n\273E\333\273>\356\301\003>~\376\213\275P@\t>\207\325\220\276\255C6\276\t\177\242<\177\254D>m\027L\276_\355K\277I\263\027\277\202\366>?yX\224>f\'\\=v\232N>x\344\266=\t\236\371\274\033\373\003\275Y\333\250;\200\322\026\274\033\325+>\327/t?2J\272\300\220\331\324<\274\010R\276\242\"M\277\262\330\200\2762\004\261>\014\333R?\231\200\246>\010lG?\216!\010>F\274\335=\250\315\036>\\|9?\336\213\205>Yh\013\277\340\226\035?\274\234\004\277\256\264B>\205`\003\2770\t4\277f\237:>\210\321\017?F\206\014?\0332\222?\017\366\216>\304\241P=4g\027>\002\311\300>K\300\242=\271\367x>\006\3641\277\320\036\377=?\224\250\275\033CJ?\347<\'\277\327I5\277\374\013e?m\035o=C\315{?\361\037\202?\313\241`>\343\252\026\275~\241\341;\237\"\212>\354\371\010\276d\271\211>\340&\216\277\231\365\261\276\262x\010?\266JO?\263b\357\276\214*q\276\351\334\000>\'\236\323>xe\023>\251\344\366>\355\346d=.I\326\2744\021\227;\263]\213>\226:\347\274 \3048?\207u\223\277\236N\247\275^\203m=7\324\217=\305\r\177\274\260\352\345\276\005u\033\275\033\026\216?\211\205\367=}\013\252\272I\013\353\275\232Q\235>\256\307\314=x\007\260\276\376x\267>^c[\273\272\203K\276\001\376:>\200\200\224\300+D\024\276\3245\344\274\231D3>\215\245\024>|\377\010?/\330\310>S<\262=\006a\003=\252P\346>\364\360\246<)lN>\\\020\230?}\345@>\201\2276\277O\315G>\220/\037\277\203\302=>w\344v>3\307\340\275\254f!>\274\027o?4\377\206>)\210\353=\230\256\236\275\303\352b=2\003!>I\232\025?\215\0051>\030\341\327>oD\206\277\302\"\032:\327\332\257\274\337e~?\002\327\\>\"\263+<o1\275>\025\020+>\000^\250>\216\313\334=UE\034;\377)?\276\203\326\250\273|\212`?B\245t\276\326\317{>Nw\177\277\tT\346\275\300\371\013?\224\236}?\236\333\320=\363*+\276\343|\361\273>\257\373>\242?]=\"\245\336\275\241\023\247\275\032g\301\275\3537\037>\376\200\032?[{\017\276%c%?\013\035\241\277\270<\230\275zc\n>\032\021\025>\320o\001>\n\002\241=\\\237\261>:\001,?\227\027^>N\267\232\275M\017\222\276\304\275f?gtI=\233=\260\276\025n\357=HM)\274\250,\300\276\207+\\\275\020f\256\300\265\231\363<=\272\302>\301\372\304>\277*X?:\232z>\375\030X?\250\037F\276i\026\324\276\274\307\233?\275\241v>^\272\262=\222f\347>[\321\327>\227\"K\277\234\271\376=^J\026\277\220-)>\'\252\214?\367\316u>\"\376\326>\355]\375>\240^\035?\216\301\025\277i\207\230\276\375\352!>\022t(>\220\253$>\236\342\275=\3216\037?\322@\241\277-17\274\2431\231\275*\0358?V\034g?\226c.>\270\357\363>\326i\216=\202\212o?k)&\2773\014M\276)Oe=\"\340\253=\223\310\312>\371\367\234\276\\\301\014?\234\316D\277\036\200\275\273\001|\321>l\245\"?\240\024\034?\257\315F>\351\232\223\274]\021\216>\234\344\323>\035\036\237\276\205!\257\275\326\215O\276\306kR;|$\251>f\201\216\275\314Fa?\023\207\224\277\375\340\035;Yj\357=>\263Y=\367\261\227=F@\024\276ja<>M\242o?\373C_=\352\363\032\275\333\350#\276\330\304\222>\264\233\357\274\335\212Q\276\020\214\341\275\321G\300=\253*J\277\r\227\370\275(\035I\300xb\325=\006<\365=-\220-=x\205\305>\t\332\203>[P\267>5\214\203\274\261 \222\275\224/}>\023\341n<\327\027\233\276\tt\016>\305\303Y?x\206\207\277\277H\2009\341\347}\276\035\376\365=Q\232\223>w\313\273<CL\311=\350\322i?B=\214>\254\201\010\276\361\370\363\275\007\203\337<\343\020\006\275\247R\204\276\021TU;[\ri?\312V\344\277=1v\274C\375,\276\270\244/?\327B\203>\024c\014=7_\203>\352u$>Z5\337>=\376\035\276\371\251\301\274\377\037\242\275*\340H\275r2\002?\0271%\276\370\360o?^\254\240\277t\321\232\273\026\263K=\357\006&?}\332\231=F\207\026=\340\226k=-z\313>\262<\211>\320o4\276{\211x\275l\001\333\275G1=\275d\004\322>\315\031)\276!\335^?.\302\265\277\026?h\272T\274y="
      }
    }
  }
}
node {
  name: "encoder/conv2d/Conv2D/ReadVariableOp"
  op: "Identity"
  input: "encoder/conv2d/Conv2D/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d/Conv2D"
  op: "Conv2D"
  input: "x"
  input: "encoder/conv2d/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/conv2d/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        tensor_content: "T\241\022>\360\3416:\365\276Z>R\232\324=\nm\220\273\326\240?\274\306A\273=\022T\231=\323\225\235<)\"!=QV\340=\311\330$<\rj\2629\333\263\355>\311p\240:d\313\017="
      }
    }
  }
}
node {
  name: "encoder/conv2d/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "encoder/conv2d/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d/BiasAdd"
  op: "BiasAdd"
  input: "encoder/conv2d/Conv2D"
  input: "encoder/conv2d/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/conv2d/Relu"
  op: "Relu"
  input: "encoder/conv2d/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/max_pooling2d/MaxPool"
  op: "MaxPool"
  input: "encoder/conv2d/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "encoder/flatten/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377@\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/flatten/Reshape"
  op: "Reshape"
  input: "encoder/max_pooling2d/MaxPool"
  input: "encoder/flatten/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/encoded_vector/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
        }
        tensor_content: "\321\334\027>NWf\275\026\024\332\273d\0251>\225\315a=uY\211\276\352\325\317=\313\007$\275\300\321\315\273gO*\276l0\241=\307\273W>=7K:\317\377\000>\377\326\266=\213\206+\275\214D$>\022\253\201<\224\212\205=\261\336k\275AL\266=\347\230C>\031\375\255\275\352\322\350\274\232O\364\274\324\300.\276(\221\311\2732\362\243\276G\207$=y2\325\276\304\231\250>3\272\270<\200\357\245>d:\244\275\024\250\240<\357\010\354>\r\245H>g\356\014=\334\255\373\276\016<}\276\036\301\301=\243\016\352<+\337\224<j/\\\276$\321L?\330\211\001\277H\303\'=\2058\314\275\325\264\313>\277\222<\276EI\323\275]!3>\272\202V>\030\355z\276\2117\201=_D\216\276P\363\203\276\005\031\n\276\221\301\326\2745\326H>\375q4>\262O\010\276QS\275>r\005\022\276\252\377\006>d\316\354\275/[\360=\247,\276\2749x\327=\342\340S>\223\022\206>\243h\022<\352\250\275\276\345\276\246=\037\332y>\000fA\276\252hM>^F\270=\001\336\262>\374\275]>wa\025\276\204\233h\274\177\364\216\274\n\010\245\276;\3374\276H\300I\276\223p\273>\023\n\317\273,p\342=\331\325\010>\010\246\013>X\223\200\276\206\364\214\276\226v\002>u.\273=\373:\003>\"\016\001>,R\220\276\333|\256\276U\267\206=[2l\275;\322V=\334V\234>\215\340\322\275\367\336Y\275?\177\306\275W\220\320\274h\272\372>\335\036\\\276\253|\024?W\356/\275FX\260\275z \017\277\342\316\313:P\316\007=N\272\026\276n\222\230\276\221\003\303\274Fz\242>e\266\245>\013\246f\276?sI\275\276\340\202>1s>>\3502\247\276gs/?\203\333\263\276P1{>\240\032\271<\n6\231\276\033\251\007\275Dr\250\275\\5\215>\236E\350\275\"I\361=\335\322+\277\247\232h=$\344A\2765e\372=&f\317\2741\177\034?\026I|\276\365\022\017=\\\027\002\276\0241\255>\177\2631\276\n\361E\275\t\241\317>J\367\272<\237\354\354\272\223\372\r?\034}\331=@\216\267=\317J8\276\"\t ?\272\220|>y\211\204>\213\214(?\205\025g\275:\226\327>\230\361\244\275\304D\231\276Hw\205\275\270\360\250=\310\371\261\275\350\324\031\276\245\010\304=\312+\372\275\322)\234\276\231\2119\276\201m\211<T\0322\276P\373\244<T\267)\275\236U\233=-\237!=T\366\233\276\253\353\r=\036\331\206>\311\260\023\273[\262\260\275\003\230\031\276\311\201v\276\"4\226\276\207\\\211=\214\344\264\274RsQ>\357\261e\276n\367??_Q;=\205\330\014\277R\225m=\325\375\311\275L\3106\276\324\363\325\2745\r\270;\202u\220\275\036\211\205\276G\331\214\275\216:\023\276~\246k>\324\230\310\275\256\264\252\275\245\t\007>\237 \022>\375A\312<\341L\026\276\322\357\361\275\225\251\275\274\251\252\360\275\274C\256<s\035\214<\317X(>i\257(>fW\253\273\364\202\030>\205\027\324\274\254\r)\275L\033\324<(V\013=\306\265\351\274t8I=\341\340\336\275\214\252\r=\216\361\214\276\302\314\223\276\373W\266>zs\025\277C\264p\275\2079=\276\235,\346>\364\200\r?\231+\302=g\303|\276J\215\272>f{\037\277$4\364\276U\263\207=\025\341\3179\212\014\026?,\250C?\004\260\361=E\033\304\2763\242\230>G\365\231>{\013\345=\363\326\330>6\036\312>o\213\313\276\335\305\377<\261\313\224\276,\031\314>K\321u\277\272H\307=d6m?\350\377\237\274H\201Y>\252@\226\276\353\316\257\277\325\261\023?<\013X\276\n\324A\276\210\034d>\222bQ\274\251r\316\2766\335s\276I\022\005\276\373h\002>p\3661\276\022V\215\275dh\027=\304L\004?\364\223\224>WO\225\276\212w\332>\013\306-?\303\355\250\276\017\037i\276\301\323V\276GhR\2769\276\020>\201\246l>\366_\203?#~x?\033{$\276\244\352\016\275\177\177\306>\350\311{?.w\327=b\307\215=\363j\330\275&\317s=cu\215\276c\337[\276;V}\276\025\257\203\276(\234\320\275|\304\273<\013\203\276=\000\371*>\270\007U>V\270\324=\367\2131\276H\275\265\275CN\201>\'\223\026\273I\365\335>2\277f>\250\007\374\274\204\3125\276\241\211(<\303#\375>\r\033\020\275\3579\002=\005\007\247>\336)\034\277\264\213x\274\177\340\007\277t7p>/\324\346>\361\3434\276\227\301\000\276&d\261=\330\262\245>D\271\241=\252\343\215\276wZ\002\276o\225K\2764\227\256\275\362\213\353\275\365\201\240=\2007\316>b\305\216>}(\222>s\312\270\276\010\022%\276\275q\013\277\265\332\213\275a\211O?@U\324\276\361\r\033?\340VV=k\204\216>\365\265\203\276\251\300X=\260\230\036>\202\313H\276SL\377>,\2015\276\276\216\244>\017\347\257<\342\312\366\276W08>&\034\023>\375\002\214\276\360Q\231>@\301\031?|\333{\276\\m-?\314V)?\213&\232\276\373\237Y\274X\026\323\275\341J5\277m\300\323>\2034\207>\300s\201=\334mD=\212\327\261\276\233\347$\276Hc\311>x\305\356\276\206\355\270>V\370>>\032\304\261<db\343=\206\\\030?-\314\340=\001g\267\276\375\333\277\276\205\013\245\275\215\376\000\276\364\340\035\276\322\257\221\276\244\000\215>o]M\276\037Q\221>>d\000?Z\317\317<\211\3525\276\253Zl>\002\363\220>F\030\247\276\270_0\276b\261\003?\024\005\244<\315E\271=\322\237\273\273\206\340Q>l\n\013?9\260\232=>\2610>\030\253t>\307\274\001?V9\352>\007\261\333=\214c\030>\263\006\n>\323\r+?/M*>k\035\036>A.v>Mb+?/\354\364>:y\001\276\303.{=\231:\240<\373\022\232\275H\270\221=[!\303>`\272\274>`\033\357\275\350\013X>5?\217\276\207\232\263\276\tl<\276\210r\355>\324\243\330>\332E\333>\007`\367>\310\224\204\275\022\034l>\230H\273\274B\271\230\276\221c8?\206\224\205\276\331\000\220>\037\320\005\275@\352k>V\203n>2\340\213\276\033pQ>\206^\020>\032W4\276\250\031\201\276b\002\027\276c\025\243>\366\"\215=K\243\352\276\363\352\013<\3764\327\275c>\206\276\251\252\001?\r\332)>\230\032:\2764D\223>a=\035>\017\307l\276>\301\021\277;\243\312\276\332\010\226\274\223\236\320\276\274(D\276g\034\022>\206\337\353>\200m}\276]?W?\224\2541?n\207$>\265#h><U\257>\377\220!?\365\020\206\276\337\010\002=\253=\025?G\033\207\276\213\270\026?\342\215z>\266nT\275\013\334\202>R\222\335\274\000\333=>E\275\326>\322J3>\213\204\002?\353\366-\276\204\331d=\262m`\276\213>{>\302V\021>R\303\210=L\301\037?\246\014\022?\232\312??\352\0013\276\236\n\257\276\324\221v=\033SN=\027\345\355\274\214(\314<\027\374K\273\226\305\025>gl\237\275\323\037D=\352\266&\276*y\201\276?{\022=\201\023\223\275\032\332\345<@\312\005\276\320\300\025>\'LE=W^\244>\340\327\201\276Z\370`>\315f$\275\376\332\003?\235\235\242\275\265\003\272\275\313\021\024=\360\002\232<\203\037 >M\306\321\275\347\357\244=\002\032\201>6\200!?\201(\030?tY\026?\257e\\>\264\213\223\276\235\361\201>\330L\243>]S\002?\364\260 >v\241D\276\227cN>\266\314\277\275\276p\360\275\270\227\333>q\311\317\276 \274\253>[\024\326>#!\271>\261\233\265>\254h\270=\234R\266\275\341\361$=\272x\217<M\321\310=\367\201\024>}{\004>\002\343\232\275?\354\276\275\340\340\265=\317\3719=>\n\340\275\to\263\276\210\377\375\275\023\343\302\275\267\313V;\033\014\030\276Sng\276\017\205\305\275\024\361.>\302\3753=j\335\201>\246\261\337\275m\326\005?\234\245\222\276;Lj\275R\230\010>\021\364m\276\',\200\276\230\373\204>QZ1?\367\\P==8\211?\033\330M\275\225\027\250>on/\276\027\270\375>E1\242<d\222\265>\310\345\227?~\004\273=\270Jt\275\305\266\352>;\207\207>Y\337\251\276`\203\036?\241\244,\277\\G*?\036\027\224>\272\232<>\270\242\360\273\350\341\254\276\304\364\016>>$`\276\323\014\365>\217\327\213>\243\306\223\275\334.6>\'\323T>\375\207\361>\310\361E>~\371\220=\260\232N\276\377r\027=\276\363\261\274\230\245T>a\013\331\275\257\022[\275\314|\206\275\036BR\276\247\007\236<\320\320\355=\014\256t\2751h\374=D\027\370\275Y@6>\023\367\254=\330{k>^A$>N*\201=\0311\314\275\014\r\220\276\214\317+\275\314\264)\276\255\0262\276RC\004\276\325~Q>\221Y\330=\257\247\320=\201uR\276\310!\020<$\276\346>E\371\324>\244\021\201\276\032%\361<\376\007\205\275\222\031\264\276\276\014\004>\026\235A\276\347\374`>7\333G>0\334\223\276\243\226B\276\035I\004>\251\202\217\274\271\037V:\010\242\005?\234c\370\275D\366\032?9-\220=d\2272?\'\227B\276$I\315=1n\355\275N\231\342\274a\275C\275\373\330\361\2742\021\375<s\032&\276]\2628>u}\352=\265\377\324\275\202\230D\275\023\322\325<\221|\024>\201:\353\274pi\215=\374\\==\tO\273<\362\232l\276\354*\'\275\010w\243\276a\007\212>T`a\276\253Y\037\276\275\2424>>h0>6\374o=\214\234\276\276\317\334\335>\377x\364>3\317z>D\217\262<\023\3563>g\177i\276\333T\220\276\305\034Q\276o\364\262<Ic\'\2756_t=\021\006\366=\277\216\323>\037\207\220\276U\236\241=3\0063?\252\355\t\276\213\013!\276\001\257\325\276\202e\262\274\025\014\257\2769\350\'\276\211\263H>\303\331\332\276d_\340;\270\244\205=W{I\276\202\270\035\277\276\300\220\277\260\323\242\2756\365a\275i)L?\005`O\277\222\363\020\277\310\314\313\276V\266\"\277\330)Y\277*\037\354\274\344\177M=\205T\262=\306\023\311=\007\333<\275\357\3765>\265\333h>\242,j?\206\240\200>\005x\222\275\177\023\274>R\256t>\351\373\266>\034-\305\274\033\356\275>i\244*=\367\276\270=\236LR>\007\362\307=\262\246\253\275\300 \034\276!p\324\272x\023>>Y\274\223>\250\317\331\275\353\351\230\276\207\2012\2763\334\r?\336\255\241=RD\304<\274\214\322\276\t\215\310=\231X\327>,j9=,\332\365>\266\223\007>\002\203\224>\227\306\334\274\300\303/>c:\025\277!\202&>\271\356\375\275v\350\372\276\335\322\241\276\213\2315\275\226\203b?\366\267\260=W+ ?\340\256\311\275?\375\342=\235\275J>GA\002>\350\303K>\036\316\255\275) a=L\307\230>\205\363\240\276\326\346->\"$\240\276\305N\263>\313\271\000\276\026\017l>\3410\354>v\014\204>\200\360\002?Sh1>\362\013f\277\310Ul>\022\375\001\276\254\304<>oR\\=\311\374*\277\351|\350>L\345\227\276\375\305\322=\235\3628\277q\334\256>VE\n>}\232\226\277(UK;\000\267d>\027\014x\276-s\007>\007\034\224>\321\341M>w\313\312\275\"\017_;\301\365\372<\206P\214>m|\247\276B}E\276\354\266\213>\333l\017\276W\010V\272W\216>>\247\271\356>\326z\227=\274\367\020\275b\250\345=\317P\312\2768\032(?.y)\276\330\023\">\235<^\276\002\254\256>\204\372\200=\001\241>>\026\024\006\276\367\364\013\276\016\213\212=@\033\236;9\033\250;\210o\252\276\007\225\000>Y\240\220=\344,\362<\324\237\216\275\304\313\003>Tmk=\262\303\002>\303\320\270>v\233u\276\371\037\373\276\330\r\231>H\026n>\224~\347\275\0222\244=\004\000\257=*\320\212=S\273l>\200Y\317\276\330I\277>\203\352\305\277\222\350\361\275\216\233R>\376f@\273l\030V?\\\333/\276\333J\034\277\362F\225\277\002\232\232>\360\031\006>Ch2>\342\216\232\276\371\t\215\276\035;\221\276\017\370*?\034<\324\275F\204\017?z\214{\276-u\352=;m\213\276\177\211K\276\254\377;>\377y\017>\324?D?\213\343|\275\314\014\303>\\:\326>\356\272\177\274\352\002+\276\361\2307\276\327\201R\276\346Q@\276\020\036\320\2768\224g\275E\370\216\273\316\251Z\276\331\346\023?\305H\270\274^\342\211\274\264\351#\275Ix\375=I\302\260\276e\320\210<\325<L\276\223G\227\275\205\216\247<\320\365\365=IZ\233\276\341o\303>\272\332M>>\311\244\275\362\376\342\271\370\001\326>\277i\021\275\342\264e\275y\243D?CM\303>\263g\214>\034\202)?M}\273>\341\270\243<S\2432=E\273(>0\277\354\275f\246\251\276J\3246\276\257\344\022\276~\316\334=\250\017\r?t\336L\276\3561\027=\216\240\200\276;\216\231\276\332|\373\275r\211.=\017z\337\275\312\377\273\275\303\270/<\320\233\323\275\"\353R\2759^\210>\240W\021\276\331\221\323\274\212\221_\276>\313\014\277m\375M\276#\343\t>7\333\273>k6\225=I\316H=i(\001\276/\033e>+\270\203>\341\'.\276\241\277P\276\032M<\276{ n>\0263\t>\304[T=\237\337\344\276\252\023Q?\014^\231\2751\025S\275\270\355\310\275\375\340-\275\'0\243=5\342\202\276JC\017>\363r\313?h\264M=LT^?z\312\342\275\005\256\020\277.\233%=\016\275\000\277\031\n\212\276D\'r>\361\231\363\275\327^]?\272R\014?n\016\030\277\361\245i\276\\\244\257>\264\356\350>\034\250\n<\300\r(=\213\223\207>\266\370E>\377\264x>\003NY\276\243\342\204=o?{>gj\213=Jk\252\276. =<\371N\324=\366\243\010\275\326\352->\223gr=\334?\245=\224\300\250\2743{\013\276\205\024==\262y\">Fk\264\276\005*\"\275\033\023\244\275\263K\241>-\312\260\275\225V\250\276\345\253\266\275y\242\326\275i\026\200\275\260\301>\276\342_m\276\375\024\022\276\0331\355\276kL\035\276W\303\205\276#\0134>\323\205\274>\227yN>:VY>\374\376\246\276\0314b\277J\234\232\275\276+\251\275\022\007\233\275\377\312\002?\221\236&>;z\267=\201\212\301\275"
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/MatMul/ReadVariableOp"
  op: "Identity"
  input: "encoder/encoded_vector/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/MatMul"
  op: "MatMul"
  input: "encoder/flatten/Reshape"
  input: "encoder/encoded_vector/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/encoded_vector/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        tensor_content: "\2167\217>\026\334\330\274R\234h>x\351V>\230Z\001\276\322\302\225\274\376\245\347;\217n\211\275g\334\034\277\355+#\275I`U\275k\343N>(\3242\275[h\017>6-^>]\300d>"
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "encoder/encoded_vector/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/BiasAdd"
  op: "BiasAdd"
  input: "encoder/encoded_vector/MatMul"
  input: "encoder/encoded_vector/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/encoded_vector/Relu"
  op: "Relu"
  input: "encoder/encoded_vector/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "NoOp"
  op: "NoOp"
  input: "^encoder/conv2d/BiasAdd/ReadVariableOp"
  input: "^encoder/conv2d/Conv2D/ReadVariableOp"
  input: "^encoder/encoded_vector/BiasAdd/ReadVariableOp"
  input: "^encoder/encoded_vector/MatMul/ReadVariableOp"
  attr {
    key: "_acd_function_control_output"
    value {
      b: true
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "encoder/encoded_vector/Relu"
  input: "^NoOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 1087
}
