node {
  name: "x"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 8
        }
        dim {
          size: 8
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "encoder/conv2d_1/Conv2D/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 1
          }
          dim {
            size: 16
          }
        }
        tensor_content: "^\337:<!\000l\276\253\225\331\274\245\274\235=l\212L?\315\024\214\275K}\345=T\206\245\273\306\366\356\275\023fd?P\227\306\275*\301\263\276H\037\242=zD\200\274\252\265\3069\371\005\357\274x\336\255\275i\227Q=\207\370\335\275\014\245@?\276\336\307\275#F\364=\2471.>\016Bn\2763\242\270\276\213o\273?~\002)>\'\261\245\273\374\333\031=8\003\323\271\0135\206>\263\256I\275\235\322T\275M\002q><\221\n>\247.\272>\210\206\204>\355\227\000>A\346W\275u\222\241>\204\322\320=\310\013\256>\311\221\373\276\363\206b\276\333\311\262=\255I\005\275\0010X=\236\304\342\274\215\370\220\275\210 \234\274\226\006y>\320#G>9\n\225\2747g\254=u\340\202\276\356\355\277?\326\013\025>r\335\310>\205\336\213\277jN\341;\"\376s=\272a\211\274\327v\025>\035\314\271\273\341\221\210\275\273#\315=<\333:?\375+\201>n#\002=\267j\251=;\271\273\275\205R\264>\002\305\202=\206R\332<\334\030\004\277\010\230\366\275\276w\003<I\355v=W0!>$\307><\356\205!?)/\223\276\243O\211:\016+\242\275\220\261\221?(\005&=t\336\241\274\366Z\320\273\376\315#\275\357\342\307=\214\026\255;\344J\307\276Jm\217:\3539\202\274gC\t>C{%;M\211\023?p\367\037?\224\243[=8\"\010?}\267\270=\250\253\334>*k\211?^:\340\276\353\t+\2778Z\032>7f\306;\273o\353\276\216\227\330>\014\370\242>\243Q ?\256\212\002:r\273\356>)}2?\332\\\r<\303(|>\263\226C>[\272v?k\266\306=\364o(>\325\025\237\275\267F\036>\356\030\274\275\262q\013\277ICF;\322\365F>\334\0360?\223\266\357<\233\311\007?\311\023:?\311\213\314>L\364\014?lC\2649\371P\\?XN\276\276\3539A>oo\242?\206>\263\2731w\300\276\234=\020\277N\n\331>J\362\345>T\265\021?\326x3=Kh\225=z\324\360>\217\277\263?*\231\212>`\035\211\273\331\2002?\334\302\214\273:\002\246=\322xI>\256\014\252\275\355U\030\276\370\321\375\276\225$\020>\375(\223>^)^?\254\300#=\302\265w\273\333\246\034\277\277\271X\275\271W\260\275D\005\204?\320m:>\177u\036\275\350\222\007<\360\211\301\275\363\032\376<\354g\220\273\302f\024\276\rL\262=)\334=>=\217\024>*\r\0319\231\326\243=\224J\001>\037\267\370>\346+6?)\232\224=\2170\225>!\025\213>\370\325\336\275\370f\210\276\275\3341=\006~7>\030\333\205\275,\311\232=\202\322B?_\243\030?\306\375\267\273!=\023=F5$\275\246f\032>+W\014?\202\216\227>r\376L?3\010\017\275\033?\371=\261\033\266<\034^\270=%\322\205\276\314(\010\275c\003\272=B\321\036?\205\003\306>\030>w\275\321\317\342=L\327\325=\272\244\365>\206\363;?\201\246\344\272\257\243\331>\215)e\2753\230\004?\t\017F>T\367:=\253bU\277\345\022\311\275\246\301\202=U\232<?u\n\037?A[k?k\367\310;\371A\315=\221\372{?z?\033?\371\260f\273\303\350\367>\034\351\337\274\316`\251>p\310&\274\273\335I;\006\322\233\276-b\324\275\254\243\246>jz\034?VD\t?\345\302\n?\316\322\235>\315*z\277\200\343\365=\006\306a\276\301H\r?\037\030&>(\035m\2762\244?\272J2K\275\3454\223\274-08>VI\374=\347\342\265\275\006t\324>|&\234=\221\025)\275qF\003?\324/$\277\232$4?\327\242\345>\315e-<\001\250l?\253\270~>7\210\220\276\320\301\254\2768\361!=\033C\320>\211\240L?\212\037\017?\034bD?`6\036?#o<\274\317\t\354>\262\030^\277F\271\006?\000\001\236>\345\212\200>\2716p?\264\217\320\273Yq7>\270\217\223\276(D\024\273hXm\275\235\212\200?r\253\007?7C\372>\031:0?g\334\327>eT\'?\320\346N\277\3073a?\024vF?<\375\320;\022\353\030?\354\rR\276I\252Y>\212(\036? C\031<\262{\002\277\215CY?\227hO?a%N?\343Ru?k\372\222?Z^\354>>\227G\2774\336\250?\010D\315>\036:\244\275\333\'\230>\177\020\316:\253\274\306=\014\004\232=\240\210\000\275\363\263_\276\352FL?_\010\376>\244J\335>X\033\252?\266\033\260?\307{\376\274\001\264\004\277\'\370\351<\364\236\256\275{\277j>?k\366=\326lm\276%\013\236\274\004\371D<\333;4<\305A\333=\202\363\036\276\264\267\373=\356\3175?\323\006\003>u\345%=C\335I=\324\263\351\275\324e\004?\037W\034?\010\342\002\275\025I\354>:2\\=\002|]\274aU\307\275\240J-=\033\312\036>\273\276\005>\232\335\237?A\224;?\023\306\031?\3514\220\274\306<\300\273[T\216\276\300\252N>\332Y\035?7\256e>l\226-?N\313?\275\325`Y=\034\306=\276\255\307\343\274\265\314\373;\243\254F>*\020r?\017R*?\326\2341?C\250^?=\302\365==\354\036\276\252`#?2\017T?)\344.\274\261\217k>q\345\247\274%\242%>\347\"\267=\365\327\017=\303\017\262\276\337)\234=\002\373\225?\344\351D?Y\005\207?_\316\321?H\201\325<\376\204P\276\013\303\205?XE\'?g{v\275\312\377\020?>\205\266\274E\357\213=\235\310\254\274\024d\210\275p\306\"\276\272\210R>\260\372h?\2156;?(N\242?\274\275\256?"
      }
    }
  }
}
node {
  name: "encoder/conv2d_1/Conv2D/ReadVariableOp"
  op: "Identity"
  input: "encoder/conv2d_1/Conv2D/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d_1/Conv2D"
  op: "Conv2D"
  input: "x"
  input: "encoder/conv2d_1/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/conv2d_1/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        tensor_content: "\013\013\272=]\365\214>\220\237\010>\021+\346=\240\212\006:+\367F>\305\366\005=\032\377;>\365\035\334;\204W\234=\254M\264>\244\265\370=\251\031=>\036\321w:rI*:mK\305="
      }
    }
  }
}
node {
  name: "encoder/conv2d_1/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "encoder/conv2d_1/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d_1/BiasAdd"
  op: "BiasAdd"
  input: "encoder/conv2d_1/Conv2D"
  input: "encoder/conv2d_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/conv2d_1/Relu"
  op: "Relu"
  input: "encoder/conv2d_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/max_pooling2d/MaxPool"
  op: "MaxPool"
  input: "encoder/conv2d_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "encoder/flatten_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377@\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/flatten_1/Reshape"
  op: "Reshape"
  input: "encoder/max_pooling2d/MaxPool"
  input: "encoder/flatten_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/encoded_vector/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 16
          }
        }
        tensor_content: "\"@:\275\230Ia\270}\\\213<\353\361W\275\371\322\r\276\2005\352>!\311\252>\322>\202\276SC\274\275\210\021\330>\310\\\207\276\n\356\323=\352\345\324\2768p\306\275\357l&>\365\236\000\274!\215\303\276i\014|>K\262\213\276\341\335\255\275\332\377&\276i\004#?\307\177\036?\214\347\007\277\303D\343\275y\3636>\033\270Y<w\347\211>\373\234\302=\"\346\016\277\030\373\r?\261b\200\2752\277\316\275\327\317\273<A\204\300\274#\032Z\275m\217W\275N\241\320\275\272\006`\2756\374\376<T\3529=\304\030q\275jB\016;.\313\265<\343\000\354=k\231\346<\026\273\212=:\360\004\273\025\355\014\276\262\222\010\276.as\275\374\336\244\275F\364\033\276\242P\227>p\223\303\274\025\213\256>:\345\217=\204\250m>\376\265\346=\351H\211>W\3550=\370+\023\276B\031\t\276/\362\031>\206\376\310>\033$\n>\375o\304<W\277\241>\377E\247=\005C\315>\t\373\246\276\203\215\342;\262\315\225\273\240\332z?\033\232\307=o%\310\273z\021\314\276+%\312>\316.\260>\336!\207>\370EH>\221\234\235>\016\007\234>\025\203\250=\000\013d>\247?R>\327\361\331\274~j\304>U1\336>\357fT>\020\211\370;\302\263\206=(\323\213\275\235\311\236>\267\333\260>\243\255\010\275\351\322?=\177\031\241\276\363\222|\276\203\216q>\225\026\235\276\024&\255>l\370_\276\"\320\020\276\016S\010\277O\313@?oh\351\274a@y>z\252E\276jw\025>\036\030\024\277\272%)\276\342n\262\275\276\264\336>\350}\226>\256\354\257\275\352\321o=\336\"c>\301\031\220>\353\351\001>\355%\337>\211aF\276\2073o\273\313O\337=\n+F=\261\023\005\276\307\203\342>\254\306\210=\021\270\316\275/N\273>\017\314\311>\221\315<\276\211_\020>c\335s\275\274\303\233=\314\211^=\224\336!?\021\357\322\276\013}n\276EH}\275&]0\276\257\376\343\275\316\220\243>\226\005\n\276\037Ny\276g\275\t>Qc\224=\364\322\276>I\241\262\275%\r\030?\273\304e\276\374\034\346>\002\342o=kck?\321\254\370=qm*?\031U\004\275\243h\351=\202\305?\275\3324\255>\227M\302>\233\276\263\276N\224\250\276\244R\235>p\261\246>73\246\276Fb\235\276\366]\337=\024O\332\276\310\225\324>\261$\367>\247\n\266\276\231d\375=\320\255\305>X\375\323\276r\'\364=\275\026\003?\252t\250\275\300\254\310>r\3427>\241\177\222>j\324\372\276t\r\017\2772\321/?\252^\273>\322B\307\273a\200\310=\250\210\331\275\027T5;i\3555?\327*\372\276\244\030w>\375\234\336\274\021\245\311=GPE=\257JQ=.\004\033>\177l?\274A\207H=\357\354\243<\357\274\227<\301&\325=\244@\t=\262L\251\275>\201p=\357V\000<a\021\250=%\313\214=D5\221=k\242\265<\224\3335>G\r\247\275\006}\215>\265\366[<\237\004<\2769\025\337>\252\t\215>\'\001j>\337R\210\274?\020>\276\202j\024=E\260M>kIl\274\212i.\276\037\005\332\275O\373^\275\311Q\025\276\332\242\241=K\240\312\275}\305\034=\032\332\001<\256Zi\276\375\333\210\276\301K\263\275\222[\355\274\354\252\247<x\223\212\275\315\227y\275^\316l\275\261D&\276\231\223\234\274i\004\003\275\235\340\254=\312\300m\275\213\216Y\275\354\345\200\275\316W\025\275\365\244(\275\263\027:=\256h\024\276\3054\256\275xu\233;\264\306!\274f(n\275\216\306\322\275B\222\004\275\030h\325\275,\265\275=\330\351\321\275\236\002H\276\353=T<\007K\345=\031\207\355\276&\'.\276.\210\030>K\260\245\275\222\363]>\216\274\227\276\032\324t\275\022SU<v\315Q?@Bj\276\025b3>\2064&>\326<\200\275P\003\215>zyp>\353\tf>\366\365\271=\324\356\022\273\355\363\212>0?\244=\3774\360>\324\034\343</iZ\275\3755$>\251\240\273\275+\3105\274\306\"\212\276G\250 >\300\322\233=\026\325E?\t\303\026\275;\252\361\276v\313\023?\364\304\241\276L^\022>\032p\232\276\330\332\210\276\327F\312>\342\370\024\277bd\213>\227\023\022>w\315+\276\231\307\013?T\334\324\276c\233\354>\032\226\262=\024T^=W$\314=\223ZO>\026]\236\273$\013\253\276\350\366\260\275\274j\242=?,\263=<n;>\253\314\033>\243\260\001\277\206k\271\275\t\000s=\355v\253\274\306\213\222>\310y\004\276A\273m=\214\330\">\340b\222=\352\274\260>\223L*\276\204\203\213=\242\315I\275\031\227\014=\005\327s>?\240 \276\244H\306>\307\2702>\3037\375=~\232\243\2764B\032?<Y\016>\311\344\327\275\023\032\216>\256\020\331=@\002\367>\n\207\307\276\213@\211\276\031)\347>\333\372\210>\347F\336\275\332\277\230\276C\241\337=\303w\255>\2428c>7\003O\276Z\261\236\276\216s\032\275\247\265\030\276\306}\037\276\345\374A\276\3750\313\276\351\262\025\277\262\311\002>i\024\031\276\204\362G\276\0359!>\326Gb>\361\206e\276\003\243\277\275\256\323\363\274\004\327\316>\007\332\262>}\310\007?\211\232:=\357\303\344>\375\260\027?\223\327\033>\325gV=\225b)\276\240\376\351>,-\321>\367\233\257\275\024Yb>\356i#?\033\316\037>|\3452\275V\005\317<\220\314\222>\333\267\300\275\001\234\262>lf\377>q4\354>\311\341c?\201\256\210?\250\270\330\272\177\2775?s0\374=\006\224\t\276\223c.\277\251\317\312>\262L\202>\231\317\316>9f\323=\336\274\234==Pd<\277\225\211=\316\020\241>cD(\276<5Y=\267\000\347\276\243\022\r>M*\322>\346\033M<7v(?\206\342\324>\335\324\257> \310\\>\260\321Y\274\274\252\233=\333\302z>\324,n\276\346\302\256=\232\021\177>\315\376\014\276\027\327\273>\223T\020\277\3119\366<F\343\370\276z\250{>\265\021\314>S\270\314>\304\204\201\276\220k\252>\300\350\325\275\307\t\250\276\275\346\260>Ikg\276\357\214o\276\311\020\200\276\254\332\276\275R\344E=\365}a\277P)o<\213{\022\277=\035\n\276\002\336\020\274\303\212k\276\013\304\345>H\254 >\177\343!?\276\327L>+(h\276\340SF\276\007\323\001=\251\010\202>\340\214d?\343\026\200>\357\354\r\276\361<\203>\210d\034\275\315f\303\275\267\264\255>pf\r>\241q\313>\201`\265>gjs>\233I5>(^6=F\270V=>\351>\276\2675\356\274\374l\025>\211\032\204\276\340\251H\276%b<\276 \014\222\276y\245\323\275\"\361\241\276\330\263H>\322Z\264\276\377\3254\275\333\332?9\3254\236\275\3040\330\276\014\225F\276\254\273\021\276\301\006i>w\331\215\277\333\"\226\277\211M\334\275\235f\017\276\224\375[?\274l\363\276E!\352>\211 \310=\366\3200\277\034O7\277\305\331\025<\022\254\367\275YJ\225>\306\252l\276U\375\246=\252\257\371\276B\343\307\275@\2023?\372\227O?\032r9?\200\215\313\276\324\004\245=A\263h\275\213t4\277\266\332O??j\007=\315\203b<\2520->\020\332\312\275\253\303v\276\337\277\337={\312\027\276L\351\206>*y\341\276\265\035\033\276\352\350\311>%\251\234>Z0\341\276\342\317\211<\177|\346={\235c?r}\310>=o\013\277\252\244\266\275|}\365>\300\311<\276O\217\225\276\276\222\017\276\316\267\016?\236\324 \277|61>\203[O>\013\006\313>\r\t\310\275\276\222\234>\220\206\222\274#8\251=\273\342$?\035\321\347=\323\310P\276UW~\276\0367\317=@\305\023\276\024o\315\275JH\202\276\206k\024\276\233\351\207>1\376\230\276J\362\335\274V\244\315\275ryF\276\254\242\037\275\017\355\306\276(R\001?\357\337\213\276\315\353\254\276\307\207\350\274\273J\031\273\245o->Ki\017\276\325\2316>)Q\355>\270z\223=\003/\231>1\351f\2758\251\214\275j\246\027?&\356\025?%ag\275\177iF\277\0041\206\274\260\303J\273\356\242M\276K\243\351\275\204L\214>08\200\275|\234\016>\354v\t>L\356\201\275P(\210<B\000;>\235\251\265>\244\314\240>\306\2772=R$\035>\204\311\236\275!qY>\235\017\257\276\313\205\271\275_c\255=fl\305>\327\027\322>8[\225=\352^2\276\232f\331>\232\230K=\020\234\207\276\247\237\370>v:\332\275\365\275C>\312\017\254>\213x\010\2756>k\276\261\246\306>\213i\031>\356B2\275^\365\022<C\025\\\276_\354\342=\276\371\311=\200\306\023\276\356\356\233>p\027\240>;\225\237\276\340\003\005\275\231\331\020;\205\211\024\273E\237\237>\244\300\214>\227R\004\276\304EZ<Q\331\211\275\037\020o=d\253F=/\243\360\274\237\355r\275*~\212>1pk=F}\262\275\365\034\212=\025dN\276\2633\030>\260\276\353= \006\365<Bs\030>\032(\272\276\237\326\022>\267\353^;rI\336\274E=\207><\317\343\275\232\230\362\275|\257\255>\332\035\000\276\303\220)\276\312\256\257>\236\033\244=\001\373\214=x\0068=\335\255\374=^\241Y\276Y\315\035=@\211\237\275\2027\205\273\375\264\364=8Z/\272\262\364\373=\212\351\242>\024F\342<\303p =\200\311\006=\262A\322=\246\254;>*\366\013=WH\021>\306;\314;\006~\013>\314\312\240>D\242\361=\234>~>l\344\212>l\233\306=\257\235\220>\200TL=\344\r\247\275\270\331\276>\002\353\226>\270\220*>W\ny>\222\262X>Y\244\307>\025\332[>\3044k?^\020\037\275g\244\366\275CI%>+\231\377>\017\363.>\303\305\007\277\332\213\375>\252\335\375\275\276\313\316=m\373\007\276b\347\003?-IQ\276\021!\306>\353\353)\275\304\277\235\276\027\034\354>\3506\036?\277\201\257\276\343\266\000?\007r\221>\n,\263>\264\3401\277\341\001Z?\"\2655>O\332\303\275\313y\236\276I\233\005\276>\nx\276`\306W\276B*\240=<X\232\276(|8\275\030+\253>\260%+?\360\351\260\276\232eC?\361\000\017\276\207\2560=\234Ti\277^@\320\275\204V`>\204\340\014?#/9?\213\240\335\276\312\333=\277$\354c\277\250\323F?\021c\006\277\312\317\313>:\321\316\276yO\257\276)\023m><o~\276\217E>?\3274\235>[\274?\277\001\330\232>\354\266&>>\035L\277\2402A\276\002\204\351\276\367\213\361=x\223\031\277\264\226b\276#&\324\276\234\306\256>f\362\035?\236y\265>\323R\333>E\027\205\273\310B%\276\214+\002>1.M=\367Mv\276E\222\010\275v\2263?\221\355\354=e\203\257>\231\364\030?\027\nl=M\301F\276\006\224;\275\277E\252<\325r\347\275\265\240\360=;\263\331\2767i\235>Q&\342>\336\236I\276D\001\204\276U\233\032?\365\027S>t\212\316=\003}\334>kD\212\276\321\326\217\275h\037\310>\000tP>o\301\005\276K\325\365=J\373\016\275nG\316=\033\2768=\272:W>\247f\224>\343iX>\352\266T>\351\341\207>\275\212\261<\336\342\016>t\207p\276|/\276\274y\020\305>\2023\210\276\236\257\242>\220`^>\256\354\257\276\006\322\366\276\301^-\277\334\357g=\221\275\376>\tk\371\276 \314i>\237\004\032?7`\352>\005>\025\276\233g\202=5T\251\275\263\264\276>\350\302\302\274_\201\360=\373\343y>\024\002H\276\256\202\252>s\310T>\275Q\360>\233\351\331>9\023=>\206\261\"\275\247-\231>\027\237\366\275\016\320\037\276\223\265g>8\230\310=\214\207\227\276\265\322\220\276\255\325<\276q\276\213\276\020\014\302\275y\002&>\033\353\002\277\322Y\300\276Z:\230\276\237\305\341\275\273Ps\275W^\212\276;\177]\276q#U\276\212I\227\276S\354.?$kQ>\233\001\031?\'|\207\276\t\275\224<\215\374D\276\253=\026\277\013\215?\2768:\233>\2463\367=y\217\253=\252.B=i8\227>\2337\205>\020\372\235\276\375\t\013\276\207\020\n\276e\374\243={\233/>C\221]>\031ai\276}N\030;\302@$>\326s\030>j\267,\275\302\263\376\274\"n\206>\253x\263>\352\223\221\275\332u<\276\367*\027?\201\316\201\274Q\332M>A\310\347\275n]\206\276\322\363\330\275\004\3271=\327-\272>\331\265D=\364S\274\275\246\356w>\336\005\252\2757[\354>O\305\264=\016k\233>\234\330\205;4\234\367\276\332{\266=q\210\002?n\241\310>\261\006\240?S-\311>\010\2415\276\026\263\341>\341\233\024?\352\3010\276\346\236\026\277Q\032l?\034\237\243>\014(\234\275\265\266d?\302\t\267>J\017\252?\340\3144\277\233#\336\2751\021\204\275Y\270.\276_!\237\275q7\207<\363\004\317\275\036\350\362\275+\177b>{\316\250\275VAG\276\212?7\2755\363\234\275*h?\276\244\277\304\275\025\263\346\275\010Z\366=\262\301\202=\367#^>BsL\276\325\302\020\276\016\004\006\275,\013\234\276\000\256)>\207\331\324>\0043\274>\3435L<)\253\214\275\253\310\017\275T|\001\276\016\345T>+\222\037>\013 \373=\032\245\000\277\'\365\317>\340\242\206>T\n\331\274:L\002\276J\227?=\277\320\002\277xa@?\217\023\362=:\251\215\276\032\260C>z\320U\276,cl\276\200\314\345>@\351\000\277\377L\026\277\251aF>\231\375\367=\2108:>\3560\307>\316\376}\276\355n\250>\270\032\336=6Ui>\256\361\335> Y\311;\206\212\207=\006\202\257\276\230\030\177>\032\312\270>\037\370\201\276\266Z]?\214\313\032\277z\351\335>m\263\241?J\006O>\257\326k\277]\256\034\277$\361H\277\323\364\324=\227XC?\345`\002?\022\214\275>\235Tb\277\274*\353>#\222\277\275\313\026\263\276\002\275\371>\272\276j\275\022X\336\276\233\211\036?\205\004w>\306j\330\276\337\202\270\276\035N,\277}}\310\277\3473\253>V\311\266>\202\321\001\277\216xU?wG^?\032U\211\276\000,\330\276Z\022\343\276J\033\250>\274L#\276\321i\335\276,\274\240\274\"\034)\276\026\211F>\322\314\214>\266\337\334>\273B\271=\305\375\026=\207l\025\276x\204|>>\326\270>0(2>\253\273\265>\337\\\331>"
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/MatMul/ReadVariableOp"
  op: "Identity"
  input: "encoder/encoded_vector/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/MatMul"
  op: "MatMul"
  input: "encoder/flatten_1/Reshape"
  input: "encoder/encoded_vector/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/encoded_vector/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        tensor_content: "\232\266\017>:\300B>\035`\021\276\326\304\332=\205\216T\275<\241_\273K\017\372=\342\034Y>S#\247>\222}\226=6\2671\275m\261`>\002\345\025>\334V\221>\033\374\317=\316M\236>"
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "encoder/encoded_vector/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/BiasAdd"
  op: "BiasAdd"
  input: "encoder/encoded_vector/MatMul"
  input: "encoder/encoded_vector/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/encoded_vector/Relu"
  op: "Relu"
  input: "encoder/encoded_vector/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "NoOp"
  op: "NoOp"
  input: "^encoder/conv2d_1/BiasAdd/ReadVariableOp"
  input: "^encoder/conv2d_1/Conv2D/ReadVariableOp"
  input: "^encoder/encoded_vector/BiasAdd/ReadVariableOp"
  input: "^encoder/encoded_vector/MatMul/ReadVariableOp"
  attr {
    key: "_acd_function_control_output"
    value {
      b: true
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "encoder/encoded_vector/Relu"
  input: "^NoOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 1087
}
