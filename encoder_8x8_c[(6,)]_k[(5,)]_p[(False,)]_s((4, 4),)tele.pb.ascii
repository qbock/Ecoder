node {
  name: "x"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 8
        }
        dim {
          size: 8
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "encoder/conv2d/Conv2D/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 1
          }
          dim {
            size: 6
          }
        }
        tensor_content: "{\334Y>\273\367\223\275d6\313;\210\335\203=\rKQ\276\362\331\212>\241f\230<\r\260H>\030\256G>&\033M\275R\002\004>\031H\225\275\212.K>\275JX>\316T-=^\026B>\320\2358\276;\235Q>%\274\336=\007[S>\337\370&\275\035\371\310=3\004\"=\205\226`\274\373\340Y>m\222\201=\374\222#<`\260~>\'3\252=\014\230t\276\\\310\025=rG!>#\030(><\027\323=\037\320\336=f\236\264<\263\n\370=\"\327==\245Z\215>\200VJ>j\265\301\274\006\010H\275\256\302n=\366q\375=g\311\320=\013\345\277=L\241:\276\302\343\344=\027\255n>\3239V=M\024)=\270\363\210=\221%N\2763\353>>P8,;u\336-\272\260\357\246\275;?w\275:\272\002>`\373\300=\006u\221\275\020A\303<J\021H>I\251?>\273\236\323\275@zs>\353,_\274`\361>=\207\224v\275A\023O\275?\333\334\275\304\366\205\275X**>\221\241\010>O\251>>%v\222=o\340\374<^;N\274\027\335Y<\030U>=pJ7=\310e\200>&\367\343\275\350~\342<u\265x>A#a>\033\014C>s-\010>\203\252\267\274$\336\344=cAR\275\265\347D>\022\275H>W\340\323=\222\240\036\275\006h\230\275\303t\336;\020\271\212;&\316\232=O1G<\"\2336\276^\226$>^\270\\\2752\207\216=\366\317B<L\305\314=$\211\375\275\341\007Y>\224!\206>\241\202b>\276\277\333\274\213=\233=\331\253\257<\014\353\'=\3474\'\275\317\000\306=\253;+>\2256\216\274\250-\027=?\257\312=\226\322\204\275w\203}=|\004Y>\325{\010>\252\240*\276.\257\306\275\027\250;\275V\301)\275\030\013]=GF\253<\r1\021<\216\021@\276\201\232\327=\246\244\021>\355\377\">\\\270C\275\026\203\245=2\376\010>Vh\247<\033\032!\274X`,>I\361c\275\377M\304\275h\2570\275\300\347\243<\315\372\026>\n\346\252=\306`\267\275\2306\353<\236\016\333="
      }
    }
  }
}
node {
  name: "encoder/conv2d/Conv2D/ReadVariableOp"
  op: "Identity"
  input: "encoder/conv2d/Conv2D/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d/Conv2D"
  op: "Conv2D"
  input: "x"
  input: "encoder/conv2d/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 4
        i: 4
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/conv2d/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
        }
        tensor_content: "\240\363\316=\324\335\310=\232p\312=\307<F=\303\250N\275Z\376\322="
      }
    }
  }
}
node {
  name: "encoder/conv2d/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "encoder/conv2d/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/conv2d/BiasAdd"
  op: "BiasAdd"
  input: "encoder/conv2d/Conv2D"
  input: "encoder/conv2d/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/conv2d/Relu"
  op: "Relu"
  input: "encoder/conv2d/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/flatten/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\030\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/flatten/Reshape"
  op: "Reshape"
  input: "encoder/conv2d/Relu"
  input: "encoder/flatten/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/encoded_vector/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
          dim {
            size: 16
          }
        }
        tensor_content: "\3323\317\273\202\340w>oZ\362\275\027\220 >\210\211\214>\264\305\220\2758\005|\275_\300\030>\237\010V\276\357\321<>\232\034\223>\207\350\326>\013\023\350=\303\227\351\275dT\025>\233\316\306=\245_J>4+\213>.\216\361>zL\214\276\233\rS>Wj}>*d\303>\007\225\225=\024~U\276\030\235\341\275\367\004I>\321C\310>;G_\275\3407\357\275\275\204\324=~L\001<\352\311\203\275\371\022\210>\003\"\222\276z\250\344=K\035c<\007\037y\276\244\346\t\275\224\367\007\276\334\310L>\252Z\226>\260\226\335>\247y\346>/\273\274>v9T\276\247\350/>Z\263I\276y\022\330>|\225\034=&\212U;\266[n>\027I\207>\211\322\315\275\034\352\326>\225PO\276*\307\035\275\320p_=\350\326\253>\307\013\356\275e\205\316>\365\350\350==\373\321\275\252\356\">\233\357\316>\026\313\034\275\035\262p>\360\345\301=\271\267\316>\027)\322<\370Wh\276nuu>Z\213\324\275\274\202\232<\216\226\231>\215m`\2767\334\222\276\025M\202=\253\206\212\276=\361z\276\024$q>\007\336\215\276\016d#\274\254A9\2762\253\226>\277\311\223\276#\025J<_\025O\276\302\274\303\275\224\256\002>\n\361\'>}\265\217\273\257\237\010>\323\n#>\000[\340>\027\355*\276Sp\253>\363\360\037>\021\023\267\274\224\027}>.i\316>4\267M>)\002\026\275\265>\367>-\3021\275~6\202>\225$J>F\230\267=\037\347\305>\221\026u\276\307\n5>\374_\005\276\364k\312=\320U\350>\037\030/=EU\211>j47>\006\354\004>h\033\364=\236\200\310\275\211\313\213\276F\223\240\276\274\337f\276\354\320\350=\345\301F\276\203\305\360>\213*\331>\203<l\276B\257\272>GE\302>#2l\276%+\274>\264\317\025=Y\202\014\276H \016>\313p\201>\344S->\263\261\247\276\324D\312>\332sG\276\243#\360>\272\216\026=\037\222\261=\200\363m\276\223\262\251>\036\315a\275\370\271\233>\240\247*\275\025\n\031\276\252\305\033>c\333\363;/\252\273<mt\247>_Jt\277p^n>\231\270\036\276\304\367\340\275)\350\230<\337\204\203>\317\263\242\276\013\272\232\276`V\236>\265\207v>Tr\257>ge\201\275GgY>\374\2509\276\033\036\336>E}\304>\2116\237;$\264\211=\221\267\253\275\010/\025\273\260\327\\\276\273\343:\275z\035\376=\326j\335>\004\240{=\0109\031\276V\270\255=\201rX>\336\212v\276\252|\343>N\317L=\365\201\300>\230/\305=\226\022\245\275\347\t?\274\264\020\245>\256\376]\276\251\344U>\246\337\002\276ek\361>*\337\010>\311\221\335>#\333\342<\2563\345>\252`c>\276\034\300>\325\237\343\275\231#\324>\305\260\271\274N\364\023;\032-\225>R_\215>\225^[\275\211P\347<2\374\177\276\351\325\234>d\257\336\275Y\237\262>\377\347\226\274D\026\362\275\204\370\202\276\327_\231>w\311\014\276\343\007+>\377p\242=\364\201\017>P\350\317>\tg>>\210(.>r\323\244>\311\376;><\201\332>\246S\207>05!>\3739\034\275d\337\220\276\312\346\243\276\244%\310>L\210\200\276\341\270\213<\357f\316>%l\210\275\342\306\356>\347\301\202>\354\227\033>;SU<NP\333\275.\016\366\275\354,e> \215:\276@\332\351>\274\310W>\265\004\014>\236\363\033\275\035\244,\276\324*\321=\363\233\202\276\376\331\327>;\214\373\275\261\033\013>\215\213\226>\213\255\250>T\\\272=3\230\305=\021\320\273\274\004Y\205\276\000\364\234=\016\3141>\314m\236>\033\240O=+\014\264\275\222Z\253=v&\201>%\341s<\233\237\256\274\224E=\276\215\254\213>\212n\237>t\305\023>\261\344\r>q\265\264=\016\327\244>\374\232\'><b\214>\370\301H\276A2\034\276={u\276\374\020\315<\273m\241>\266\335\005>yhF>\337Y\005>\234\020\344=A\322\374>>\331\266\276nv|>\271L\261>U\371\201>\304\270\262>\304\241\277\275\335\215V>\021(\337<\2233\221\275S3\263\273Vy\231>\346\247\177\276<\251\321</\277l\276\313XK>\212\\N\276=\306\316\274\377VR\276\263v8>*\206p\276\204\234\002>N\261\302>ik\263\276\2566A\276R\027\337>~\022.=8\266\215>b\300\231>:\227<\276G\212\363>\377i8<\240R->\016w)\275\313\177M>}i\204=[B=>\311\301\340>0\037\210=\256\357N=5\372\217>\264Qy\276p\225\362=\320=3\276}\363@\276\017\337\234>\3620P>\230\243\024>F\016\265>\027\275\234>\3437\201=Ag\304\275\377\3472\275\330\226\334<\236\340\243\275+U\231\276@\205\325>\216{2\275\t\036\263>\270A\322>\366\252\\\276\310K\264>\036\205\240>\346\264\342<\216b\373>\364\3523>\354\311G>z\335\250>\347\357\240\276m\235\252\276\324\302F>\3707\"\276\224/\343=X\245<\276d\'\341=\210\357\331=\034\220\210\275\2200\206<p\332->\3446u>\007\341\014\276f!\275>\204\3710<+\304\200\276\270\033\352\275\317-\277=P`\263>D\335\356\275D\031\263>\341\342\003?S\336%\275\262\2317\274\037E\330>/\315\265=\356\022\260\275\247{x\276\215\013\216\276\035@\032<"
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/MatMul/ReadVariableOp"
  op: "Identity"
  input: "encoder/encoded_vector/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/MatMul"
  op: "MatMul"
  input: "encoder/flatten/Reshape"
  input: "encoder/encoded_vector/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/encoded_vector/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        tensor_content: "V\n\266=\305e\267=\032\260\273=8\370\307=O\002\251=\345\234\033\275pm\264=\206\313\337=\207I\304=>\340\223=\271A\274=\374\312\271=\372\202\275=D\r\316=\2720\270=\355B\'\274"
      }
    }
  }
}
node {
  name: "encoder/encoded_vector/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "encoder/encoded_vector/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/encoded_vector/BiasAdd"
  op: "BiasAdd"
  input: "encoder/encoded_vector/MatMul"
  input: "encoder/encoded_vector/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/encoded_vector/Relu"
  op: "Relu"
  input: "encoder/encoded_vector/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "NoOp"
  op: "NoOp"
  input: "^encoder/conv2d/BiasAdd/ReadVariableOp"
  input: "^encoder/conv2d/Conv2D/ReadVariableOp"
  input: "^encoder/encoded_vector/BiasAdd/ReadVariableOp"
  input: "^encoder/encoded_vector/MatMul/ReadVariableOp"
  attr {
    key: "_acd_function_control_output"
    value {
      b: true
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "encoder/encoded_vector/Relu"
  input: "^NoOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 1087
}
