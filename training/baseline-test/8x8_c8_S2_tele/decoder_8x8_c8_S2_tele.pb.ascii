node {
  name: "x"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "decoder/dense/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 128
          }
        }
        tensor_content: "\034r/?(\016\260\274s?\347=8t\313>\202\025\204?u\262\246\275e\206\007\277\034D\\=\3076k\276.D\222\276\373\272-\275\371yI?\346\223\200\276\235c\327>\352\022\313>\355R%=\000q\324=\001\234\370>\002eE?\177Y\330>\354\021\310=\233\3371>\321@\223>n\212\200>h\002\353\276\017\344\033\276\377\320\023\276\270s\031>\256\322\023\276\304\013\307=\350I\034=X>\303=\003lA?s\016\261\275[\324S\2779\347U>\250a\n\277B\312m\276\313\030\257>\322\202\311>\253\304\n\275%^\005>\333\275\016\276\335\363\305\275\333\034\034\272\3129\206>d?{>\222\240\203\276\370\\\233>\362\356\251\276\326\313`\27476\265\275\230\242n=\202\0275>?\"\211><8F?\000\216\332\277/\266\231\274J\332H\276\004f%;\336@0?-\345\263\275Wc]\275B\254b\277\212\344`?\002I\016?\262AV\275,\302{=\236\320\256>N\217Q>>Xa?\221\214\020\276\025\032\204=m\007\215><\000t=^\317Q=4\271F\276\316]\337\276w\356\226\276\372\344\021>\304d{?_\305\n?\264VL\276\327\240\003\277\205\330\357>\266f\262>\024\275g\277+b\245>\026\324\307=\035\373\003\277\275x[\277\033n\227=M\202\r@\004C\"\276\276\270g\276\027\3235\300\364\350\321\275\362\022\212=\241\230\n\276\243\177\202\275\001\345\377>\300\177\304\276\213N\356\276\271\325\r@\001\210<\276\371\266\034@\341\214\251\275m\316\247<\322`\341>\273\205\340=\001M\307\275\033\\}=P\310C\276\376\016\373\275:kH\276Bv~=\221\037*@j\016{>\022\327M\277a\\s\277\264\375\222\275 e\254=\316\225\'>h\232J>\024\267}\275\274\271\001\276\350U\357<~\227P>\301&\022>\221\3345?O\003w\276\035-\001?\\a\300\276\245\365\n?\312\"B=6\307\312\274\002\214\217>B\344q=V\021j\275\360\344\213\277$\312\'?\363\324I<\014 \247\276@\373e?\260\004\353=\001\247\013?\322\310\224\275]\331\317\276\020(J>\307\351N\276\2023t=\270*\367>\002@\336\274\030~\004\276\220gO<8\364t\275FRh>\212\214\340>\024N\n=\022\300u\275\235\005\203\276\251\254\324=\322I\006?\001\241\325>f\310\354>\221\277n\275\267\310\272>\307c\334>\256\201\r>\211\322a=\202Wi\274\300\373\254>W\250\036?\265C\212\276y\244\024?p9\330>\310\256\307\276\255\346\344=\022\256\206\276\371#\300\276\325Y\022?\255\021\000?\221Mk\277\364)\226?q8\r\276\"5\365\276I\367\231\275C\n\310=\2024\206;m$\363=\346\326m>\207\370#?\373\025F\276\362\373:\277\356\310+\276\326\004\356<\244\\/=8\262\306>\321\013\307\276\235\272w\276?j\t?`+\367>a5:\276f\273/\276l\027\003<v>@>\222\370\362>\017\230\233\275\357\214\036\276\203&\313>\301\210\"\275\007\234\361>\375\205\246=J\264\220>!Y\004\276f\343\224=\000\006\226?\224JN\276\037+\013><i;\276kO\373\275\263,Z\276*:k>\221[K\300kC9\273\000\364J>Z\2258=\036\336@=\026\235y>\0046\030\276\263\270\000\275(\315\245?{\272Q\275\247]\351>\375\351Z\275\342t\217=b@\272>\347\353\351>\364\030\267>\323\210\337\275KT\317\275+\342E\276\351u\016\276\212\252\217>\240P\345=\315W\267>\243\017\362>\312\244\342>\010\355\032\276\370\215\246\274\240[\034>@\013\320;p\006\306=P).\275\254\271\313\275\014R\271=E\351\023?\344\335#\275\001\336\200\276D\030\210<\226;R?\"N\023>#\212\315\277\r\021(;\033\203)\276\033(\217\276\224R\324=\261\214A=\377\272]>PX\202>\3575d\276\343j\001?\357\227\277\275B\017\201\276\203\320\250>\237\215\254>3K\361\274\325r\243<D\262\256>\337)\321>\230\355u\276\367\225\031\276x0\307<\325@\242=\275k\223\275\374\217<\275\025zm>\302|-=W:d\275\217Q\214=\275\356\267\276NT\326>\277\245\342>\307IY?]\270\227\274\214\351\207<>\366s>\303\361w>\3040\031\276\336\337p\276\322\'v=f\356\021>\356Aq\275\335\343\375\276:\021u>\365\354\235>*\371c=)2\223>z\347W>\340gF\276_n\004?\356_\220\277\344[\330\277E\002\016>J\242\327<\006_\317=\355s\301>\314\277,\276\000\362S>%\024%>\202\033\253\277L\253Y\277\253nF\276X\0026\276Y\346\256\276\r\3767\276\257\315z\277\231\233\212\2764a\270?\026\026\014>\203\340\266=\021!\336\274E\306\275\276\016-\371>\337\253\013\274\310\314\n\276E\303]\275\001dI>\250\032\222>\001Y\374=\261\320\205\276\3702$\276\352\352L?y\236\220>/\250\337\277\344\216|?\244r\243?l\334r>@\215n\277\377\305\316=WY\333=\371\254\217\277G\201\235>3d\370=\013\314\030\275n\322x\276\027\026\276>\241\355-\277\273\314\350\275\241G\353>\357\032V\276\023K\207\277\263\021S\276\366\274\213\277\t\231)?\025C\205?(\331\215?\263\341\375=E\222\005\276h\343\317<\2438,\276\332\201t>\016\353\302\277.lh\276\r\200\033@\334\213\034?G9\313\275<\320\n=P\366d=\270\310\336=\214)9>\374\222O\275h\022\267<X\265\332=D\374\374>1\226\323\275\372\360+\275\242\334\336\276\205\tB>r\331r>\343w\363=\242\210\213\27635\371\275\201xe>\375\021\207=}^\000?|\n\n?\217\324&\275\200\036.\274\014\361m>\n|7\276/\237\232>; b?7\257<\277.\t\005>\371\345\311>1Q\257>\333X_\277hG\301\275\356\241\326\275\014]\343=t\216\322\276T:.?\362:(\277\342\266\000\277\t4w\275\336\374\355\275\356\025\216>b\224\033?\253Ek>w\347\317>\347g\211?;\313\014\276\000\347\225\2766\004\304>\263.Z=TY\332\275^\177\324>\3638b>\330\201\213>\263\224R>T\277\210>\031\226\320\275\031Z+\277@\300\212\276\363,\203\274\267\315\t=|8\362>I\376\025?L\266\372>e\224\006\300\275)\347>\302\241\225=sl\230\276E\017\'>\247*\343\275bS\201\276\361\217\036\277\225\342\004\276\224\2508>\'Z\r\276\206OO\276\350\365g=\307\300\013>|\004\230\275|\020\266\275f\326D\275\333\214T\276\0045\356\275\002Lc>-\265R>%\235\022=\372M\252>\362\267#\276e\243d?\365\325\326\276\036Z\314=D\320\033\277\255t9\276\017\250\265=\364,\343>\223go>\002\234\303?\031\352\203>\342b,?\200\302\227\277\243T\'?\255\320\025\276[\350\213?\2502d@\tD\350\274X\350I=\352\000\032\2761\346\261>\013\307\034>\2515\241\276$\\:?\'a\031\276\252\241\035\276$+\272\276~C\215=p\326\241\276/A\344\275yb\305\275>\317\233>\220\360\002\276\235\254\241\275\213-\004>F^\356\275R\025#\2773\311~>\027\377J<O:>\276DP\r\274D\366A\275\010l\026>\306pK\276\332N\013>\250l3\276\256$\'>\211\217\351\275.\205\004\276u\330\002?\177I\315>Z\323H\276\023\235\013\276\2707^\277\023\337\004?Q8\307?\327\214v\276\314\346\323=54\262>\302\226\365\275\257\220Q?\352\374\204>{,\000\277\221[\036\275\000\311f\276\211g\353<z\211\024?\226#\326\276\235\231u\276 \004\337>\237q\t?\335\\\312\276-\373\205\276\202%\016=7\333\377;\270\315\247<(\3129\276\361\251#\277\254\307L?\037\267\016\276\267\372+\276\t\240\002\277C\240\221>G{<?\t\030\211\275\344E\027?)\357i?\330\372:\276\265\214\241\276\327,\215=\215\335d\276\366\305\305>\340^\225\275\3042\266>\276\353[\276\230\201\234\275e\346\305>\240\246\n?\300w\337>h#\337<\374\004\241\275w\005\r?\2666\337=v\020\301>\261\257\253\276\265\366o@\233cT>\3674\331\275\r\312n\276\217\210^<\010\033\323=b\006\002>\340\006$\276z\254O>\325\350\276=\366\206l\276?\000\027>\363\254\017>HB\020?\304\371\311=h\314\275\276\261\2704?3\017\224=\000\200\200\276gH\032>\333\033\200>\270b\006?\316\246\317>f\250;\276\313\205r\276 \271\331\275\237\301v<\031j\203?\245J\261\276:\314\004?\360\377\202\276\3570\016?\335x\314\276\355\3029?\202F\353\276<\242\331\277S\264\013\300\212\271%\276\005\273+\277\222\256u@\244\345\302>D\014d>\noc\276U\225*\277\355\343\347>~Rd\276?\356\306\276\250r\014@\344\0171=0u-@\272\2737=sc\356>:\265\003?\3523|>U\372\373<\367\022N\276z\322\200=\261`\243\275\357q\363\275\020\240[=\257\250\274?\304y\346>\225\3526?E2\335\273\300k\n>8*2>@S\006\276\020^\032>L\016\'>0,\252\274\314\263\000\2768\315Y=\311\204\010\2771CX\275\266\357\r\276\226bk=\264\n\303\275\273E\n\276}\310\031\2773\035\'\276\026\375\r>\346\345\362\276\235G]\276Y8\305\2776>\004?\251\330n>\'\026\005\277\001\3258?\305j\251>\002rO?u\234$\276\365\253\361=Z&!\275\341\220\001>\240\235Y>cZ\310>\234\240k\276R\235/\276\000d\220=\n\002g\275\204\024\210\277#\266o?\310\310\224<\n\036\344\275\370\254\350>\344l\332=v\251\365>\033\251\222\276(\307\372\276]\320\246\2764T\220>;\331Q>\004.\307>\277\004\351>|\322f\276\225\204\207=\214t\367>XY\014<<\325\014=\271\212\024\275\325q$?[\247_?U\272`\276\016\242\274\271^\312\"?\203\242\340=\221\030\323>@<$\276\014g+@\261\333\255\276N\311\227=o<\022=\350\324x\275u\275\337=-\223\n?\351\267\017\276\233\224\037?@/\341=\026\305*\2768r\001\277\256\240\000>~\253\023?\362\261\332>\325\037z\276\030\316\261\277\377\240\223=\212\036M\276A\004\330\274Q\023\277;7\317,\276\010\334e\274\275\254\352\275\331R\361?`\340\213>4@,\277N\263\226\2766T\350\274\345\352c\276%;9\277\247q\250\275x\311\230<\305jn?\321`m?Z\306\301\277\024\310\225\277.\177\036\275s$L>\253\236\364>\202\267\025\276\332(\252\276\010\342\t>p\\\201?&\346\231?\373\245\202\277\':\215>f\2111?h.G\276\217\273\205?\306\233\306\274|\322@\2773\245w>{`P\277\306\006\243>\370{D\276Q\004\311\275QV\001\276f\377_\276mS%\277\257\020\336?u\351#?\301\365\300\275\034t\007\277x\346\233<\311\330B\276P\244/\275\357\033B\276\216\246\304\275\013A\276\2754\216\025>\3646\014\276]2\202?;\336\314>\004k=\276gc\r?C\020\255?\254\002\030?\373w\365\276\357\236\017;~\341\310\274 h}=|\301\335\275.\200\332>\324K\357>Ix\023>\251\231i\277g\276\225=O\256]\275\235\234\036?(k\260=\363\222k\277FW\346\276:S\333> \262\233>>\200\200>\210\025\025?3\216`\275~\215E\276\370\2177\276.\254e?%\023B\276e\304.\276\030\014\242\275\021\216\213=\316:*\277w\346\007<\365|\212?\014o^?\023/\372\275\222\356l>Q\034}>\216\235\302\276\030\033\265\276\367:\244<\010\334[>\261%\000?&\377\227>DR\233<\214\306G\276\022\363\207>tq\320>\337\r.=\325\323<>w\204\305>x*\263=\267\241\333\276?\006\'\277\261\n%\277\031\200\336=Y\032\303\275\353[0?\2374\231<\257\240T>\010\377*?SF*?\022\014\307>MA\">\364\021\307=n@\030>\2170S>i\226\021=\374\221#>is3>+\365\230\276\305n\307\273Ht\333;\253c\266\276\214\004r\276_\304F\275\000\020\234>\322\217\307\275\272\2410\276 \021\257>\031L\214\276\363\263u?\n\353.\276\\7\233\275\372\251O\276j\002e\276\354\234\265?Nn\t\277\224\032i?Y\022\016@A;\247\277\321\374.\276\r\307v\277\251\213\017\276\242k\"\276\257x\200>1\226\032\276\3256\310= \244>\277\342B\325>\361e;?\030\371]\276\027\010Q\276\2311\232\276\003n[\274n\330h?8_)\277\265\016\377\275\204\301\027\2772_\366\271L\254\345\275\216\303\220\275\276\203|=\377\355d?\004\244B\276\300\206\215>\345\036r\277\331\226C>\022B\263\275\330\220\352\274<%%>\276\234H\276>\236O\276\250\216t\275\000\216\370\274f\221\215\275yse>\373\351\200\276t\006\236\276\036\335o\277\243\331\277\276\001\203\343=Bnw?\323\016S\275:\202\212>I\246\333>v\022\035\276\201\353\254\276\331T1?u\322~>\345-\305\276\275\321O>Y\222\224>\377\354\244>\234mR\274\351\254P>\"\316l;\371\rK\275^?\025\276\254Eh?\010\327<\276\177\226\034>\350\304G\276\234\353h>\231\035\370\275\002I\021?\357\227\202>\251\370\361;\366\310P>H\216\206>\207\tK?\230\037H\275:\003\002=:\222O?o\212\352\2764=\361\2767\212\226>k\225\256>y\004\267=\273\'\270>\265\246\267>\3024\031<\225Vw>\367\0329?\004P\200\276\320.\265>\226j*\276b\374\322\275%7\\?\255\242\316>\345\224\362\276|x-=\221\212\'?\217\376\025\276\331S\210=\026\332W=\272\263\261\276x\036:>;t\343>x:\000\277\371\234\211=\327\323\030?\211\346\247<\223\306\310=Z1\370=\007\220\207\276H_\214>m\351\352<.S6?\267\200\332\276\320\010\022\276\304\251\000?\246(|=\001\220\r\277\2363v\276\024}\026\275W\322z>wF\\=\344>\261\276\003C\347\276\255\375X\276\251x-\276n\217_?\010\235\007=\347\007\221?\233@\254\275[n\022?\264z\355\277\227g\331\276\357\314\330\275\360F\013\277\261\350r\300\306\034\310\276\032Q*>#\003\357;\233\200/\276\r\334\336\276\374\2705?y\325L?\242\303\226\277\256Q\023\276\331\230\262\277i\242a\276\014\3300\276\326\326j\275\337\252H?\253(\266<W\355\\=\231<T\276\"H\230=<\305u\274\240(\212>\025\253I\276\016\212+?\336\212\222\276`\001\275=\010w\266=\335Y\256\275\020\360%<0\305J<\276\307C>4$\350=\266PP>\346\020\031\276K\036\335>\371\226\331=I\305\267=U\217\220\276)\n\221>\275\221\264>i\313\005?C\367\\\275E\254|=\021\272\230\275\333\375\023\276\302\366l?\213\226\307>\211bt>}\'a\276\027\366\300=\354u\241<%`\217>\200o\021\277\357#\207\276:\303\233=\230\246\001<\204\322\351=TI\217>\203\253e>}\270\017\276\'\231\374\275\030f\312\274\305}G\276\254\356D?7]\023\276G\260\366\275b\216\222=D\335T>\202\215\334=N!a>\314\201\245>\302\003\307>\200s\257\276\256\272X\274\334f\017>\271\201\331>I\034\265\276\033\361B>\236F\275>\031\303\235>\351\201\235;+SH\275R\327\231<\322\213\032?L\200\207<\367\206\232\273\225\337\270>U\204\342=\304\321\203\276\245\233\307>\310\344\023@\331\177\324\2767W\276\275Jl\035\276qQ\036\276\312\262\014>\317\255\346>\013\321\362>\304\271J\277F\3771\277\r\235\007\274\261\220x\276\260\237,\276K0\020\277*\347\'\277XC\037\2763\006\363\277\364\3717\276\n=\253\275\003\265\274=\030\326 <\006\272\322\276?\"[\276&\372\030\276\023\325\205?Z?\245\272,\275d\273\007\275)\277h\037\376\275L\325.\276.\336Y=\207\310\201\275\022K\270?\254\263\025?\252\365\177?\336O\251\277\353!\002\275\006\334\210;\214_x\276\212\2135\276\327\334\301\276\030\265\205<P\226q=j\366r?\315/\213=\356)\224\277d\304\360>rK\205?J\n\234=&\320\257\300T\306=\276\222\361^\277\021\362\330\275}\264h\277\205\2377\275\320==\277\215/=\276\225\003\027\276\221Xf=\2747\033>\305\021;\300\177\371\227\277\370\024\242?\271\275u\275P\0070>\254\350\017\276@s\017\276py\224\274h\264\306=)\274/\276<\177\313=\234\243\220=\200\217\207\277\304/-\277\r{\024\276):\211\276\205\213W?\216\307\262\276_\371|\277\222\341c=vz\372=\343\262\216?i\202\335\275\322\236\300\277u3\264=\312\232\014\276i\2615>\372\302\211\274\203\340j\275\231Y\370=\376\215@\275\010\261 \277v1\201>m\366i>\265B\350=<\234\262<\307\"\016>\371\307\260\274\213\372\320\275\256u\177\276n\016\323>7\324\212>6\212H\275\261\314F\276\326\034T\276;\327D\275\037\325\203?_\301\r?k\347\313<6\347\205>\223\2430>\333#\002>\315\300\031=\252~\200\276\025\302\023>\177v\315>^A\'?\335\367\336>\215\001Y\275(\006\006?\342{C>\246x\001>\271Q\226\272-\207t\275\266\027\014?\306\225\311>\372\r\262\275W\367\334>S\\8\275?\342\300=\2462\346\275\201\255\314\274\257F\000?\212\374`>\377U\312\274+\360l?\331ei>!\242\246=\231O\376\2741T\026?\022\371\n>MO\013\276\210\311\234>\377\351\215\276\263\037\245?d\301\376\276\014C\310\275\307\252\224>\321\372\237>\025\240\237\276\344\303\371=n\347\306<B.\200\277\026\263\036=\024\231P\276\350\352\305>o\ti\276\302y\353>q\010\243>\263\325\001?=\266t\276\235\211u\275\005Y\010\277o\246I?\270\266\262\277\337\353\001\276\230\242:\277@\342\020?4o\032\276\'O\020?\344\206L\275D\204\212\277>GG\277Z\005%?\\?F<\337\355\326?\275eR\275&\363I>yI\002\276\311\'z?\026\240 >l\375s?7\014\310\276\233$d\2752\221\202=x\000\332\275e\001\r\2766F\367>\247\331[=\357\001\270=0&\035\277WFn>\216\252\034\276\221r\355\275\373\037\317\275\006\213;>J}\216\275t\034\020\276\354\004\016>\376\337>>*\266\255>\223\010\311=F\2206=w\255\271>c\253\313?\031r\361>\227\261\303\276\240l\025\276\302S\357\275B\201n?\247\331\371\275\211\313\221=T\305*\274\366\224A\276\225\3523?^I9\276\027<\016\277\340,X\276\010\304\013>\013\025\n\275;\020\220?\245\274\200=[\330\224>\316\370!>\205\nl\276+\276I<\303)\022=\314\023\245;\330*\034\275\276v^>\025\335V\276d\331\016;\331\033\370\276\357\031\314\276L\'\004?\254\004\031?t\361\207?\302C/?\371\\W\275\235z\206\276.Mg<\317\262\316\276\303\022:>\027\221\020>\016\342\363><e\031>@\254a\276&\340\223=\221\216\027>\366f\305> +m=\372\226\221\276@\344\316>\214\220)\275\245\323B\274\330\370\000?<\371p\276M\303\211>\303\337<\276\374i\365\274`\316:>\222\211\320\276\242U\336>\013\317\t\277\256\336H\276{\t\353\276\033\354\020\276\270\364/\277\003\346k\276\2532\022?\345>\353\276/\206D>\256:\232\277;<1\275\212\211\225\275\031\373\211\276K\tI>\342\ng>\310\335\027?Z-\004\276d\031\267>\273\370O>\251\204[\275\034\003\375>D{%\276s\232\332\276\324\323\371\276e1\331\276v\"\030\277\222~\220\276\205\223\324\277K\006\303\276y\353\025\277\032\032M=P\226;\300\331\035\016\3004\n+<\304\306\235\276\365!\001<\227\364\253?\343\363b?\255\340~\277F\322\016?\360\006\007\277\275N\231;zuV\277\024\257\254\273XW\034\277\010\274f\276\\\374G\277y\035\024?\370\227\034\276\333\210\013>H\006\250\275Z\324\023\276\327\220\346\275\370K\377\276[\203$==\004\354?~0_>\233\025+\276\260\030Q=\000WU=\010\311M=\025\'\'\276\360K\312\274(I\342=\250\332M>\322o\225?h\005\224>,\241\r\276z1K=\020\2728?>\366\306>\324#\007\277\324\017\203\276\352!\307\276\203\352U>:\303%=\212\251\"?0\352\317\275u/\365=\263\376\271>*\320!>\255r-=\213^\t<?\347r\276\007\201\241>d\000\026>\240\351\010\276\357\021}>\300\224\002\274\327\205\024\276\023F\236=?n\362\275\270\372\210\275\222n3\277\306\021\274>\\\256\200>\006\026m\276\372\255\223>\245\247\317\276\013\017\267\276J\242\201>\324\336\353>\315FB\275J\331\025\276\345Z\241\276{?\035\276r\3247\2745\330\013<+\223|=]\205\304>\216\2620\276\201!->k\030\000?{\270\000?<1\275>\360R*\275\373\267\007\276\025VZ>\2008\331\275a\322\205>H\2664>\366\034\010\277\207o\354\276\037<\335=\021\024\025=\2673S?\030\370:>\313\353\200\276\326*\302?Yoi>\000\316\210\274/\004z\276\240\354!\277\351\027C=\007T\037\275\272K\276>\222D\010>\367\203\271\276\0360\300>\247\027\202=\242!=>\025\333\207=\3769%\277\305\303\276\276I+6\276\247\311\261>;d.>n\242\005\277\275q\266>\367\023\215>\364\301\355\276\t\254\313\276\365D\212\276\315\013\223\277\346]\023?\332+J\276uF\317?\337\004\177\277\362$\001\276\322G\373>\276\227\024?\337%\265\276\232\371\234\276\022\372B\276C\203\\?\336~\221?\000\270M\277x\271i>\030\021A>M2\377=u\223g\277\002\254\322\274(\007\251\277\347s\025?\321\326\202>\371\002B?_\211=\276yE\207=:\246[\276\340\0263\276g\223\206?w\246\345>7\to?\320\273\307?\231\214\312\2755\030\036\276@(B\273\3074\016\276\256^9\276\\\215\221\275<\370\367=.F7\276\343\276\354\275vG\002>G*=\276\262\364\231\275l\351\337>\352\231\035\277-\334\230\276\220&\334\276\235H\200=S;\032?\364\206>?\233i\322<\310\020\365<\325\257\004\276R$T\276y*\010?\001\245$?\223C\025?\241H\240?\255\'\002?F\003Y\276\364h\222>\360U\000?\353P\204\276\212)q>\257*\303\276\177i\364<\316N\t\276\351\340\014\276t\177\025\277F\005,?\2010\275>c\300p=B\t\266>Z\327\363>\247\327\001\277\242\344\324\275D,U\277\263\035\232\276\021\266%?l\"\r?\212\207\233>+\265\335\276\307\017W>\034\256\274\276\344\246\007?I\023\247={a\000?\353^&?\333g-?tf\\\276`\3628\275N0\355\275\341\024n?\010\006\315>r@\320=\002\273\276>4\270\231\275\303A\t\275)\312\254\274\352\241\032>\376\266\203?\306\323~?\363\232\275\276\313\347u>\256\203\202={Yr\275\223\324\343\273Z\261\204>A\353\267=\005j\030\276\252sq=\246\240\346=\204D\213>\303$\001<\340\225\030\276\252\005_\276\224\211\016\276G2\237\276\177~!>\234\324\342=2\213J\277\302c\007?\205\020$\2766\316\202?\302%x>p\215\216\276\354\222\355\274X5\256\276\002\354\025\277\022\310\030\277\032\330\314\277\300\305f?4\301\241?-1\364<\351\r\213>\000(|=\320\375{\2758)k\2746\211\177\275\305\037\230\276\233\320\343\276\302\010\306>\273\247\236>|Ve\277U\"\371=\325\265Q\277Kn\231=j\352\202>w\206\205\276\037\227&>\024\367\246\275\257\014\206\274P\277\276\275\217\312\221=\233\264~\275\245\200E?\373\256$\277Na\202>\211O\276\277\266\327T?\362\010\t\276\036\207I>\360\243\272<\212\006K>\240L\210\2730b\374\274|1\341\275\030\336Z=\236\203\"\277dK\275>\022}b=\254\356\007?\r{\033?)\316`>\007t\031?\035A\250\275).\007>\335\264\262=I\334\235\274LI\007\277m\002\232>\264\370\212>/f\337\275\01340=\206O%>\327\271\331>=;E?\325bA>r\362c>>\270\032>\221\022\230>\336\236\350=m,!\277\0143J\276\230\3501\276\002I\225\275#\273\t\277$\223$>\375\322\">\301!2\276\343\374\307=\032\206\310\275o5L?\237\314\361>tFo\2758\033\344\276\300\361\276>\232\342/?iti\273\257j\304=\326.\262=\005\231\232>\222\236p?\330\302\253=\342FD\276\365\276W>\354\357\025?\217\033D>\210\231\304\275\262\340#>\tc\247>\322\335\322>VV~?v\263&\277\366Q\341\2774\022\236=Np%\276u\310\275<\2628\022?\204\036\277=\021\030\230=\010/N\276!k\351\274\3477Y\276kO\036=+=\307=\245\005\036>\311TL>Q :\275C\203\211\2760\377\200?H\016(>\346\321\334=\317%\215\276\375\223g\276\320q\364\276\333X3\276B~\233=]X\200>w2\217>\003\265&\276P\264\021>a\225\377\275=r@\276Y\034\202>\026\000\240\276ib\336\277\316@G?\217\034\205>\263\264m\276\310\255\243\277\026\243\"=**\307\271{\004h>\246\303\375\276\nL\310>{\037\324\275l$\006>;\317]\2763R\210>\342\374\200?,+:=\017\265\324<(\024\265\277\351\024\261=|\266\001\276j6\006>\3632\214?\t\241\322>\031@\010\276\252A6\276\002nR=\236`\001>\365\002??v,p\276\354]\241?\351\373\206\276\023\242:?\240\277\013<\"U\t>\333[6\276`\001\317<xR\365\275\000\244\0029H\2035\275j*&>\232\365~\276N\020\003\276\032\304\245=\265<\257\275b\313>\277\317\304\037<~s>?\326\006\214\275\350_\013?\211\375E>k\330K\276\3629W\275\273\"\363>Qr,\276\202\352\213\276\0132)>\351Kb\275\r\306)=\257\314\"?E\241\245\2763\301\331>9\300\234\275\004/\202>{\204\320>\037\276\210\276\200O\322\275\246\353\016\276\r\r\000\276\351\302\341>\363\033e>\257x\202>\374.*=Pn\"\276J\370\373>\373\350\022?\243U\341\276K\331\313=\013\024\026?\037t\263\275\005\210\027\276\3470\010?\007TJ=&lK>\\\016\247\276\340[\342>\177\334\257=\203\022\037\276im8\276\240\275\315\274$\025v=\263\r{\275v\376\303>\335\363\206>A\376~>\305J\013?\220\355l\277\220|f\300\222\\\373\274=\236\245:\224\216\035=\213\0311?*y\274>\030\020\306<Y\241\207?\271\327\371<!\265\365\276\254\022U=\013c\267\276I\314\023\276\226o\357>\360M\233\276\367\315r\276\343w\363\277Z\177\304\276N\356B\2753\365\016\276a-\213>\271\342X?\331y\032?>D\021\276\034g\016=\316\231\351\275?\335\370\275\324L\010?\200\032\003\276I/\202>\373\016$\277\210\236\274=U2\333\276\331\2145?\243\333\212?j_\214?\310q\317\2766\013a\275X\317\240>\245^\272\277\314\321\001?a\217\217\276\007<\341\275B\275\013?\036\202Q?\347\364\260\277\217\223\353\2751b\257?!q2\276~+\245?\324\262\277\275X\364\013>\312\354\332\275\\\350\333\277\215L@\276\305\246r\275q\262r=\210\307%\276\315\304\212:3\002\227\277N\030?>\313d\303\276\311`\272>-2A>&O\210\275\2521\027>\3640\273\275$h \276\244\377\302=\352\354(\276`\'3=\024\313\256=[\2678\277\200\310\307\276\n\337\345=\266D\320\273}I\363>j\362\244\276\375\355?>\202{\364:\010\345\273=?^)\276T\243\254<s\316\217= @h\276|\366<>V\177]>Wy\260\276Z\265\013\276KI\262>\214N\027\277e \003\277\017k\263>\020~\212=\013^\230>[\373\362<\002<\266>\363lS=\347z9\2767\376$\276\374p\234<\307\346\211?q\177\263\276\255\010\252\274|d\214>|\256\356>\312U\226>\335\277\030\274\204\200\327\276\251\307\363>f\325\200=\2329\275>\023\214\265>x$W>\276:\255\276[\232\002>\260\017&\274y\235(?w8\335\275\257\232\005\277hQ\261<\035\r\252>5\202\t\276C\0213=\257\232\177>\355\236\263=\234\227\207\276\242\004\250?\210Z\360?\240\330\021\277\302\252b\276\037\021\364\276:\r!?\341\216\217>E\347,>~\233\222?\362\314\031\276*H`>\nm`=\354\256\003\274\350\335\244=(\215\224>\264\212\276\275\213\032\245\276\332(\032?\217l\342\276\225|\302;\343\364\217\275\275{\272\274\"\261\233>\272\250\227>\272\214`=\303\331\237?G\023\023\275i*\325\274\242Y\205\277\222\254\375<\376\304b>\004\246\251>\257\261\346=\"\224\n@\03077?\303Vs?\235o^\277\337\332\025@`\006\014\276?\213\356;\335\355\t?\200y\264=\246\021\024>\247\224\370<\263\235\235=\316s[\276\243\231\314=\276\323\022?\361\002V\277\261\343\317\275w\240)?\377\367\r\276\265f\335\274\004\320\243\276\346w\272=\375\357\313>J\243\253=#\275T\276 \357\314=\003\022\027>O\247h\277-D\001?\023\300\341<<\211,\277\026nf>\0002\311:a\230?\276v\017\006>h\242o\275\270\256\032>\022\\*\276\260k\251\275\210t\300\274"
      }
    }
  }
}
node {
  name: "decoder/dense/MatMul/ReadVariableOp"
  op: "Identity"
  input: "decoder/dense/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/dense/MatMul"
  op: "MatMul"
  input: "x"
  input: "decoder/dense/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/dense/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        tensor_content: "\217\267\311\277\236\246\350=\271\037\321\274\340\277\346\275\227\034\374\276\034\263e?\362\266\006?\000EF\275P\017K?\007\366%?\225G\365\274>\202\332\276c(Y\277\267\232\244?\3048\323?\260\020\313\275U\254\177?\021\236\322\2779\242\307=\023\315\236?\255\353\226=\214\257\347\276\263\277\"?\'\305\025\276\340G\206?\\\204\254\274=o\014\274\200\254=?\004\312-@?R\020\276\361\253\267?\353TA\275\246\224H?\333\347I>\342\226\016\277E\260i?=\276\311<\'eo=\272D\223>N9\017>H\336\277>\317\273V?.\025\340\276;\363\362>*B\r\277\234\213\305\276(\n\305\276\222\356n>1\364D\277\203|#?%8c\275\2717U>j\r#\277t\032\321>{\n >\357,\251>\256\t\306\273\017\257\032@\263\305\017\275\264\333\211?&\t3\277\261\256\033\277\005SD?\370\332\034>\277\376\352>\350Q\361>\251\332 \275\016C\\?\271<}\276\325\325b?\245\276S>\272\027\036?y\276%\276\260f\254>\305\215\032\275r\257\223\273\345\017\336?\035P8?\370\346 ?\300\232\367\274\240\330+\300\240\203\262\277\010\254\306\275\257t\355=_\014\311>c\323==w0|?Y\261\256>QB\201\276t\363\206\275\324\032\236>\206\036\254?\263z\252\277\276\200\002\275\030\362\220\276\242\253\363?S-\002?t\370\232>FY\004\275\313\233\254?D\036\350=Q\024\035@\216M/\277\361\003\257\277\226\233O\274\275\225\036>=2\225\274\002\312\235?\260\335)?}r\035=\255a\t?\301T\267\274\317t\372\273p\262\305\274zC\263\2749\273\372\276O\277\317\277H&l?\005\350\225\2778\211\032?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/dense/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/dense/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/dense/BiasAdd"
  op: "BiasAdd"
  input: "decoder/dense/MatMul"
  input: "decoder/dense/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/dense/Relu"
  op: "Relu"
  input: "decoder/dense/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/reshape/Shape"
  op: "Shape"
  input: "decoder/dense/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/reshape/strided_slice"
  op: "StridedSlice"
  input: "decoder/reshape/Shape"
  input: "decoder/reshape/strided_slice/stack"
  input: "decoder/reshape/strided_slice/stack_1"
  input: "decoder/reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/reshape/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/reshape/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/reshape/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/reshape/Reshape/shape"
  op: "Pack"
  input: "decoder/reshape/strided_slice"
  input: "decoder/reshape/Reshape/shape/1"
  input: "decoder/reshape/Reshape/shape/2"
  input: "decoder/reshape/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/reshape/Reshape"
  op: "Reshape"
  input: "decoder/dense/Relu"
  input: "decoder/reshape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_transpose/Shape"
  op: "Shape"
  input: "decoder/reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_transpose/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2d_transpose/Shape"
  input: "decoder/conv2d_transpose/strided_slice/stack"
  input: "decoder/conv2d_transpose/strided_slice/stack_1"
  input: "decoder/conv2d_transpose/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2d_transpose/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/stack"
  op: "Pack"
  input: "decoder/conv2d_transpose/strided_slice"
  input: "decoder/conv2d_transpose/stack/1"
  input: "decoder/conv2d_transpose/stack/2"
  input: "decoder/conv2d_transpose/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        tensor_content: "K\330\332\276\350\023\000=\035\352$>5\342\"\274!\204X>\343\353\030\275j\2421\277:\351\340\276\024\311\271>)T\001\277\362Uv?\374\304\027\275\210g\277=&uX>9\333\325\274\0033\333\276\300\340$>\264\236a>\246\367\261\276\0019\313=\360\252\210>\353\333\200=\332\255w=\257~\306\275B{\244?\234\335h?\000\321_\300\032I\373>\307_\344\275\310\261\227?\026\304+?\252<\334\275\307\202s=\033W\222>w`\020\277\235\t\224\2754dm?j\263\212>\035\370\234>\243\016\220\277V&\276\276w\212\037>\rLl?\201\006\232\276g\367\220\276\201}\000\276pz\231\276gh\303>\223FR?\227q;?\261\333\244>@:\201>\330_\250\277jt\255\276M2\255>\375\267+?\005\235\235\276\026\272\210\276\025O\010>#\266I\277\320\321=\277\254\265\200\275)\203\367=\333`\363>\017\262\'?\247@\207?\362\020\275\277V\306\372\275\364.t\276\215\265\273>\202l\224\276r\350\235>\326\243\207\276\017\244<\277\372\rD\275\032\352\336\276\304\307V\276yM\024>\244\371\354>\245&\036\277H\366\324\275!q\257\276\302\023\017\277\356\021-?\351\2442?\007G\373>\33368>\025\')\277IZ\271>\315]\226?\006\211\376\276x\201\250>\265\356I\276\233QD\276\307\252\016?\'\274\004\300\020s\336>mR\032?a\374\364>-~\212>\242\357\243>\274~\362\276jc[?3T\216\277_\332\264=\267O\n;\346\377\030>\204\354\177?(:\n?V\005\\\276`A\241\276\206\n\264>\t\177(\277\3525a?\021\345(?\234\235\r\277PRs\277\261LK\277\335\200P\277a\264\233\277+o\264<\206!\034\275\345:Y\300\206\223\'\276\202\262\300>\211z\273\276\247\213f\276\243\n\273=\341\313j\274\220\276\226?\335\365\243>\030\203\266\276\343\326\\?\246-\234\275\351\261U>m\320\276>\202\025\367>sQ3>\354\351(?Q]<\275As\355\276\337o\271\276\271\323\014\277]\217\364<\025\007\234\276\215\244:\2767>\263\2750H\327>\223\227\225>\226I\001>\007\203\233\272W\311\204\274\205\026\201>\342 \255\276%\217\350\277\204\272\214\276\303\205\342\276\270\315,>\275t\331=U\250|=\200g\035\276La\360>\377\001}\277\257Sx\275\350h\345\276\020j\027>\346\003\204=~\354\010\277A\351\201\275\037{\037>\333\341\202?\353\251\"\2762\013\206=\253\303\305>\363[v>\007\3236\276\350f\205>\375<v\277\326\030\025?|\272\201>\022\364\277=\262\030\312=\362\322\035>Y\310\276>R\210a?B-G\276\320C\226?\236\216i\276[A*>+\300\007\277W\255\337\276O|\200<9Qo>\373\031\236=\270\017S?-&{?\026\365\324>k\266\023?\234T\370>Rg\301=~\374\010?\032p0\276\037i\t?qi\274\276\224\232{>\"w\252\2764`\255>_uL?(\343(?\344e\212\275\277N\327\276\0105\r=\007\270\310>z\316\203\276U\350\357=-\013&\276\227>\366>R\2267>\251\026\210\277\265\357 ?4n\005>$\267!?zw\027?\034\303\"\300\n9\006?\\\332\005?\357\337q\276\200{\217\276\031W\025\277\007\273$?\262\000\220=\372\314\217\277\230\203c=N\362\246\277\266Sf>F\366i?\376\223:\276\252\322!\277D\213\332\276M\327\325\277\221&\010@ \332\377\276U\225\264\277{\310\244>V\216\024>3K\002>>\030\215\277\213b!\277\255\003\243\276b\007\021\277\2406\252\276\0143\352>\366\024\030\277\205*^\275\322\355\010?\022\256\210\277!\326\243>\323\230\027?\2128s\300\300\261\325=\220C\362\276\310\202\'?\240o\233>\274\244\370\275\236\254\222\276f.@\276\016\351\350\277KV\237>\214.F?\330q\343\274\364\000\253>\345\025\'\300\231,\211?\223)\350\274U\016\032\277\000\254\302\276\256\025\372=]n\n?\346}\366>\214j\316\277$\261}\275\226\343J?\263\206?\277h\235\005?J\370\216\276$\030\017>\362D\305>\213\020\025\277\310\227~?\2432\027>\232\001\201\276\315\010Q?E^\213=\271\320\207\276D\325\005?\314\320\221\277\201\375\247=\341\3113?\357\331\256?\256\330\247>N\356\361>7\231\010\276\315\220\340=d\201\206>\0203\224\276\0377b\300\235\323\031\277/\001q>\303}[\277J$\365\275\227J~?$k\325>q\364\025\276\260J\203>0\376\276\276\373\314$>\331=5\276\005O\263\2761H\367\276-7Y>9\234\326>\337\3513\275J\314\301\277\004{\003>\035&\251\275\000\"+\276\"\'\021\277\350\3170>\302\272:\277\347A\320\276*\307c\277\3767\003>3\303\345>\271\236\026\277\213J\261>(\033\225\276\272{7>\226\274\370>*)\314\274$\217y>-b\364\275+\002\334=\325\322}\276j\200\221>\246\003\325=\027\316j>3 \000\277\322Q\356\276\2644\220<\325\307\323>\212\203\374>\231y\241>\021\261\027?t\313\240\276\252\303\211\300;\005@\277/S\207\276\234>q>R%\244>Q}\316\277\247=\271\277\t\2007?+\032\013\277:\272\254>\035\231\177?P\300\204\276\327rw?\304\315\200\277\367\034\233>\025\267\020=\272%V\276\367\007G\275\017\216\205>\271t\230\276\032\315\366=\341\224\313<\353\321y\277\016\316\241\275 \0212>\250\307\027\277Qm\003?P\020\254\276\267\354\304=\247<C\277\23375=\3413\026<\327\260o?\266\227\t?\026\031+?\275M\221>G\212*\277s\233\210\277\307\200\233>}A\t>e\266\255>$\221\275\276\211Z\"?\355f%\275&\364\313=\315\253\006>\n\255\346>\225zG>\374\267\203>\\\202\"?f\207\353>_\216\321=\333\216\211>\202\274%\277\n{\366=\336\034\216>\315\333r\300\002\243\271>^6k\276 )~\275\355\273\316\276\334\215\205\277\211O1?`w\344\277\004*\261\275\266!\033?\006\216/\275F\252\352=$\000\322\276\\\340w\277\232\005\254>\331{\370\275<\022\033?\204v\367\276\245|\316>\322\2544?\304\000\225=\262\354<?\364\310\275\276\342\007\261=_\304-\276/<|?\024\354\017>T\026f=J\366\344\276>\234\030\277~+\340\276\355K%?\346X\370\276)\364 \277o\340\307<s\271\357>`\351\317=\366\001\026\276\304\241\200\275as\231>\234\362\005\300<\326\200?\376\336\013\276\364>\357>\277\2710\277\235r\346\276#*\243\275\201\314\331>\273AH\277d|\220=\210\234\301>\004/\302>\317\212\207>\237\200j??\'\017?\336\374\002<\336\226V\277\244:\304\275\002\026\343\276\2553Y\276a5\211>\261\014\310\276$\327\220?Z\036\006\275nz\332>\215\205\203>T\3453\277\306\241E?&\225\025\275W\262\214\277\313\320C>\244\\\345=\3352\003?x\366E\277\033de\27643L\276\005.o\277S\000\030\275\275\247+?e\240\273\276\022\321\230>\330\276Z?&\010\027>\367u\361\276\231\372\016\277a\320Z\277\216\371\271>\242j_?V\033\270>\222\0246?9 \014?\244g\226?\317\370\236\275\350\2738?\352y\021\277\0037\255>\270\216\312=2R\013>2c\031\277\367r\346\275\324=\211\276[\205\217=O\272\030\277\254\013\230\276\250Q4?h\302g>\320\211%\275\240a_\276%\225\270>9\205\006\277DX\275=\rSH;P\357\302\276x\255\r>\337\320\204>\'\242\267>GV\224\276\236\236\024\277v\212V>\314\316F>\217\260\036>\357\376\234\275rP\266>VF%\277\3430\262>\361\340`=\343\357\333\275&\216\362=\367\276\336\2772\177\315>\026}\202\275\301V\311>\376f\307>W\360\026\2754\353\230?N\200L?#\033\226\276\016\000:\2771!\t\277\347\326:>1\020\235\277\007\033P=\305\235\212\274\231\366\371>\264n\337\2739\325\337=\227F\351\276A\352&\276\377z\325\276\204D\326\276\330\224\326<\344\250\204>U\312D\277\357\232\">\265\316#?\256h\256>\214\317U?\340\210t>\312\333\270\276{\033\322<\357,\202\274\323\266\302>K\330\356\276\350\335N>dx\211\276\270z\336>"
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2d_transpose/stack"
  input: "decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  input: "decoder/reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2d_transpose/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        tensor_content: "_\234\350\275\350Q\360\276\303N\333\2747$\245\275\360\227\311\275\203\226*\276\307\250\375\276+\375\374?"
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_transpose/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2d_transpose/conv2d_transpose"
  input: "decoder/conv2d_transpose/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/conv2d_transpose/Relu"
  op: "Relu"
  input: "decoder/conv2d_transpose/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/Shape"
  op: "Shape"
  input: "decoder/conv2d_transpose/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2d_transpose_1/Shape"
  input: "decoder/conv2d_transpose_1/strided_slice/stack"
  input: "decoder/conv2d_transpose_1/strided_slice/stack_1"
  input: "decoder/conv2d_transpose_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/stack"
  op: "Pack"
  input: "decoder/conv2d_transpose_1/strided_slice"
  input: "decoder/conv2d_transpose_1/stack/1"
  input: "decoder/conv2d_transpose_1/stack/2"
  input: "decoder/conv2d_transpose_1/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 8
          }
        }
        tensor_content: "\022(\025\277\3634\361>k\031N\276uJ\314\276\002\316\037\277^X/\276\352\225Y\276\013\375\345\275\013=\357>\\\005\217?\310g\026>\356\310_\277hN\365\276u\206\001?\256+\371\276?|$\275~\212\200\276l\265=?M\023\255>~@\016\277\0103\327\276\242\345\351>%\301\021\277\222)\306\276\346\313\014\2778\222\200>\341\331\001\277\315a\215\275\257\202]\277X\353Z\277 \220\004?P\266\016?\214\353\335\275\264\366\031\276k\177\347\276\317\240~\276+L\033\277\244\357\273>\352[W\275\024\356\n?\210\202\256\276&\253\303\2758\372t\275\260\n\010\277M\014\n\277\226h\027?/b\243=\003w\206\277\367a\304>\3372\\>\004\026\377\276?\312\'\275\030u\356\276\226\232U=J\241\006?\032za\277/]\227\276\2274\010\277c\016\264\276&\014\327\276\264\234\027\277\267\331\016?n-3?\274\357\034\277f\303\246>pc\257>\311\007\033\277e\251\377\276x\322\221\275|\264T>M\363\315\276mV\223;"
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2d_transpose_1/stack"
  input: "decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp"
  input: "decoder/conv2d_transpose/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 1.2960141897201538
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2d_transpose_1/conv2d_transpose"
  input: "decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/decoder_output/Sigmoid"
  op: "Sigmoid"
  input: "decoder/conv2d_transpose_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "NoOp"
  op: "NoOp"
  input: "^decoder/conv2d_transpose/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  input: "^decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp"
  input: "^decoder/dense/BiasAdd/ReadVariableOp"
  input: "^decoder/dense/MatMul/ReadVariableOp"
  attr {
    key: "_acd_function_control_output"
    value {
      b: true
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "decoder/decoder_output/Sigmoid"
  input: "^NoOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 987
}
