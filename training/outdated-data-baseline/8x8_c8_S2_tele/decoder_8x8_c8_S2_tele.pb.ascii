node {
  name: "x"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "decoder/dense/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 128
          }
        }
        tensor_content: "\244\3253?\346\206\277\277\026\357m\277\0360}>U\317\316\300\020\232\032\275\366?A\277\302\2166\276\036\260U\275=\307\335\276.x\307\273\356\276\377>\002m\333>OY6>\204F<\276\303\303z>_\333R?\232\363\240\274\001\313\334>\253\253n=\006\'\212\277\2619\002>\271\204\374>B8\372\276\331\220\033\276\0141\030\275;b\203\276\\\2141>z\223\206>\206i\316>\3505u\277\356\034\202<7\224\307\300AF\275=\345\204\026>\261\223\253\276\275\027]\301v\253\036?\301\025\371\273rv\311>\234\266\035\277\227\342\024=A\263\014\276\252;\243>\225\020\222\2756h\002\277K\257z\274-[\000\277V\032\342\2756i\033\277u\233j\276\345\315D\276\362\2155\277f\310\020\276\310\272\352>\240W\263\277\224\211.\277\337\317\331\2772\317\352\277\360\250F\277\013\220(\276\017\352\005\277\0069I>\002\277\004\276Y\344\227?\324\2479=AZ\237>*;\204>\020 \232\275\333\2676>\205\225\254\277U\351?\276\013\035\307\276%\361\216\277<\3457>\277Z\227\275\300\203\256>;>%>\000_V\276\340\200u\276\376\265h\277\240\260\356\276\'\246\247\276\306\206`\277\252.\244\276U\264\332>\030\200\226>gb\223\275\030VP\300\223\210\003\276al!=,(i\277\332\261o\276\254\361\222\275b<\302>\370\030a\276\224\003\033?\004}\367?\023\222\264?\035J\226=\010`\205\300N\236\255:>\253\013?FP\270\277\033\352\255\277]\247\221\300\222a{@j~5=\375\227\200?T;\321;:Y/?\333\025\336<0pq?\276\250\006\276\2336\021\276\345QJ\275\300\312\333?\201\242j\276\272U\207?\247\332\320?@\275;<X\254\353=\366\035,>\365\t\"\276\315C\306\275\340\3205\276\252H/\276\210(H=Qf\207\276\327t\374\276\177\353\227>R\252\013\275\262\025}\277k\206\344\275\005\r\006\277&8\372\275\002\304\261\276\345\237\246>\270_\t\276\023|\204>\341O\357>\020\315K\275\301\027\362>\301\265J:\351\220(\276P\275e\276\201\353-?\203\276\370=cf\367>\315\'\300\274\206\2340>v\376)?\367\023K\276Q#\217>\244\023\363>x\331\025\276\332\237\226=\004\261\217>f{s>\272\352n\276\307\356\253>\310\340z\276\335z\007?\370\227\241\276\214\030\362\277\224\274\323=\020\221\231=j\324\321\276\242gj<\211\215\027>0\272&\277\226j_\275\220\256\246=\t{\307>?\262\203\276\204\026\322>\210\203\031?\263\006\267>\3623\224>\300\353\237<\346\354\201>\234\343\351=\"\310\177>1K\305>\344:#?\362\017n>l\247p?\240U\227>\025)\204<\377\311\303>\340\275H\275s\220\007>Z\n)\276\034gp\276U!\257>B\330\337\273W\337\375\275\231\204\000>\030\276\243;\331\301\223\275O\342\341>\364\251\252>q|\265=y\004\360>\340\004i<\200\233Y=\324\270\223<\022\336\372>\210\243>=\375?\326>\211\t\000? Ye>\324\365G?\344YW>b\2632?%F\253=m\035\010?\327\261\027?N\260\262\277\371\357:?Z\014\020\277\335\206Z>\360\361\224\277\356a\205\276\\Y0\275\216\351\237\275c\273\225\276\225Y\030\276\266: \300\211=\224\275\233i\214?=\312\375>\266k\315\273\002{\000\300\01649>\241W\006>\374\r\002\277\277k;\276\205\266\257>\'\374\364>\271[k?G\376O>\262T#\275\303\316%\276_2\353\276E\241]\277\013\300*\276\032@\020>\270Jj\275\200J\273=\221\257\002\276\006\362\275\275\260X\\\274\000\335\237=0\374\252<\240\254E>\303ov=qi\375\276@\310\202>rY\270\276\177E$\300\200\267w\275\'KI>\372\014#\276\376\244J?3\333\036\2765\372]\276\177\316a?\373\203?>\211\340\311=Fe\272=\016\244\320>\247\342\351>@i\342\274<2W\277\314 \r\274\341\006\262>\374@Y\271M\267\212=c\320Q?k\341;;\026gU>\275\307\021>S0\030>\254\261\275>ZRf<\254\241l>\213\213\025\276\366\003\226\300.`?\276J\255\206\276\373 1\275\005\330\262\300\272*K\277@`\345\275\215\277\212<\356MT\276\031\022_\277K\220r?\377\207/\277\244\240\250\274\037e\211>\014[\371\275\313\322A?/{\226\276\257\225\023?\301\353\223>\3418\260\275<_\316>\265_q\276eR\037\276N\257\017>y\331\265>=\236\302?{\375z?\217p%?F\2212\276\3434\235>\202P2\277s3\316=/\2623\276\353&\253\275\330\333-\276\001\312D\277\013\313\277=\330\203H\276\213\210\230\276~2\014\276\203\372m?:\236\223>\234aG\274g\214F\276\257M\366>\026O\230=bI\233\275=\222f\276vbR\277S\304(?`\336\265?[\277\262>8\177\216\276eT??\236\204\322>\360\327\221=\313;\234?\237fb\276?\030\244\277\273\231\234?\346z\232\276\311\341\205\275\234\316\242\277\245\307\237\275z\3506?d\206\247>cE+?\300)\205>\010\361\026\276\030vP\275e+\276=)\035:\276\3669\246?\216\351]\300Yj\201?}\200\006@V\232\252>\020\251\003\276\340U\250>3H\306\276@/B\277{\303\234\276tI\317=08~\2759\276\214?#n\252\276\213Y\010\276Z\2246\277\366\235\257\275\326\250\000>l\224\325=F\201:>\340\344\243;\314\221+\275\373J?\276z\315\211\275_f\202\277`\001\220\275ZG\006\277B\352\345>\255\361g?\034\344\301=\332\274=>j\232/\275n\260\343>\234\271\315>T\250e=\370\243\006?I\315\036>WK8\276fT\346>\321\340\354=\010\343\306?\n\255\355<\240\374#\277\235\2047;=e*=Lii\275\221\340\371\274\037D\227>[\005z\276\372\250o?l\347J=K\217\013\2779mk>Nor>\3507\"\276\222\364}\276\014\207\363>\032\375\026? \360\273>\304\317\227>o-\300?\310\322!?\344\246\212\276\351\n\375=\226\033\312\275\177M\211>\351\254\"\276[\320q\276t\266\250\276\315FT>KSP\276\2238\332\276\203s$\276\225\302\223>\255*\023>g\300\003>a\263\210\276\307\350\214\276tW\333\273\210~\265\276\2040n\277=f\213\277\016\264<\277*\030.=6\250.\276F\214\250<P\030\273>\227v\375\275\347g\300\274\203X+\276\253{\n\274,\210\310\276k[<\275o\372\023;\023c\014?\313 \327\275!X\030?s\013\204?\370Z\263=\265\007L?z|\023>\321\332\215\273[\327\035=\253\023\213>\244\227G?\316\361\263\276\213_\326\276{\210?\276~;\010?\364|\244\276\002\202-\277a\376\375=\273\326\013\277f\316i\276M\0273?\317\274T\277\330\177r>X\226\262\276\354\254\026?\242\034z>\256\260\177\276\273m\233\275i\244\002\277h\253O\277H-\035\300!v&\273i\005\260>\306zc?\237m\265?\374\315\004\300\030\313C=-\027_\275*\357f\277\2332\327=1\370\330>\016\245\243>Ck\255?)\261\016>\230p\333\275m \241\275[\300\230?Z\261\331\276%\374!\300\367\345p@.L\021\276\2447.\275\270]?>\364\232->Z\017\r\276\310l\256<\270EA\276Xi\272=\357\257b\277\341W\005>\220R\010?\222\371\215>T\264|?\221\014B?\255\305\316\276\361\205\"=\"\023\223>x\256\203?\374{\205=\355\003@?<\335\265>\035\275,\276\240\353\337>g\360\213<\003\2231?-\323\027>}\222\034\2752fV\276f\242\312\276\340\343\263\275\325\327\"?\206\366\312=\371\240N\2760\334\006?/\332|\276C\254\013\277\021\212\300\276\345\t\002\277\331\276\243?\355\226\334=(U@?\316\305\022\277\343\223\'\277\002@\265>\\\025\361@\3515\226=@yV=%\254U\276\340Jg<T^\211>\242\324*?\202\006\311>\'\257(=%\202\010?v6\256\276\025|;?\271\3634>\256\367\225?\325|\307<\346o\265\275/\217\004\277&\324#\276\022k9>\370\334\216\276\375\001\014\277J\007\237\276\257\233\233\277 \027g>\361KD\276\206b\024\276.(\373>C\017\334\274\373\305\321>\360=\024\276\032K\037\277\321\207\006@\311!e\276p\235\017\276\247\366\002\300\014F\217\275T[\357=\242\n\200?\332^\367<\241\030\343><\374\023\276q\344,\276\004\362\314\275q\210\203\277\037\2255?+\372\n\277\227\334x\277E\330\\<\005\337\265?\332x\211?CA->N\354\334=\033\333\275>gZ\303\275A;\357\277\270\243\t?\200\032\035\2762\370\203\277\363\302\206\277ivJ\2770\242\016?\365\367\'?\347\337\t?M\212#@Y\313\355@w\325\347\274\031\2671\276\006\241o>N\321+@&+V\300\235Vi?\356\016|@\231\201\327\277\304\323\016\276\362G\347>\327\030N?P\270\253?\376Z\231\276\233\276\214\275\240\274\205\274YoS>5\326\322\276q\363\217?\311\333U@@r8\275L\347!>\231\226\365\275\tD\352\275\320\323b\275\261g\246\275\002\226H\276@\221\004\2749\030[?\304&\262?>\210\352\275^R\n\2766K\034@\271\021\037>\035nx?/\232\324\275\272\312%?\362\017^>\371\340\346=\312\302\346;^\310G>\022\376\203\275\277\321?\275`-\235>p\031A\276\254<\376\275\270\244n?\312\231#=\324QM>{\035K\276\273\017\'?\007[E>\000\211u\276\336\250\347\276\264/\024>\204T\227=\026\352/\276\362\355\364=(\376\025\276Z\215\325\275&\032\340?Q-7>\377cV?\277\201a\275\227\332\016@F\201\265>\374\211^\275\264\351\034?O\3127\274\315\034\202\276\030\3443?)-\303\276\2646-=o\363\n<\316!\202\275\262x\325\275\017>\247>]\030@>_(\255;\177\3452:\345^\022\276\315/z\275\341\301\364=\261D\317\274YP\362\276\252\227\233\276\241\323\025\277r\253\243\275\330\217\265\273\017\315$=\346W\333=zz\246<\017\330\250\276r\267_\276\230L%?Z\344-?m\355<=0\177\216\276\2154\025>\331\345\003>\3562x?gW\311>[Q\253\275\006\354W\276\231XM>3\334\002\274\337(\270<\346\3621>/UK\277\031\227\203>\230\007\236>\n\260\365=\345%m\276\340t\025\275\235\311\023?\303B>=T\215\252\274D\213\236>%\324H\276\213\025<\274\344\371b\276\274\361\265<\371\235\333>\213(\212?M\342\260>Y>\253?\250\2217?\251#\021\276\034\315\"@\200\224`\275\255x\200?b+\323>\227xc?\017\210\254\276\360\353\"@\001I\020@E\003\226>\345\032\340\275\307\007\264>\225\037\341\276\320B\220\276=\205\347\2740!B\275t\001I\276\244\035\326>OX<>\007\224\023@\215W\030@\235\206\035\276\340\330j\274E\376J\276\271R\343\275C\230E\276\260\\\276<\342\014\234\275\246\302L>-Y\213\276\032\233\236;\270\3435\277\016\312\020=6{\243\277\276\0332?\265\335\224>~\332\376\274\026\226\244>\177\314\031>\323]1=\207\177\315>X\214p=\210\006\336=\307\003j\276\332\205\013\276o+\017\277)\250\237<\217\210\207?\360-t:\337\246\304>\227E\217\276\313\360q\274\273\263\000>\354z\377\275\216\242v\275\257\367H=z\201\355\276\330\364d>\014\270\274>\243\303\211\275J\216}\276\034\n\224\277Ss\272?\333-+\277\035\214\357\276n\nS>F^\244?\230\340\033\276f2??\017\024n>\021\233\217>iN\243>\004\035x>:\356\026>\005R\356<\211\357n\276\276S\343;\361\373\303>\221\306\362>\260\332\232>\364C!=\231+\353>\007\301%\275\375\367\036<\355\341\273>\233\221\207?\373\017\255>\017\375\202?@\000L?\370`\201\276d\006\247>F\223\215> \213\036\275\333\014\377;`\315\377=\355\337\272\276U\343\010?\316R\035\276a\346R\276L\303\255\276O\3335\275\203\226%\276\307[\316>ENQ\276\254\\\265>j\250\210\276\210\343/>\331}Q\276Cu\231\274fw^?\317_\002?\253\354\313>\rV\223>+\001}?\000\320P\276*\222=?\2714z\274\220)h?\024\206\346>O\036\024\275\257\341\215\276\335y\026?u\355\255=\26043\277W\000N\277U\352\222=\262}P\276/\242\300\276\031\207\241>0Ol?$V\240\275o\2723\277\315\323\007\276\3449\020?\312\356H>\341.(\277xjr?\337\307N\277h\367T\275N\225%\276\310\244\221>\036|\035?\335\233Y\275\234\235u\275x\016\341=^\242\341=\340\315.\275\367\270\032\300\207\021[@\200\005\033>\372\204$>\350\270.=\004\270<\2768>\362\275\340\226\026\276:\343\n\276`2\n<F\344w?\316^\342>\311D\206=\2457\371<\000V\255=I\242\006\276\261\343(\275\337\246\256\275\227\304\023\276\305F\235>\335\377\357\275\260\006\322>\365\241\347>\245?\342\275\3254w=#v\223>\005\323\014?8\240i\276\363\241\367=\213\231z\276\250\262\214>xa\025\276\271\203\327>\205\203\374>\207\376.\276.\302\360>5\363\266>\004#:>tN\n?}\227X>\034\006\205>V\002G\276\230!\223\277\014a\217\275\003t1?N\364b\276:\211\020\300\r\035\360=\266\251\347\275\315 \343=D\355\371\275\375\253*\277\347\322\332>\314\266\310>\005\371\240\274\377\352\204\276\355\261\177\276v\205\376\276\331\325\362>\240s\215>~O\302>\033\003X\276M|T>r\327\373:\336\344+>\315V\237\275\275n\014?\206\360\243>D\203\031?\334\002\222>_\307\373=\263\202\244<\361\007_\276(\221\022\276J,{\274\177\322\302\275\234\377}\276\367\350\304\277v\361\004\276\256}\333\274\377?\220\276\210\341n\276\234M\301=0\317\372\276ua#\276\244\320m>\271S\324\275\200GV\275d\246\202\275\221Y\273\276\337\177\232\276\313`\355>\331\017/\2761\3702<\033R\020?Vg\206\276\331U!?\377[&\276\0048\213>\355\311\356>\"\3645?[6L=\230[\350;\327\235e>*1\251>ZU\210\277,24?`&\335\276h\367f\277\017\n\355>\367\226\352\300Dc\277\274\221\345\003=B\235\335\276\020\234\204\277\335\327\224\300\033Y\\\277\276\352\351\277wO1>\204\350\224=m/\021\276T\232\217\276\225\350\032?N\353D\276\"\317j\275\004e>\275-\0202\277f\026a\277}\005y?I\243W@\366\336=>\202\260C\276\220\t\007\276\202\3536>H\243\230<=\215\005\276&\260 >\010\037\264<\026)}>\2157\345>b\216d\276r\256\301=\335\324u?S.\373>\353\255\003>-\207\351\275\237\257\003\276\016\034\216=\017m[\275a\261->\0373\277=&\2244\276\017\345\227>&\326\254>C3\034?\374\316X\276\037\362P\277\354\022\337\275l%\277\274\017\023Y\276\244\362\237?\2123\001\276}\337\227\274E\265>\277\320\003\004>\300\221\231\274\325/\001?\367\376\233>\323\251B=\241\301x= \375\025@!l^\276S\031\362>\316\233a=\230\251z@n\226\242>\267\312.\276\253\\I>\302X\004?\n&\205>\000\034z?\356\276h?\303\354\332>\276\231\226>\215\314\260=\002m->\010By\276\365!\003?\222\363\271=!\355?\276\271\342l>\204\330\334\274I\361\243>.;a>\210\365\303>\222\314\350>=\204\251\275&xf>\222\265V;^Vl\273\357?\230>\260\315\225\275\3143\035\277\217\275\313\275\274\014o\276\357\013\024?q\0239\276\035\317\022\2767\303_\276\213\257(>\237H[\277\343\265*=]\037\255\274K\350\000=\037\265E?\260\321K>\321Im\274r}\237>a\305O?\246o\335>I\216G?#L\242=\177MV\277w\n@?\203\201\025?\271\034\320=\221\216u>\366\031}>\333\\\215>\341\220\245>\032wf\276\371\302\266>-2G>\235/&\276\024\231m?\316\2436?\t\321|?\273m\'\277\374\336\254@\356A\235\275>iy>\237n\201\2763\204\024@\233!\324>(\333\317?\342\020\372?\202\362\340?t\377\211\276\312\227y?|\337}?5R\262<\026+\273\275T\220|\275\027|/\276w\005\211?U\033m>F]R\277\263k\036\300\340<b=\216\216\005\276\330S\336<\370\1777>\244n\364=\234%2\276\204\2748>\206B\365\275s\302\266<P\327L\276d\370\n?\221\346\221\276+MN\277\233\251\250\276f\3344>t\022\027>\360\356\262=\305\311\222\2764\250\266\273\376\313I\276\223y\035>vx)\276\246\200`>\325l\205>x\031\032?\241\255\304\275pDm\277\32468\276\330S\347=H\356\237\275\220I\244>\030\254\324>V\273\014\276th6>B\034\026>B\261\006\276\336\023\006?\317\201c=\255\034e>+G(\2764\315\323\276\370\003G>,K\231> \365\037\277\223\300\262?\r\200g?\243\211\030\276+\341\350\273\303BT>\255\227\307>\270\311T\277\231\020Q=?\3339\276\344w+\276fW\033\276MT\325\276Z\376\346=<\031\251>\003c\253>\210\013\217\276\320\215\323>\266\356N;\332\014\374=5\361+?\206vR?\237z0?L\020g?\313\332)?\237\277D\276\313\031\242\274\340\334\330>d\343(=z\345o\276\336\227W;J\243\016?|\032\346?\273\366\311\273J\341\272\275m\265.\276v\371\204=`\350\367\276#\302\340>\017\356S\276R\374\020=\367\266m\276\214\312\270=\345U=\274\024\353B\276\272\311\335\276?\243 ?(\240@\276\037M\320\275\275\346\005>\375\324r\275\"\306\230>\271\353*\276\3542`?}\013\"?NU\004@&\373P>\210S`>\316?\357>V\347x?\306\226\306=\205\372k=\246\\d?\245\034\226?\326.c?\301\204X@X\016\373\275\367\222\330>\331r\256\276(\354\006?\352\237\256=S\275\244?\026\037\355?\303G\206>\244\341-\275r\245]>\313x\267\275C\017t?u\311\243\275\000_b\2759\327\t\276}:\361\2769O\271>\177b\201?\036\300??b\240L>\"\347\240\275\330Iz=\321\267\254\275\022\324\030>~\202\342\275\\\251{\275X\270\227\274h|\250\277+\351\351\275\013tE\276I\262\034\276Cj\237\277iv\244?\354\247\306>\265\374\337\275\200\035\020?\360\004\255=\030\347\341\2751\345\r\276\271.\033\276l\265\346=\250\020\361>\363\026\251\276\314\301<\276\'7@>\377\221_><D\022\2760\232\024\274\013\253\370=G\031\017\277\212\374o=[\211\037>\273uC?\022\347\225>\0042\033\277h\231\246>\026\341\237?\264\021\013\276\225\233(<\224\240\010\300\364\266\214\277\'l\'\277\311\365\026\276\000\351\013\301\365,\235>\213\014\335=\tE\214\276\374\212\322>\316n\332>\341\202\320\275\376\275\221>\202g\217\276\330?\004\276\257\033\202\275\310\027b\277\234\376\024>\310\224\265\2752\336\206\275b\347Z\275\364\251(\276\327_O\276`a\230\276\276\346:\277\017\000|\275\017R\273>c_\305=\277E\224\276/\'9=\245{\213>\"\302;\275L\252\231\275y\234\310;L\357)\2759\211\205\274\312\217e\300#\2072\275*\252|\275B\300\356\276\336G\334\275c\217!?\'\220\320\277\266\226\205\275\204\223\t?\201\233\027=y\270\340=xl\354\275\271\245\312\276el\355\276\271\016\205\275\010\262\316==$\247\275\242]\252?\215\226(\276\271\216\263\2762\236\366=\212\234v\274\346K\203?t\304\246>\330\245V\300\0001V?m]\256>\246\025X?\004F\255?:e\225?\225>\224\275\312,\365\275\326\215\376>\360y\034\300r|\005\275\266\257\344?l\227\324\276\344\211\"?\212Ub\277D\336P\275\204\254e=\252\250\227\277\3269(=\365R\260\276^\332\023\300E\235\376\277xu\037\277\373U\266\273\200];\276W\200\251\2766\360\327>\r\230\274?\267\301\t?\340\363\030>>\326\326\275x\315\236\275\300=\253=\320)K\274R\342I\276\3447\376=\252\323M\276\263\252\206\276o\217\017?\235\303b?\n,\275\276\310\234~@\361Wd\276,O\021?(\340\261\275\251\310{\277\3676\014\277e\214\n\276Sx\026?\205P\264\277\311f\356\274\351\027\367\275\004W5\276\",*\300\005\0007=\212\014\036?Z)A\275\312\223\244\300gMB\276\030\200\220\300\273{p>a\357\234=\030A\313\2761\315\200\277+\363\177\273\376\n\230>\357\013\242\276Hi.\300?\026\302=/o\363\277\235\'d>\303\373e=)\211l\276\267E\320\2769\332\032\276\212$!\275\2200\025\277\223^\316>\216\367\037\276\001A/\277|>\214\276\014^m\276\226\007z?\264p\236<\001\232s>+\332y\277e\257!\301\346=\324\300R\032}\275\223\301\363\277\303_\013\276b\265\205\300\206\242\377\277\367\376\321\276\227wW\300s[8?\335\274\256\300*:\003\276{\270%\300\037\0267\300\373<\000\276\302\367\251\276\207K$>\317\341\264=\255Aj\27780\303\275\025\245 \275\005\300\210>\373\270\226==\233\335\276\332\361`\277}\001\005\276\320wE>\272\275A\276v\"r\277\224ES\276~Z\270>N\277\324=)Q5>k\205\367\276\022\030\364\277\321v\017\275\366\234x\276k\302\376\276\245\255\214\276\257vJ\277Y\304\367>\253\370\352>!\240\231\276\202?A?\365\233\222>\037?\"?\207\226\222\274\027\343V\275\334\367\265\277&WM>\024v\230<FtT\277\006\377\377;\022\275\314=\224\342\021?\241 \013=a\307?\276\255\267\004\300\346\2552\300\332\316\033>\245\010i\276\013\245C\276,f\241\273\362\031\267>uD\302\276\200\367\225\2728x\304=tu1>\351\272l<>W7\277H\271\007?\230\366O\275\316\215\237\275:\312?>v\t\324\275T9\357\275\244\302$\275x\325|=\350\'\313=Z\231s>\314\n\340>\324Z\366\276\2100\221>=6\223?uO\014?\266\322\267\274gl)=\177\214\025>\253\304K\276;#\227\275E\267+?\010Z\264\275\365\276\315\273\234\245\320\275\365C\340\275\003#\241<n\333D\276\372\276~\275G\027|\274\t\256T>\232\302(\276tr\357>\350Y\207\276w&K\276\021\267|>\243Kr\275\254L8\276\030.\030?\243\036\226?J\216\372=\020\367\235<m\252F?Z}\275>J)T=\023\351B>C\223\334?\n\254a>\014\260\240\276\366\277\306>y\352\005>D\237\266=|`3\277\352\235\206>{\020\300>\300\320\241\274\3739\312=\224\370\346=G\027\355\276\223\tG?b\367|>\341\257\020\276\275\375\035\276\243S;\276\364=F\275\201\216\271\2764\210\227>\010\'R\276\311\243=\276\263k>>\227\237\236=#\323\212=\2576\260>\305\357\344\275\344\023j\276\350+u=\036u\r?Lj\325\276\030\010\007=\321\321G\275\t>\017?\323\266\026\276\372\361\037?\n\276\017?\205v6\275\222-\023\277\377%\016\277\2128\362\275j\215\211\275\355\025\035\277y\341]\277\354\373m>b\255$?\270A\376>;f\315> \263+?\370\035\253\276\3516Z\274\320v\263\275}v\336=\255V)\277\027y\'\300\364\206_?z\224\000?\374\353\205\277\215\361f>\265y\374\276\271\010\332<\177\014-\277\003\340m>\374!d\300\351#]=\3601]>T\240\274\276\255\226\032\277w(^\300\335\270G\277T\310\305\277\r\000\267\277\206Y0\276\237L\230\277\2509\270\277\370\347\331\2775n\273<\312\314\301<\204\0165>\236\342 \300\235|\243\277\234\r0>\0234\022\300\0172A\276\320~s<8\244c=\024\267\216=\300Aq\275\370\345A>\"x\331\275\022\036*>7W%\276\230\323\304\276\301s\256>\374\351\337\276\001\021-\300\374\021\022?\203q\224\276\004kF\276y\021-?\223DT>\014\313\265\275\013\377<\275:dQ?}Ga\276\311\331+?0\227\342>\210\206y?:(m=g\305\032\276\273k\271\275C=\212\300\301\351\253=Z\304M?Q\272a\276\016Z\356=\276\227\201\277!\274\t\277vj:\276\001\353\037\277\016\203\360\276\313\371\213?EQ\244\275\253p\305\300\245 P\277$V/\276B\273\350\274\246\303\313\300 \317\241\276N>\177=\010-\337=\347\375\214>\024\032\351>\235;\022\277|\305\035?94\200\276\257!\372\275\304.g\276\n\016\031>=\027\352>\227\366\000@\345e\353>R\244?=\026\361\022\277\2540\200\275\241\322\244>\217O\200?5\355\342>^P\254\277\317\021\320\277\256\223\275?$\333\001\276.\211\203\276\022\321\024>\335:\027\276\226\374\216\277v\374\204\274\365V\374\276\3742D\300J\003\341=\205\307\004=\211d\014\2741\215\245\275lVu\276\267C\016\300\356\006.\276\005\016\344\2767\351\256\276\306|\334\277\364\032\245={3R\275#,->Bf\206>\244\220,\277\027`*?\275((>i\371\230>\233\315\344\276\241\243\200\276\366AE\300\322z\003?lc\337>\304mg?\227i\013?\216\357.\277\001=F=\203\346K=q\241\030\277\273OI\277\355\237\344\2778\006\246\276\345\033[\300\027R\324<\036\2754\277\201-r\277\374\231\271\300\310Q\370\300\020\254b\300\254\221\262\300\264\310\363\274\221\213\277<\312 \215\277\347{\010\300\322\314\252\277=hC=i/\313\2756\215\007\276q*v\300P(G\300`\033U\277\033\301\013\276\0328=>\270\033+\275bI\005>\340\302.>\302\271\217\275l\231.\276tZ\322\275t\236;>6\267\336\276^\377s\276\016\247\202?\276g\010\276\025\365-\277\332\270[?`\033\300\276 \301\256;\227n\266\276\366Q\327>P84>~\267j?\007TW?\370\334\'\276!\013\244\276\005\240/\277{R\202\277Z\327\025\276\214tK>\374q\034>\327\013\034\277q\004t\275z\247\364\276\345|-\277\354H\344\275+z\224>S3\035<\213\233\006?\231\"\244?\361t\203\277\346\251\217\274m\262\003\276\371w\231\277\367\230l>{\3622=\303G`\276NVD?NR\203>\327u\206=Qs\005\276m\324\261>\207=\032\277\311&\310\277\020\220Y\276\313,\224?\232\362(\277u\031|>\327\346\350\276\034\255\301\275\257\254\317\277\252\366\227\276\271d\r=\314\025\001\277\030\224F=S\013\330\276\304\034\005?\243B\034>H\002Q\277\312\232\333>u\335z=\373%\303=\257\376\231\275\252\325\363<\333\271\014\276^\002E\275\250\034\001>\245u\257\276\366m\324\277m\006\327\275[\334\\\276\225\242[>Y\345D\276v\021\332?5Ty>\217R\301\2743.\206?\200\022\'\275\311\336`\275y\303\241\275\2711\031\277\225\325\354>\311>\364\276\210\007\010?i\000\325\2767G\034?)<\316\276R\240\253>@\243\321\275\343\273\n\2763\332|\272X\201\324?^|\022\3008\335\322>n\223\177>V_)?A\nA?H\017\316>!$\030\276\355\247\264\276\004\365\330?\306\202\027\276f~\023>A\226\275>L$\360\277\307h\223>A\211`\277\253\0131\277\\9f\276\362p\367\277/L\034\276n\364s>=\3457\277D\376q?//\256\275}+\377=\333=9>\205\177\271>\237\311<>@\335\247\275A\213\332?\264\353>\276\230K\350<^\321\034\276\374-\264\275\200\347d=\204\367\350=\'\227\267\275X$\315<\252:Z;/\233U?\363m\335>\257\270\225\275$X\303?\020\3363\277\026\204\240?n]\225\275\231\\T\277\270\030\257\2742,o\276\020{\354\277\225\337\024\2777\261W=\337\254\366\276\\\305\335\276\341\217\370\277G\270\203\276\004H\336\277\262\334z\274]\267z>\204\027A\275\275\345\314\277dG*?G\007\360:\010i\353\276\232\231*?\270]\231\275\227L%\277Squ\275$m\337=A%\247;\005\031!@\032\213\354>\317\265&>\036\333\005?[\333I?\235\202n>E\203\235\276n\253\370\275b\326B>|\367\237\274\201\361y\277\314\036\014>\246\r;\276\365y\360?H\317\002=\312\217\237>:\017\235\2775\330\342\277\025\352y\277\252\300(\276\351\r\033\277\326\260\342\274OB\261\276]\034\002\277i\342\203\300\327]\251\276\367\026\262\277t\253\255\277S3L\275\207\326|\277\377\301>\276\302\266\325\275\021\213\342\276a\255\305\275\032\027/\276\215,\302>\205\230\t\276\014\0062\276\300\361O\277\372\243\002\276C\301\241\275K\341#\277])\356\275\033P\235>\241\201\250\276\303\227\255\276\274\301<\276\327vQ\276\263*\002\276\026\325\004\277dN*\277\034\240\304=U{a;\227,\224>&\312\n\277\204$\271\276I\037\275\277\320H\341\276\303\013^\300fH\271\277\374\343\021?\305\362\200\276\004l\345\276\3700\311=pr ?\256\021\241\277\035\320Z>\037\354/?\207\225\n?\340\263,\276\304\001\202>G\333\356=\373\033\360\277\"\213\347@D%8\300\033\033]\300]E\374\275\032\367\000>`Xv\274\357L\322>\325\n\343?\036\310\224>\".\367=$\n\317=\252S??\n\252\326?k\325Y\277\342\222\013\300\240$\334;X\032D>\204\346+=@<\206=\020\3777<\362\226\335\275`\021\222\275\331\301K\276"
      }
    }
  }
}
node {
  name: "decoder/dense/MatMul/ReadVariableOp"
  op: "Identity"
  input: "decoder/dense/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/dense/MatMul"
  op: "MatMul"
  input: "x"
  input: "decoder/dense/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/dense/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        tensor_content: "j\207\316>Q\320\216\2758*Y\271\347\334/\275\315+\202>B\267\017?DkN?5\322\033\274\024\351\017?\240D,?\202X/\275\336\006\313>~\354\204>\023)\335\274B\217\276>Li#>6\241*?\r5\340<\037\204|?c\326#\275\262\024\215>\344\r\177\275\375\267\341\275\315\327\246>\236uj\275\350z\026>\331\310\201>\206\312\377\275^\372\261>*\324u>zr\007>\032\371\322\275\254\321&>\333\\\325=\365\3708?8\'p\276\261U&\277vMA?e\031s\275I\265c\275\320\277\'\276\251\222\222>W\222\204>-os\275\"\366M>p|d\276\252\313\245\275?\200\206>\031\230l>\023b\035>s\277\363=3v~\275e\246s>y\277X\275e\336\206>F\233\001>\0040t\277\334\346\367=\360\365\213\275\370F\034=f\212d\275\305\241\305\2723\253p>\021\254\304\273\307\311~\276\'\366\031\275\370k\322>*\315\215\276\265&\031\275\210N\205\275bO,\276\223\252\337\274\336\236J\276\322\023s\275;\355\222\273O<\345>\303\273\266>\022W\206\274@8\236\273\\\022\032?5\312\033\276\006\324\026?\021K\346>\265pg>\377\223\n\277\021pn\276\233i;?\213\225\207<}`\262;\r}\t?G2\275>x\265#\276\227\306<\276x\221\265>I^M?Z\220\014>\370\266;?!\223(\277\360\304\000\300:\313.?k8\321\277\200\013\004\275&-\257?\326\336\013\275\370\257\225\276@_i\277\'#\213\276\365\374\357\276A\324>>\031\266\207\275\337\030\253>\232\025\010>p\223m?_\264\177\2743#8\274I(\265\273\212\2070\276\205S\245\275\254\324\021?\223^\207?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/dense/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/dense/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/dense/BiasAdd"
  op: "BiasAdd"
  input: "decoder/dense/MatMul"
  input: "decoder/dense/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/dense/Relu"
  op: "Relu"
  input: "decoder/dense/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/reshape/Shape"
  op: "Shape"
  input: "decoder/dense/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/reshape/strided_slice"
  op: "StridedSlice"
  input: "decoder/reshape/Shape"
  input: "decoder/reshape/strided_slice/stack"
  input: "decoder/reshape/strided_slice/stack_1"
  input: "decoder/reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/reshape/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/reshape/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/reshape/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/reshape/Reshape/shape"
  op: "Pack"
  input: "decoder/reshape/strided_slice"
  input: "decoder/reshape/Reshape/shape/1"
  input: "decoder/reshape/Reshape/shape/2"
  input: "decoder/reshape/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/reshape/Reshape"
  op: "Reshape"
  input: "decoder/dense/Relu"
  input: "decoder/reshape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_transpose/Shape"
  op: "Shape"
  input: "decoder/reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_transpose/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2d_transpose/Shape"
  input: "decoder/conv2d_transpose/strided_slice/stack"
  input: "decoder/conv2d_transpose/strided_slice/stack_1"
  input: "decoder/conv2d_transpose/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2d_transpose/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/stack"
  op: "Pack"
  input: "decoder/conv2d_transpose/strided_slice"
  input: "decoder/conv2d_transpose/stack/1"
  input: "decoder/conv2d_transpose/stack/2"
  input: "decoder/conv2d_transpose/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        tensor_content: "W\025\247\277\005\215$?\334B\325=-\265c?\203\363\016?\207\362[\273V\033\304>\232\366\340\276\036\344\376\275-\010\026\277I\356\332>{[\013\277\344\'\024?W\017S>a\\\235>\326\311\305\276\240L$\274\n\207\023?CW\004?\307f3>\346\034:\277\017\266\254<<K\346\275\257\330\342=\345\177:=\002|\226>\353\2000?\351D\230?\331\361\222\275\361\032 \277T\3345\275>pU<%A\210\277\017\322\200=\266\2361\275\246\037\037\275\220\203\216?\344\003\363<i\300\354\276\006\001\271?\3633@>\016\264\315>\261\002\205>a\253\275>;1\261\274\244\354\246>u\222\031>\314\275\315\274\036_\267\277\000\204\232>-xP\277h\302\"\277\003\370\377\276\374\324W\277\220\376\273\276\3403\242>;#\306<[\253\010?\275\334\016\276#\2537\276N:f\276I\023\245\275\337\203\235\275\312.\'>Z\335[>\3142<>\364b\355=\353\247\002\277\3228\032\276\\V\225>F\264I>\025u\316>\273N\344>\267S\331>,0N>\307O\251\2760\237:>G\265\317\276nQf\2768n\035<\210.\335:q\243@>F\340(\274\260\341\210\2764_~=\211\244\353<\310r\362>%\031\007\276\327mW>#$?=\244\367\302>\355\331\316\275\301r\243\276\016\375y>0\024\026>G\250\262>`\367\327\276\357\332~=\341\304\014\300-\363\244>\274^\375\276\036F\273=\237\226\227\276\242\203y<\010pI;)\255\004\276P\212\357>\257\224\243>\277\306\177\275\026U\273=l\335\366>1\241~\275\277\000d\276w0k\276l\005\371\275\002\372\031\276 \232P?\323Z\273\276\254a\277>\377\217\266\277B\305L?\351\252\013\276`\000M\274nS\326>\247\233V>\263\324G;\032\262\216\275D\177\372=\206\200y\274#\212\261\275\206\250v\276\031\344\236\275l\016\303\276\226\356%>e\010\271>\312.\013?\"H \276\010\266\211\276\376o5?}&r>\266\016\205>\270\221q\274\347%@?[H\014>h\227\265\276\374W\342=\366\305|?\277k\005>\352w^?\363h\266\275\335D\306=\324\274\215>%\035K\276\225\351{=&k\207>\215\341\002\277\224\325\005?h\307\203\277\376Q[>\2722\010>\273Ki\276\177\313\313=\027\266\251>\233\250\014>\263&d\276\022\314\211>x\001\272\276\312\324c\276\023W\307=5\024\020\275\376\t\353\276\266\252\210>\222\315K>\335\274\256<2\271\344=\023\022\237>\262\371-=\331\330\r\276\301;\257>\230\322P>\365rS\276\257\322G?/\306\r>&94?g\330\024?\345\302\365\274\223\205\237\276.\244\022\276O^\210\276\027\335\221>v\363,\276W\355\227>\227\200\275=\307\235\337\276\201P\037?\234A??W\335\272?\253\252e\276B+\034=\036\304q\277=\362\003\274\205c\001?pz_>\3753\325=\360iH>\212\020e\275[\237a>:\203}>J\215J?\333\347\335\275Ln\002=\205\026\321\276R\td>A\315\233>\317\306Y=\320\233\247\275\274\271\227\275\254D2>\317\217\221>\376\324\266=~\201\000?\0007\335\275\016\332\002?\327\nk\277B\312;?\317\202a?\240\271\215\300*\211\360=\320B\020\276\000~F\300\372\005&?\205\311\301\276\365\353\251>E\013\033?\344T\217\275<\374_\276\223?\254\276\337\003\001\277\3355\032?\024q}=\017\210\235?\265\027\020> a\027>o\031V>\3038L\2774\332\022\274\025\034\201>Y\007\006\277\376\332o\277#\270\002?\031\031\347\275\242\000\204>\nVS>\336\316\324\277d\262\343>]L\365\274g\\\005?^S\333\275\3310\036\276-\225\247>q\223\021>\177\346\025\276{\344l=\370%\210=[\332.?m\334:>\235\234a?\255\222\245\277\344\222\233<\272p \277JmG\275T\204\031\275\r\010\323\276\304s\250\277b[\325>\312\'\263>&\357\240<\246\'r<\237\320%=\261\340G=\306\234\244\276Ut\007\277\2335\210>\037\367\335>=\307\222>\343\200M\277b\262\262\276\331\253\023>xb\216>A>O\277\250~k\300Tl\246?\002q\201=\241\312z\300\304?}>\360?\007\276-\222\261\275\337Lo=\231P\243=\307\223y>\270d\035\275\023\017\324\275z\254\227>5\360\223>\331\033K?\270C\034\277>\226\333\276\r\023P?\345\017\361\276T\t1\300)Z\242=q\355\202\275_\217\362>I\207\t\277n\373\272\276\212.\'\300d^3?9\333\337>\243\235/?:%\213\276\234|S\277\310\276\222>\r\321\225\277z\002\033\277\225\374S\275y\353\212=\253\330\336=\037\374\272\276\312\013\237>\334\000\310\275i\343c\277I\275f>\263N\016\276\003\226\356\275n\224\327\276\340wr=\357\300\334\275\177\003\306>\310`\021\276\3044\016\277\365\252\220>\306\232t=\333\002\261>\370]\030\275R\223\242?B\355\023?\017\2643\275\306a@\277\267\025o?\013\177\330\276\320\360u\276\034\367[<\r\001\327\273GQ\264\275\002\347\362\276(\226@\300-<g\275o\324X>\002\220\207\276\225\310\232\275\024\242\377>M\033C>\333\372v=\001\231\013\277:5\n>\014\"\024?U\\\367\275\035\337\251>}\254C\300\361k\234>\322\007Z\276\223\000\005\275\361\277\327>)ZG\276,\207\316\276^f\336>\0217\315\274\025\206\222>W\305\236\277b2\207=\362D\000?\367\337\003>M\t\317\276\317o\237\276\304J(?\346!*?\312\244R?\217\277\226\275U\260*<\205\314\222\275\016B\203\277\227\0068>;\217\007\275i\322\343<\373q\270>\272\010\326\275L{\027?L\000T?XV <(\206p>v8_?hyC?\370\016\256>\243\335\201\276\245\240\215=\207\306\320\275\302\350\'=YI\001=\177k\223?\322\252d?\376:\341\276\213\025\002?\323\234\030?N\362\207>j\033\007\277\276\245\267\276\235\'h\277\244\242Q>X\'g?7H\026?\302\221\001\301O\322S\276\010\232\356=h\312\023\277\025\336=\277\342\340\t>\007vZ\275/\302D\275\033\3040>B.7\277\216`\014>V\005\034>\034\323\333\276\274\n`?\034x\377\300\323^X\276\325/\354\275\225\217\317\276\235\267u>\013M\260\275\273\261\264\276{\036r?~\235\\>E\'\003\277\372\214\007>;\3365\276\035\024\232\2754=\037>Y\377\234\277\2226\225>\257$\274<\305BS?\241\331\267\276N\201\301>\305\340\376<(K\330>$.\221>\220a\325>x\270C?\025\361<\277\023\245\256\275\002\024\215>\201\317i>M\004\300\275\034\272\243\277YLV\273\243\240{>\236\312%>x\255\300=\034\005F\276\3036\362>\013\020\245=t\227q\276N\307\270\277\322\224\240\275\365\353\324\277\314\363^?\203R\232\276\211h\206\277\354~\251\300\377\374\235>\200\230\245=\216\232*>A]\004\301\241N\203<\233\026\276\277[\323\022>\226\333\003>Kt\225\277\033\227\013>\005\'\347:2@\225>k\374\317\275\224\022\004>\026\236\351\276\356\343\272>Z\235\020?\304\362#?/\\_>\225\n\017?F\010\331\277\346\037S\277\355\216\023>\211><\277\304\2176?\265\237\322>\366W\244>\016\302\263\276\205o>\277\202\005\264\276\321\231\352\275\260\312Z\277\305s\322\275\220\037\027>\216\004\022\276p>\321\276\240\367\003?1]\000=\255!M\276<\271x\276jr0\276au\263>\346\265\240\276\326\255=>\r\224\025? \001\276\276\230K\301\276y\013\310=\350Y\006\277\244\030<\273t^D\277\336\t`\276\233f\330>\252j\252>3\356\273\276K\301\r?\2533\217?)\250\307>\3079z\276`\"\312>5v\264?\223\031L\276+\013s?\013\000\367\276\350\351\372\276\324\"\202?\321\270N\277/$\211\2760\3111?\t[\204=\360;Y\277\331r\211\277\237{2=\365r\266\275+\016\n\276\303\242\200\276\200\222\300>\237\242G>\360=~\276e1\371=<\334\371\275\005\341.>d5\344>\001d\257\301\373\232\317>\017\000\371\277\202lf\276NK\246;\305\010P\277\321\316t>\263T\177>\316\242\201\276\3707\304>kP\002?\344\367\273\276\316n\242="
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2d_transpose/stack"
  input: "decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  input: "decoder/reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2d_transpose/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        tensor_content: "\254\253\207>}\217c=\323\343K=/\366\221< \272\245\275\217\370\r\272%e\225\276\353\207l="
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_transpose/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2d_transpose/conv2d_transpose"
  input: "decoder/conv2d_transpose/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/conv2d_transpose/Relu"
  op: "Relu"
  input: "decoder/conv2d_transpose/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/Shape"
  op: "Shape"
  input: "decoder/conv2d_transpose/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2d_transpose_1/Shape"
  input: "decoder/conv2d_transpose_1/strided_slice/stack"
  input: "decoder/conv2d_transpose_1/strided_slice/stack_1"
  input: "decoder/conv2d_transpose_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/stack"
  op: "Pack"
  input: "decoder/conv2d_transpose_1/strided_slice"
  input: "decoder/conv2d_transpose_1/stack/1"
  input: "decoder/conv2d_transpose_1/stack/2"
  input: "decoder/conv2d_transpose_1/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 8
          }
        }
        tensor_content: "\274z\364=I\342:\276\352\300\260\275\355\245\341<\261\266\216\276#\205\300\274\212\3113>_\305\373<v\240\003\277\037\"\300\275Df^<\031\037\010\277\222\275\310=\352\014\232\275\203K\276>+\t,=\255u\002\276FN\233=\373\243D\276[\017\261\275\342TP>\360V\261\276\277d\370>\353\334k>\275\263\312=\031\377\341\276s\262\241\276$\363\r>w`|>\233\372\244\276\037y&\276\273@\020>\037\320\222\276\025\373\340\276\343\350\263\276XCH\276(\227\256?\014:2\276n\006\217\277\036\343\221\276\211\010 \276\036\342\363\275S\263\214>QA\243\276(\\\363>@\332\205\276\212\036\031\277\207\234\367\276\315\212f>\353\311\331\273\005?\003>\326\023V>\375\312\035>\270\330\221\276|,\t>\302V\214\276\272kV\276C\366Y>\260E\266\276\307\323\346=\315\265\274=\323S:\275K\304\250>\'CK\276\274\374\321\275\037\001\227<SH\023\276\210P\t\276\024)\257\275\0020\300=\267\216\336>\316\327\240\276"
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2d_transpose_1/stack"
  input: "decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp"
  input: "decoder/conv2d_transpose/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: -0.006453603506088257
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2d_transpose_1/conv2d_transpose"
  input: "decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/decoder_output/Sigmoid"
  op: "Sigmoid"
  input: "decoder/conv2d_transpose_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "NoOp"
  op: "NoOp"
  input: "^decoder/conv2d_transpose/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  input: "^decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp"
  input: "^decoder/dense/BiasAdd/ReadVariableOp"
  input: "^decoder/dense/MatMul/ReadVariableOp"
  attr {
    key: "_acd_function_control_output"
    value {
      b: true
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "decoder/decoder_output/Sigmoid"
  input: "^NoOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 987
}
