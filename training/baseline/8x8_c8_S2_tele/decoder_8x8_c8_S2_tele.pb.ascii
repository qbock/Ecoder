node {
  name: "x"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "decoder/dense/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 128
          }
        }
        tensor_content: "\346.\347\276\2543;?\313\365\n>Cw\206=\375\361\355;\370\r\017\277\300\200\230\276I\'\013\277\'l\034\276\\\357\231>|\325\365>LI\356;2\352%\275\264\217\027=(\017B\276\305\225\374\276\230F\254\275.8\277>\227\242\006?\243\223\312=\177\322\212\275\236\214\002?x.\222\276\010\332~\277\000aw?\232Y?\275\345<\210;\375\025\331=\346\275\352>+\000\036>Y\030\t>Q\213\007?\221\3547\276f\010;?\201\217\204;\332\223M?\203\036D>\213\010\025?*\227w\275G^\007\277\363%\024\276N\005u=\254\200\345=\333T\336\275g\033\360\274\226\006\231\2767\r\351\276\010\002\353\276\341W\243\277\0377\306\276s\203X\277\321\201Z\276\3519\376>&\302]\276\373\227f\275r\304\027?\224\336\305>\314\262\020?\212\205\360\276?\333\026\276\033m\034\277\010xB>\260\320\036\277>\035\203=j\377\364\274\3064\355=!\223\327\274|\006\235\276\304\354\005?\323W\033>\370\340\311<[-\007\277d\327o\276\316\231\263=F\237\200=\211v\247\276@\013\022\276\367\331\023\276\256+\013\277\024m\326\274\233\367\334\274\276\025\214\276M\013\356\275\'S\360\275\250j\356=v\017\342>Y+R\275c\347\223>\317n\030\276M\003\017? \300h=U\377!\276Y\351L?}\311\333\274\302\372\202\276[^\211=\000\025\221=\354\330H\275J\307\007>R\343\013>\3422~?\254\211\027\2760\203\021\276\262\320V\2755\341(\276\002\336\337\276o\357\234=%\217\023>v?\371=\253S\254\274s\231\277>\325d\310>N\361L>\227\367\260?\316I\212>P\360\204\277\362\036\353>I\037B>{\314\014>Ve\201>\224\247{\275\337)2\276l\210\004\276A\335\317\275LY\236=\377\277\020\276\350U\261=\317)\326\275\025l\365>\017z)>@\370\215\277\024\003\267\2760$\r\300\306\0355\277*\006\360\275\004\n\224\275\212\204W\2759\006\003\276\020\323\005?b\246\235>\250=\230\276a\0322\276\3503\220>\255\320\010\275\3248\344\275\262\256\247\274\264\336\266\276_\211\212\276\246\205\237>P\r\247=G*\034\276\374\2165\276\336\333\264>H\312\304\276\335E\035?\355\201\003\274\032:\r?\206\365\r\275w\255\370<\3224\337\274\370V-\275J)\207>\256\361\300\274\343P\207\275Yd ?~\007\360<\267\005\027\275v\363 \276S\315\017>\\}Y>\216G\006\276\010>\202\276\024\'\322\275p\004\035>OB\027>\276\375\020>k\330\241>\270v/\276`\244u>\324\372\276\276N\353\246=\017\377\027\276\017\310\246\275eH\362\275\364]\222>\235\254\371=?\023\033?\034\214\255>\352\333\216\275\202\302\210>@\275\205\275\004\202\370\276\255\362\343\275\222@<\276\242\276%>\357V\235>\325\020\314>\242\326\241>\\\277\027?\200q\371\274a\\R\276\355\306w\276\305\n\233\276\\w\354\275\331\3527\276xb\257\275^\255\315\276\261\343\267>\230\271(?\356\332\366\275\327\177\253\276\002\247\032?%\313\304\276\272\275\030?\225\320F\276F\363\222>\004\324\201?U=\'?\347\343y=\317<:\277b*<>a\236\262>a\255z\277Y\022H\276QY\243:\363/G>\365P\324=l\254\210>\204\022\247\276\211W\000>\014\313\264\271\251\t\305>\275u\226\274\277\032(\277\361\344\205\275\216\n3\277\212_\017>\210mf\277U^\310<?\330\203\276\322\214F\274<\323\213\277\3731\304?\306M\007\277\000m[\276\351\2371?\235\210%>E\'\213=\360\003\266=\005\206;\276p\201o= s\237<\310%x\275\363\241\255\275\356v\266\275\\W\251=\300\235D>\005\304\326>\304\014L\277\315%t\276\270\036\006\300\363\372\363\276\017\255\t\276D\022\271\274\364\257A\276*c\202>\207\n^>\305\226\300\275\307[\272\276\001K\322\275n\273G\276/\332\244\276\343u3\276\3561\212\2741\221\016?\307Z\216>\017\202\304>p\031\211>\r\226\264>\016\321n\277\211\211\245<\355E\272>32H?-2d\275J}\363>\031\n\367=u\277\256>\036\331\034<\323Cb\276s>\324\274\017\220T\276\302\037\r>\217\256\277>\201L\336\276:Z\207\275w[\226>\243\271\362\274Y\220\034\276\205`\213\2750\013\223\276\313\321\262\275\020d\027=x\314N=I\327.\276\240\365\325>W\246\373\2759\351f?\n4\336>\317\374\001\277\201T=>@f\236\275EPz=\034\236Y?3\222\010\276\372\034\232\277\"\\\233=\260GT?\3421\010>H\371*\277\022\036\370=\037\013\202=\216\205\315>\227@\356\275\256\364\214\276\311Zq\276\250\222V\276\277\345\277\275\366*\335>L\244\264\275k\334C\275\036\010\246>b\013+>\245\201\322>)\273/\276\242\220\212?\364\231S>\360+\031?\200z2?t$\217\274\362.R\275\t\206\257>-\356\023?\342}\214<;H\321=\272\n\031\277\327\254\352\275t\332\313\272[So=\004N\304\276K\217\212\276hR\247\277\215\343\205=\345I\275\275;\344\207\276W\200\206>$\367K>\371\337{\276@,R8u\341\036?,]\232\276\374\025\026\276\251\211\025>o&\"\276\035\202\216?\335I\224\276\364\233\226?2\\\037\276[n\312\275\350_\273>\360j\251=\333\\(\276\363W\203?\"\377l\274\226\370\222\277\256\376\262\275\024I\003>\016F\225\275F\033\027\276\013\252F\276\026\276&\276\032J\035>(\037t=6B\033>\204_\372=\341\233\244?\034s\267?#x\221?]-\225?\276v\t@\332F<?rP\"?B\327g>z\014\323=XM\"\277z\315\250?&\350\355\276()\310<\006\324>=\317\250\'\277pO\326>E$\230<<$I\277zmI\272K\315<\275\326_\321\2761\371\n\277\004\006\207\276\327\273+\277\277\301\236=FfT\276\320\203E?\326\321\323\275`\374\177\275qo\244\276\221\327\032<\323\333C\277\267\032u=q\277\240\277P~\032\276\227\024O\276\237\3404>\316E\034\276\023:I\277\277\200L\277\243\355&\277+\2451\277 6\270\275-\225\276\277\215\333\215\275_N>\276\376H\270\276\237\222\300\277\335D5\300\265\3349\276<\212t\276g\231w\276X\354\024\276\3350\210=fn\354=EuR\276\200\006\303\276\314\250\264\276\323g\321\274\313\212\365=[\365\345\276[I\271>\237\320\222=\312\216\027\2778R)\276vvB>\230\312\317\275\356Y\265\276\220*\340\276?z\340\276~\310\202\277W\251V\277\3661\270<\21238\276\230i<\276tf\026\276u\306\273\276\005=\375\275j\017\203\276\307|I\277\275\350\n?\321\350\325=\3721\226>\212p]\276\274.\346>W\347\214\273\324n\001\275{s\017>\025Uq?E\013\364>S_w\275>R\351=\025\341\273=\225\232\016>\251Kv\277\215\241\331\276\213?\312\276\3416\254\276#\227\023\27691 \275\310*)\277\237w\367<\250\264\214\275.\313\302\276\243m\001>\372>\n\277DV\014\276G$k>\232\221\270\276\325\274G\274X\034\241>J\345\r\277\374\257h>5\330a\276e_\237\275e\240\311\275\356\305\303>\375\r*\277X\205$\276\267A\253>\350\200Q=&\325\036\276\243\330N\276XB\232\275j\363\030\276\3646\313=p\364\371<T)\007\276\252y\227?\334z\247\275\224_\022\277s\355\035\275\361\371g\277\374c\200?J\377\207>\336<#\277\216\260\247=6U^>\213\243p? \371\236>\343\342b>\031\224\022\276o\2327>\345e2\276\0133\036\276\302\303\277>\345e\003>q\364\235\2769\215\310\275N\245F>\261\341\203\275\272\020\220>\021o\240\275\355\332\007\277HG\037\277\034\322\274\275\226\2723\275\0240\332\273k`~\276D3\300\275\303\364,\276\344\325\302\276m\223\262<\257\253\037\277c\355\007?\"rW\277\217r:=\001!]>7\t#>\306|)>\301\215)\275\274\345_?\017\322\010\275\211\231\300\275\"\357[\274\221\307\235>p\322\230\276\321\374{\275\371\254\020\277\275\342o\2762&\036>\2402\212\275Y\242\224\275\004zn>\006\251\241\276S\226}>\\\321+\275r\275\264\275\253\243\t\277\352\030$\275\250\264\224\274\002\002\002?\307\335B>p\365\242=\351c\327>\224K\232>!D\323>|\332->\271\304\305>\222E\360>K\201\377=\333\002\006>\300K\351=\225}\211>r\363\200>E\256\276\275b\340\261>\244\023\335>\323]\356\276\202\354\206\276\344~\023\276\201`\227\275\301\220\277\276^*T>}\276\217=\231\214r>\214\221\\>\371\256\226=\207.\262=\021c\035>\024F*?\303\213\036\276^-U?\375v$\275\316\223\211>&+\234=-\'\016>[\232$\276?d`\276\021\377r=R\350x=\316\306\267>G\214b\276c\036\271>\221q!\276\351\375\036>\001\231\302>\013\026\231=\357m>\276_\337#=d\t\262>\341RY\275\356\237K?\323\235\312=\226P\256\276\325\355\326=\017I(>\312\031\337\276\253\325\322\275\250\304Y\275%\366\312\275\000\3668>y\2546\276\314\353\266=\243@\031\276\374\215\371\275\007\246\311>{\356\031\275\346\353\211\276\000\320\205\276\377\323\202=\345\010/?\231<\220;\375Q\346\276\375*x<\3054\356=a\335\364>\320|G>LV\"\276\212#\000?\354\030\030?\270\347F\275\251\272\013\276,\346\323;m\240\"?e\\\327>!j\262>*,\324<\3447\016?\347gh?\323+\010?\350\374\300>\317\263\344>\016\3458\276+\306\001=(>\322=q\377\317>q\212+?\353d$>\014\303\324\276S&\351<\033\214\212\276\361\245\210<\267\314\335\276\016q\217\275R\232\227=<\254\342=\3223\360=\013\375\220<\276P\177=\004\330]=\370\332j\276\256&X=oc\252>W\205\324\276\372B\010\275\210\2674?\014X\371>\324f\022?\036v\t\276\354\237P\276\370\343\241>\352\211R?\251\244\006?=\032\316>B\261\016?\347\371\354>,\260\000@\254\342L?\314\234\'?\225\331\240\275H\302\221=\361\272\306\276\270\343\325=xU\006\277\370KC\276P[\314\276\256\200\001\276*7\n\276\227bk>\230g\327\276\2408\254=\")\370\275\213\330\003\276\217\306\244\276\345\007\206\277\311\017%\275\214D\177>\033:\345>C.\301>3{\337>\013^\371>\024\014\017\276\037\341)\276\2018|?\"\371~?)Q@>\257\200@>M5\366>p\320\332\275\025\303\252?\322\n\r\2762h\351=\241\2036>\307\244\224<3\314\223>]h\311=\303\000\n\2764\371\346>^pm\2769\204\263\275F\347\024>\007bU\276\013\202<>\363\312\'\277\024=\031\276D\305\202>b\326)\277\276\037\206?o\222\216\276\300\021\243?00c\277k\003\205=\n\2466\2763\005\276\2750\231\234\273\304Y\210\275 \037&\275\2208\233=X\263\367=\204\016T\275o\216\036\276@\354\034\274\2052%\276\023R\200\276\010\310U?r\2255\275Ht\037>X\306\231\276\222n\340\276Ba\363\274\020\035\336>VEW>\005 C\277X\305\021\276aL\002\277\364\277\233<\307\364\200\276\324*\303\276\305\324\244;\214\013\020\276K\330\020\277\260K\036<\304]W>\240\250j\276\350A\000\276\315\004\247\275\272H\021?\302\306*?\260\316\270\275\360\021?\275\2429v\275\254\375\235\276\246\251\177\275.K3>\226\017\305>!zl\276\030\025\242\273\2502\004\276\200\373\224<E\311\271>\304\t\313=\256\361\330\275\330\266\333\275O\334\332\274209\276\277\350c<\266\016g\277\324\2339\276\264L\222=?\031\022\276\243\372\n>\263)\200\276\221\2527>\006\247\232\276\221-\303\275u\303\257>\235@\321=P\213\033>\225Ix>9\376\322\275\205G\242>\211\236r?\357\371\022>ey)\277\320\336\205?\321Nk?\261\340\333=\262\201\030\276+G\010>F7\013?:\252m=\355US?\343P\227>\222)\031?PU\032>\317yi=H\324\337=\255u\245>^\320\347\273\025\333\032>\260\010\253\274\313\205@>C(\247\276\262\333a\276v\035\242=s(\\>\341\035S=\350!\351\276\367\263\232=8e\273<\2740\310>I\345-?x\312l\276\266\254\370\275\203\322\235=-@\201?v\016\216>h\242\223?\265\333\226\276\224\317m>\375\311\234\275v\347\306\275Y\303\004>M]\233?\030\234\326\273\363\302@>\250X\226>\226\341\222\275\340{\001?F\324\002\275\236\025K?Y\301\226>\221\241r?k\036-\277B\371\345>\337\224\323=\333\216\300>\232BD\2772\375a\277\r0L>\374\242\n=\025=\333\275\030B\262\276\340o\251<H<\021\276t\260C>h\367\246\274\210\241\253\274?\370\253\2750\r\210<|Z+\275\266\300\025?u\321b\277\303\302\016?;y&?\334b#?@F\023\277J<\035?\212W\025>5\372Y>\361Mq>\372#\\?\026\352\211><LW\276p\212P\276IH\220\276\030\201\023\277\010\344u\275\344v\264>\366.\312>\342]\251=\335C\377>\005O\207>\304\0264\276{.Q\274\201\016\212\276\240\361I>\202E\241\276\344N6\276Y\010\331>\225\362)=\016\340 \275\251\257\"?\326\264\252\2755\\\364\277\261\223\336\275\244\360:\2764\265\035\277\272iK\274\366\311\035\275\03226>h:\360=\023t\014\276\274\266L\275#\325#>\337\0362<\305\027z\276\r\353O>\375M\023\276\361\037C?\204Q\\<\377)\344\275p,\305>\241O\177\2774\357\302\273\202\232{\276\213\246\354\276gL\353\276\273\306\024>Z\360R=\275V\036?7>\016\275n\377\234>\215=h\276\025\350\366=mc4>eWq\275\342\317\214>\\O\213=\226\'\227>S\231\217<\221}\001>\371\216\032>\323\360%\276$\036\344\275&1\360=\236i\345;q\277\366\274<\213\263=\354\201\005\276\266\221B?\216C\212\276\3708:?Y[?>\300\253^?\t\035\323\276\364\327\303>RdA\276\312|\201=\033{\206\276U\300f>\356\3144\276l\262\376>>\301\243>\200\013\202<\0149\207>SW-;\267G\244>\2169.>\325\020\366\275p\266\014<\220\251D?\355\332\331=\361\322\236\276\2411\334;f\377\210\276\021\263\317>\032\030\255\275\255\257\254=\342]\026>\334\373\215>\247s\211\277\321iR>$F\272\275vO\251=J!\353>\310\016_\277\004\364\030?\262\373[>\362$\262\275\233\264F\276\034T\240\275\331\300\037\2768\320\337\274\\0\242=,\363\304=H,\305\275\2204\335=X?\313<\213\006\300>\363*\365>(\313\230\276\004u&\276\370\251\002?\206\317\201\275\365\303\266\276!\220\006\276\376\257\243\276\353)4?\230\315\032?``\244>\2771k\276j@=?\r\332R?*e\003?\246<\377<\236\277(\276`\342L>!N\215>\300\200\244\276\340*\003\277\204-\343\275\227\022\200>\030t\322\276C{\330>\274\200\331\275Sb\267\275\022\267Q\277g,\264\273\3251u=\312\030O=\241/0\276\325\177\325>R\252g\276>7{?Y\021M?h\037$?\3724\356>\233\030b\277\243\302\030\275\362\2119>\214\217<\276w\272B?T\215\020\276\311`\316>0S\232>\227\3743>\317\336\345\276\307\336\025=\211^\222>$#\326\273y\276\370>f\311\000\276\033\331\020\276\332^\007?\017\204(\277\363\233]\276\255?\234\274\335\r\305\275\356\205\000><1\250>Rn\215=\347\007\213>6\262C\276\024\0313>\000(s;`\255\321\276\275I\224\276\364\356X>\323\2711?l\215)>\327\335\303\275\017\353\223=\202c\027=\322\245\347=wW\177\276\376\332\300;\227\202\366>\311\336g>\314\311\251\276!`@\276\023]@\276@\375\t?V@\351\276\375\013h>\275\002\376\274\345\316\374\275\213\337>>@C\340\2758\000\310<M\nn>\315]F\276\316I=<\263k9?%B\255=\347\223\23697z\317\275\023\002b\276S\332F>\016\222\003\276*\361\\\276i\"Q>\242\337\001>w \254\275\225\016*\276D\300\004\276@\252u>I\377[=\235\033\264=,\201\274\277\223\300\270>\372\261\032\276\016Uw>\3625&>\205/\001?* g\276\376\r\023?\010\372\275\275\224\326\026>\374\022-\276\020\250\031\276\236\265\027\276^\276\000>S{&\276\300\331\342;\350 \204\274S5\301\275\200\227\036\277\265`\014?\206\333\026?AA\323>E*\272?\2037\006\276Q\343\220=\346\323\027?\367\007\217>\220P\324\275\354\274+\276e;D\275\250\035\316\275\364\346C>\267\275\277=\201\251<>\310!@>\240!\236= 6\305\275C\037%\275\300O?=\2636\216=\211\016\n>m\313\204>\300\260\003<:\322\270\276\310\2759\275\023|\000>\324\245\001>\371\363\340\274\251\217\302\274\002(s=\203\314\010\276~\325\231\276\307^\'=\330R\207\276Ch>=yAZ<o\355\307\276\274\234/\276\337\327\025\276\302\035\221>\320~?\276\226}7\277\025\314\306=\016\372\212>\320\205\201>\225\273\226>\330\221\037=\235Ap>&\240\273\275C\300\330=37\300>\271\342\211=p\253\350=\302\342\003>\2427\004>\276\327D=A+\313<\323^i=W\344\214\275\264\367y\276\243\010N>8\306\363>\376b\206=%\005#\276M\026\361\276k\367-?\263\237\367>\341;\372=\005\236Q>\245,\003\277\036\333\225\275\345(\310\276\356\014&>\356.\\=5\330\006?\t\267o=\375(\211>M<\000\277\2471\"\276+\242\276>\376\360\\\276X\303\311>\367qC?\257\202\371>\320\355\211\275r\321\014>\230\300\001?c\326\017>\232)\325\272\336]%?g\347\225=N`<\276\243\336\325>R\255f<B`\277\276\036B,>\205>.?azT?\374B}>dI\352\275\346\337\225>\r\250\370=@\270$\276\266\300\026\277\277RQ\276\2639w\277\206\210\323=\373o\216\276b\221\007?\340\325\327\276\253\304\244\276atl=\301#\004?\270\316\352?\207D\303\276\244\372\225\277rW\'\276Yu\257>\000B@\274t\370\261=|\206\260\275R\024\034\276\350\236\362\274\004\262f\275\247h \276\241\364\034\276\251\267(<\003~\304>M&\222>\344+\030>ij\001?\223.\343=\334>\203\275L\346H>\3715\375>!}\251\275\366\223h\276#G\350>)\325\r>\342)^><\037\347\275\310\376i>C\273.\276\220\353(\272`M/\277\034\262S\276Q\213\222\275\374\2066\276f\366/\276\003\300\364\275\256%\374\274q\271O\276Q\255\373\273\252\242r\274\371K\265=\301\260C\275\217\202\355\275\271\334\332\274\274\362\211\275\312\017\207\276\310\\\207<\253\027\366=\274\001(=\222\313\203=\013\233\025\275t\004\357<\315y$\274\266ew=\364\030\023\276\357\232\035\276\261\264\275\275vM\245\276X\326N>\274\331\226\275\323d<\277\006\323D\275\266\364\212\275\235\334\331=B\226\031=\013\'\200\276\272\236\000>\036\251\202\276\233B\236\276\235\032\331\276\252\352\243>\222wH=?\234\271\2755jx\2773R\274<)\247&\276\303\362/\276\021\241\246>\370\330\006\274jB\001>O\376\300\276\326F\006>\251\352\377>:l\220\276\247\304\347=\347\314\217>\351\024\255\276MR^\275\262\331\200\276J\365\311\274!k\240\276&\0213\275\360\363G=\346&\031<\335~l?\355\220\366>\267Y\372>\025\2118>\034|\037=\206;\212\276\031\247\236\276\243b\341\273\222\224!\276\355\207~>\215F4\276<\327w=%R\020\275\032\332\364=\201z\376>\006I\275=L\330\272\276GX\032?o\352\327?\333$\270\275n\274`?\356BV\275\365\335;\275Uu_>]\252\347\275\346i\263?\352D[\277\022gt?K3\302>k\372>>\311\016d?8\026\275\277\245\033\022\277H\214j\300\3416\223\275\374\335\352>\303\2110\276@+\005\276@\317n\273\324?\361\275\352T\017\276`M\263;\310\021\014\275\313\2205\2764\002/>\246\264\027\276e\321\340>Z\352\272\276%BH?\351\373\355>2{\350?\302\353\207?\375\322\245> #\n?^\376x>\\o^\276\330\361\221\275\217~\305\276f\t\207>\274\215|>\250\204\241>\214+\024?\352\207\031\276\216oL\276&\227\204>\177j/\276-\250\307\274X \226>:1\214>\326\247\325\276\332\024\230>\232{N9\'\215u>\321\215\013\276H\312\237>\354\223\351\274V\357\307=\216\313\223\276hD9=\240M\020\276\276/\207=\342\3256\277\272\341\"\276\203\362a=\337\232\310>\021\274\"?\373\366 \2731N\265;\251-\226=u\310\314>\200\351-\276\365\371\217>\357Z\">\266\243R?\371aO>$\322\221>\204uI\276d\016\373=|Q\327>ad\320\275\337\237(\276\\\366R\276\"_\027?\322\367s=28\"\277^\275\265=\367\317\237>\n\315\204\276\336W\207\276R\013\340\275\203\347\333\275\237V\214\276\370\2110?\304J\204>\nf\320=\033\001\215>Zc\020?\235 \037?t\201g=-\311\336\274\\j\212\276!3\354=\306\252?\275\364\r\227\274\322\025g\276\rU+>\034\376<\275}<U\277~\200b>\252\204!?\'\032\227\276\010\314\357\275\217\316\376\273#N\346=\377\274\341=b\363\005>S\2725\276+G\036=D\236m\277\377\374\223\276\215c8\277PSV\276\315\352\325>z\340r>\261<\335\276\235\255\316\276+\230\271\276\037\274\033\275\2514S\276\205~\343>\273\025\341\2750\033\207>ay \276\275\305\211>\225\374\350<\326X\262\276\276\246\031\276_\354g>\245\311|=\242V\303\276\231\007k?\314aH\277\034\266c\276\326\"\237?pO\024>\254\306w\276N\370\033\276\316;3\276x\335s=\004\025\032>/%\017\276\262\013E>\250%\335=\310|A>\271\2158\275\244W\013?\205\251\013?\212k\t>\034M\025?\362\347J?u\212\233\276\004g\315\276\265,\375>\215\034t=\376a\001\277\036\366D>\221J\325>5\231\262>`\177\340\276,/\213=\225\005\006\276\230k<=b=8\276\262N\270>cQ\362\275\276\351\267\275\256\276\351=e\237\346\275\005\331\344=\246\2577?\3148p<w\3114\276$\377\332\276\037 H>i\035t>Wn\305>L\2000>\236\\\026>:\231\332=\023+\010?\026\004c>#\004\227=,7->\020\2457\276\352)\266\2747{^>\021k\006\274n\257\031?\226/@\276g\271\240\276\020\350\343\275;\254e>\026\220\005\2770\021\005>cH\257>\325\223\372>\014\253K\276\305RA\276\271\261@\276\006\261\331>n1s>\304\2305\276\260\356>\276d\023:\276\334x\342>\rX\237\276\373\247\202>\262@\245>P\342\n\276\332p\331>rX\275\274\252f*>\272(1\277\320#\303>\316\017p?[\304o\276\320\302%\276\364\264\212=\254W\372<_vz>d\330\201>^t\261=i=O=S\365\003<m(1\274\244\250\030?g\327\217\276OnB?T\"\377\275,@\005?z\353\374\274\372[\211\276m\025\035>\356\364\270\275T\030\307\275\356\360\374>\341\021\002\276\017\001\275>\307\370\026?\365-H=\336\226\337>\265M\310\275\355\346U\275\234\272\376>\232\250\362>\362\341U\276\230\345&=kC\265>\326\005\000>\333^}\276\3452r<\363q8\277\023<\317>m0`\277E\314\233\275\377M\352<Q\033p\277)=\177?;\276\006>\'\034@?}~p>\275\362Q?Y\202\033=\207\303\322=\370\275\332=\266=(\276\210@\315<\250\335\243\275@\002\031\276\250Fy=\320\366\256=hH\257<Y\231\n\276?\345\263=\363\365\250=\027\343\226=\210\253\317>H\212\253>\211Q\035\276\311\222\004=\342\245\343>6F\020\276\314\273\250\276\221\204\002?\024r\030>\315\361\000?O\2545=rr\260>\010>\007\2760\036\326>\371\371\320\276!\367Q\276n\201\303>S|\272>\377\224\013\276\302\014\312\276\351\252\t?\316*\311>\020\376\312<\237\025\005\276k\370\231>\014\324\327>U\240u>J\377\202?np\220\275\334\303S\277Z\270\225=\204\322\327\273\276\003Z>\347\r\362\276\234s\270\275\002\303\"\276\360\014->o\006l?Qg\342=\200\301\007?\362\337\002>\341\273I>\026\347\205>\005\265\330=\365\244\222?3\324G>`b\260>r\t\341>\023W\266\274\311oZ\276\245\276\242\275]\351k>\245\035l?\357\222\257>+\3450>\252f\005\276#-\361>/\376\t\277\276H\032\275\036\365*=.\037\275=KE\312>\204(?>\023\210\023\277\265k\211=\203\247\257\276\345V\003\277\354\274\212\276a\304m\276\307\303\344\275\027\216\r?j\200\220\276\0044^\276s\373\002>\276\331\213>g\335\341>\327\244\230>\335C\243>c=\271\276\273\244\247>\363dw\277]\357\362><\376 \276<\372\206>\311d\257\275\256\306\254=Yi\272\275\306.\374\276\204\246\001>\243~\001?\001\013\025?\202\355\215\275\320\367\233=4\315\373\275\265\220\201\275\316-O>\270jF?\305\232\024>h\204\005\277U\203l\276\323e\354=\376\260\337=lX\336\274\261\210\223>0f\333>\211\253\004?q\014\375\277@\177\366=@\021{\274\314\016\271?\221{-\277H=\026\2767k\361>\333\025\035\277\220P\343\274@c\374>,)\217=\355R\t\276\002?\n\276\227\2350\276\230\231*=$\342=\276\370\334\254=F$\010\276\322L9?<\245T\277\2440\264>)\215\222>\364c\252\273\214\020\255\274x\237g=\222\362\226\276yk1?uE\261\2762v\343>\357\352\324\2756\302\335>\222\024\202\276\017\331s\2767V#\275(\346\005\276\307(\373=u:C\275*H\034\274S\252\'\275?\226\212>LX\205>\223\237\201\274\307\365\271>\316\353\267\276\347\313\256\275\313\032\237\274O\232\314\274\315S]>\237\255%\275\323\'\311\275q|\217=\354\016\247?!\341\001=\3463Q?\355\342\001?\365\257c?\315\325\312\275h\230\224>\277\3455>+#\013=\231\026V\275s;\263>\243\350\335\273g\205\026?H\362n>c\310\321\276u\255\347?6\356\355>\236]\027\277r*\220=\221\245\213\276iB\n>\235\016\200\276k\253\336>\037k\001?\317o\004?\330N\251\275\277\271\214>\343z\257\275\234\n\363\275\0330\263>\217\0109?@S\014\276t\274\314\276pf\272\276\345\331\344\276\t\200\266>5X\r\273\216\024\007\276\215\337\200<\231G\256\275$dM\275\321\207C\2760T\316\276\267\310\310\276\0308\"\276\324\245\242\276V\027D?/\256\320\275q\371\252>\020\231\340=\201\\y>\311\331\205\276\346\363\235>[\256\025>\2618\352\273*\222\220=\336\247\361<>\005\304\275I\325t>\231\024R?\340\323\312=\330\311)?\337\355\266=\315W!\277\005\244\034\275E\025\346\275\017\262\002\276\305\002\212\276 \2719\276\314\360n<F\002\222\276X\307\035\276\312\265\300\276b\367#>\265\302r\273g\277\264\276q^\205>\354(_?R\277\347>\245\255,>\354\'\236\277\023L\260>\200\267\343\276e^p\276|\225\374>1~\215<<\362\340\273\254R\222\275\233\275\t\276\234\246\014\2760\013H=\212\3057>\244<;=\031\027\331\275\2251+\276f[\323>8K\202>\213Uk?\261@\277>\333\306\226?E\346%?\227\203\t=&P\341\276\370L\311>\232\004;>\221\376\266\276\031\251\376>\246T\007>\036s7>\217\266\366</\214|>\032sL>\230\264\021?\230\020\n\277\340\307\374\274\251\301\357>\211\351\032>\372a\323\275\013\310m>,\001+>\354[\t>p,\270>7\335\253\274g\347\010?\342\325e\276)\337\236>bk\222>\324\235i=\255^\250>:\221|\276\376\t\341>\221\225\n\277!\262\370>\225V\"?\253\036^?\0014n\276\350{\301\275j\345\266\275a\253\"\276U=\016\276\\8\277\276+\257\311\275\334\216|=\316\246\244\276\006Qa\276\367.f?\377\362}\276\000\\l=\225<p\276Z\034\265\275p\204\354\276\315\201%>ty\361\275\320\262y?b\303\310>\022\275\334=\334\217\243=\342\327I>\0366B\277\304\022\321\275\230\007\202=g\372i\275\221@)>?\240\371>\'1\005>\251\315\220>\241\350y?\222r\220\275\247q\r?\256d\317>\224l\233>(\310\354>{\321\n\276\310\005L?\355\227\247\276\320\275F?\227\206^>\374\344\262\276\0225\213\276-\272!>\373\324\223>\227Z\030\275W\366z<\264\241\257>\257\247b?`\376`\275\355n4\277*\303\315>0\243\275>J\335x\277V\206R\276Y\2732>\250\342\034>\273\242\305>\370%\373\276V\"\203\277\212\236\323\275`\200\334>\262\267\245\275C\325T\275\211`\373>\357\016H\276D\353F?\006\r\315<j\205\351>Q\360\253>\371x\313>\335\210\232\274\n\317\200?\312\317w<u\264J?0\010\355\275\253\215\214\276\264+\262\275\212\364\330\276\260\025\211=WX\342\2750.|=\236\t*\2768Th=\360q\267\274\020aH\275\330\352\210="
      }
    }
  }
}
node {
  name: "decoder/dense/MatMul/ReadVariableOp"
  op: "Identity"
  input: "decoder/dense/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/dense/MatMul"
  op: "MatMul"
  input: "x"
  input: "decoder/dense/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/dense/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        tensor_content: "\316,\275?\032\314C?H\013\007\300\223k\232?@<\227\300\350\312\355\2772O\032\275\335X`?\354\023\254\275\217!n>\341\270\231\276OuE\277Ow,?]p\306>\257\273\213\276K\241\032?S\325\177\273\337\020(?\355\200\211\275\263\222<?8\224\030\277\032\223\240\275\250\235\265;q?\277?\020s\010?4Z\016?\026\237\320=\324K\365\273\240J\227>a\243\346\275\023\322\306>\270\231\002?pn\204\274\357\200\240\2760\333\340\274\211J\232?\026`\023\277\366\217G\276\010I\265>\246W\310=O\270\021?\003w\207\276=\334t\274\316\206\026\276\323\227\276\274wB\202>t|\204>\t\216u\276Z{\267\275\325\211\3279?=\206\277)T\n?\233\215b>\236\2622\275\340\275j\274\332tK\275Lo\343\277Q\234\030\2764\273>\277\346l\206>\220\022!>;[\017\300\302oM\277\355UH?\371.\371\273?8P\276:u\305>\312\365\373>\211f\030?\227t\020\277>O\005\300n\0163\274%P\032\275\027\231,>\225\300\354\275QB\335>\221X\347\275z\213\n=Q\246b\277\032\241\273\276\307~\217\277,\032\003\275\346-\306\276\355\005\026=\3660\014>\303\313t>Yw\253\274\340?P>\037cf>\026,L\276*\304}<[#\'?\315\303\243\276\000J\004\276\373\213p\277\024\272N<\3104f?Q\241\332=\276<@\275m\275\347\276\024AO\277\034\255\334\274kd\035?\213\270~\276\330\323\'\274\273q/\2761\217\003\274A\026-?#\237\n?\217\314\351\277\023A\230\276\025\367\265\276r\027\365;\355l\n>\306m\302\275\360\367\031\276ya\226>p\205\350<\022j\273\274\374\316\215\274\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/dense/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/dense/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/dense/BiasAdd"
  op: "BiasAdd"
  input: "decoder/dense/MatMul"
  input: "decoder/dense/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/dense/Relu"
  op: "Relu"
  input: "decoder/dense/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/reshape/Shape"
  op: "Shape"
  input: "decoder/dense/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/reshape/strided_slice"
  op: "StridedSlice"
  input: "decoder/reshape/Shape"
  input: "decoder/reshape/strided_slice/stack"
  input: "decoder/reshape/strided_slice/stack_1"
  input: "decoder/reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/reshape/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/reshape/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/reshape/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/reshape/Reshape/shape"
  op: "Pack"
  input: "decoder/reshape/strided_slice"
  input: "decoder/reshape/Reshape/shape/1"
  input: "decoder/reshape/Reshape/shape/2"
  input: "decoder/reshape/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/reshape/Reshape"
  op: "Reshape"
  input: "decoder/dense/Relu"
  input: "decoder/reshape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_transpose/Shape"
  op: "Shape"
  input: "decoder/reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_transpose/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2d_transpose/Shape"
  input: "decoder/conv2d_transpose/strided_slice/stack"
  input: "decoder/conv2d_transpose/strided_slice/stack_1"
  input: "decoder/conv2d_transpose/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2d_transpose/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/stack"
  op: "Pack"
  input: "decoder/conv2d_transpose/strided_slice"
  input: "decoder/conv2d_transpose/stack/1"
  input: "decoder/conv2d_transpose/stack/2"
  input: "decoder/conv2d_transpose/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        tensor_content: "\r\354O?\2508j\277\025\202R>\320a\240>\236\342\007?P\252\226\276\277\3765\277\347\021z>m\322\253?\365(\\\277\013\234n\277\000Q\n\276\034aV?\233T\031@\254\257\263>s\242k\277<\306\"?\323[M\276\264A@>\216\3021?\361\343\361>+))?\230\213\017?~\211\245\277\300\177I?\024\007\316\276\233\2307\277\204\232\211\276\217Mn<;\237\031?\247\372b?n\341M\277 z\003?\205\020\016=\016Jb\276\343\300\313\276\007\203\024?\033m>?w}\252\276\242\253\263\275\366\240\016\277\303o\266>=\223\023\275\333\204F=\227\3733?\214\3678\276\2218\305>\026\224\374>v\036\373\276\331\255\240>\247?\264\276\2260$>:&\322\274\244\330#\276v\327\014\276\023\201\301>\364\267\214\276\247\224\256?\356>\266\276\324\230\356>ME\317??\000p?\004\t\355>\377\003\222\276\203\025\267>\353\341\013\276\344\225\361\276\230\271.\274\375\344\000\276Df2>AFL>v\367Q>\263\364\307=\332\311\356>WZ\372?\370\224&\277\211\301P>\031\3434\276\211\305\\?\266/\216\276\303\017\213\277\3577G?\305n\227\276\316\354[=\t\344\206\277\274\337\010\276hU\\?\360\026\232?\312\351u\276\362\343\024<\306\267\237\276\010\324\224>\264\324\203\277\334\241\310\276\300NV=k3\226\276\266uF\276\2521W<\214\030\027<\342O\245>u\373\253>\314\275&?\3564 \276\233*\206>\023D\243=\370\r\264>\032S\244\2769\305W>1\233\350>#s\257>\212\316\216?\373\350*\274\206\026\t\2766\347\000>\274\301\013\277\340\000\362\275\302Z-\277\223\241\336\275\356\254\223>\311\276\021?\371xC?\255\023e\277\212E\244\277\333\007\033?\2527D\276\377\n\310\276I\205&=\245&>?O:0\275\224\233\273\276q\220\030?\310\310\024\277D\201-\277\007k\216=M\353U>B\203\262\276\213\343\035?\316\264H>\263/\246\275\032\244\201\276\020\346\323>\241\333\023>\231M@=8\304~\276\365\227r\277\365\226\207>YP\203>a\266\236>\320\366\032?\234\372\247\2762^\n?\363M6?4E\025?K\341#\277\255\030\255\274\317\336\326\275\223\031\335>\222\357l\277\352\025\032>\266\233@?m\222\023\277\264:c=wC<?8&\217=U\261\'>^mK\276Ks^?\246fY=R9(=\332\001\354>jPr\276\314j\332\276K\215>=\300\252a?*\341<?\277Zs\277\330\233&\2779\270\366>,\031\342\276$J4>\307]X?B\021\027>\261\204\341\276\373\245\272>\277\320\375\276\254\014\027\276\023S\203>E\2038?0\240w\276C\366\251>z\032|?\254;\224>\016\352\263=\317\213\220;1\327\237<n(\205>5\354\316<\373\355\004?\017\326\357=S#A\273(\332H\277\377L\267\274\355\372O@v\352\206?\221 \205\2779\343o?\3569\222?\240\007\367>\010\0059\277\320V\316<\315^h?\013k\203?\203\375\237>\224h\207\276V\201.?\'m(\276\303\216E?/&\001\276zDL\276\033\225\325\276)\205\315\275mg\214> \377\374\276J\237\031\276\016M\013=i9o\276\222\353S>#X\263>\315\336\261>\005\001/?\252|\234\276\276Ye\275a\347>\275\304\241\037>\'hK>\212\312\361\275x\305_>\233\213\212>L\307\225>L\206#\275U~\255>\023\263\024<C\222\221\276%5s<\215\302\230>*\272\316>\313\277h?\370\021_?d\212\377>\320\236\305>X\322\330\277\361\366\234\276\215r=?\2432\203>\337:\251?\334\362\371=+(y<\251\021\036?\021\035\223\277\240 %\275\016\007w\275\001\363\265\277j\354\200?\257\006\213<r-\006\277\351*m>\3760\224?\215\306\014?\353\006M\277H\330\334?\245\025\333>B\222k\275\214\021\017\2772\370\356>\277\036\326>f\323\023\275\353D/\273\211C\006\277\010H\356>\271\3514?N\272A\300u\227X\277z\311l\277\014B\204\2773dp\275\217Y\207?\213A\006\301\006J\177\300\375\325\005\277g\355\354>\002Lc>\317F\352\273\302\303\033>\023\356\266>\212\305\327>\017\231\264<a\234A=h\342\317\275\3050*\275\033\231\233=j\302\325\272\2265\304\276Md\323>\214\316\r?\346px>#\216\017\277L\217S\277\025z\274>H\341\243?\324\357\204\276\363T\214\277\232/\206?\300\236|>;\223\215>\304\363\032\275\312\023\242?O\323\312>\321|\271?\3345$>\214\t\221?hfU\275\240\004\226>\257\355?=\002^W\272$\216A=\000\341\010\276ak\347\274\363\256\273=\372\305\332\277\270\354M=9/p?\034\317(\277\363\025(?\004L\361\2736\365\344=\274\267\222\275\274\307\t\275\371\205\364>\257\221\257>}\204\027\276Z\372\361>dM\334\276\340Ti?_\260\341\2766\342u>\314\n\010\277\344!I\277\245\277\t\276\314\241\252>?\273-\276\234\241\234\275u\017\034\276Y\250\262\276&<^>~\205\r?;\350\007>w\250\230\276\261y\313\276\205B\001\274^n\215=o\351`\276\273\353\253=%s\005\276\035\274\216\275\240*#>(%\226=!jO\277\001m\240>]\256\002=\350u\230>\352\014T\276W\274S>\267\372\326\276\210n\362=m\242.\276\366\341\320\275\253E\250>!P\373>v\365\334\275\2554\027?\273\244\372=\254\226s\275\013\373\300=\220\343(>\306\202\203\276\026Z,\277\023\272\t?\037\276\266>\225qb\276\324H\016>9W\245?\207\036\001\275\013\231\216\277\304\031N\275\213G??=\207x?\215\203\212?\244\340\265?g\022\'@\265\244\'\277\370\232;\276\272]F\277\270\271i\276dJ\312>\265\343\232\272\214s\020?\001\3576\276\300_\375>\031\256\234\276\3001\177\276\330\300\261?q\324:>\001\334b\276\323\260\353\275\351\2349?p\266\371\276\222l\303\274#E\307\274q)\304=\037\265Y;\"\000\275\275\270\374\267\275\210\363\314>\001\253>>\246.\236\276{i\325\276\231\255\342\275\216lv\276\005\275*\276\363A$?\206\212\t?1\310\226>~\233\335\276\307\331\343>\233w\305\275\313\035\r\277\227Q\332>[\3602?\027\026\264>?\330\347\275\371R\220\276\310\231]>\200.\037?{\257\254\276{\204\273?@\301!\277\337\377[?%\3433\277Z\t\325=ze\301>\370O\271\276\352\250`\274,1\257>\243\350\303>M2\010\276\331F\204\275\340\365\033>\332\261\200>\037F\004\276zR\241\276\333MC\277\235}\243\275,X\033?\324\360->\224F\341\275vH\201?\376\014 \277\314\342\226\276\\\304[?*\207\021?\354Z\202\276\235\341+?\220f\351\275H\300v>\260\n>\277\003\242C>\314\026\364>j\215\023=\316\016\010?\035\361J>\234\207\301\276[W\204\275\3762O\276w\031f>\345\217\031>\323s\025?zld>\307\227\346=\265Ca\276\361>d\277\261t\266\274U\301\263\275\204\231\177\276\227\376\223<\351i\345>Hg2>\355\264\001><\310Z>k5\000\276k\302:>\2462\000?\310\367\202\277\"\264\201?E\342\335>\243\0139\277\276b\035\276\327\006\263>\r\213\030=\202\317\275?\006\301\220>\353\035\005\277\363\375\010=\361\\\227\276\212\3721?q*\260;\210\006\034>[L\305>:x\353<\247\206\024\277\351$\304>\271\317]\277\371t\207=_\"3?\277\224\255>\006\354\243\272\203\335A>u\300\203>\004\357_\277\254h\201>XA_\276:\355;\276_aR\2768\022}?\n\357\004\276Y\244D\277/\304\024?\264\001\217\277\217\230\343>\234#\261>\2236G\277-\232`?o?\301>\220\333(?j\243c>\366m\265\274}C\334\274\376\240A=\233B\037=\r\242\310\274\251\260\211\276\033b\373\276Y\376\"<\350\257\317\276g\203u<\241\rz\276\257\037\303>\\\007x>Hw\306\276<\360\250?\241 \206>*\316\236\276g\267\303\275\027\\<\276\222\354\004\276\317\'\007=\223\353\346=`\312_?B\342\327>\007\301\226\277\027y~?T\346\363>\237\217\341>\323\235\375\2767}\377\276\311\213O>\023@\365="
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2d_transpose/stack"
  input: "decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  input: "decoder/reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2d_transpose/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        tensor_content: "\241\245\336\275\321\355\317\276G\334\r>\363\316\203?\r\275\261\276o\363h\276om[>\232\016\016\277"
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_transpose/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2d_transpose/conv2d_transpose"
  input: "decoder/conv2d_transpose/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/conv2d_transpose/Relu"
  op: "Relu"
  input: "decoder/conv2d_transpose/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/Shape"
  op: "Shape"
  input: "decoder/conv2d_transpose/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2d_transpose_1/Shape"
  input: "decoder/conv2d_transpose_1/strided_slice/stack"
  input: "decoder/conv2d_transpose_1/strided_slice/stack_1"
  input: "decoder/conv2d_transpose_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/stack"
  op: "Pack"
  input: "decoder/conv2d_transpose_1/strided_slice"
  input: "decoder/conv2d_transpose_1/stack/1"
  input: "decoder/conv2d_transpose_1/stack/2"
  input: "decoder/conv2d_transpose_1/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 8
          }
        }
        tensor_content: ">\215\210\275\252,m=\276pB?X6\240\276\nXU\275\312,\037<\326Z\014\2772\341\024\277k\3345\277yaD\277\201\232\314>X\017\203\276\240\313\022\277\003\311o\276\311i\200>I\254-?*\250\244=-\260\r\277\247\314\003>\355\303\244\276\320\362\267\276\267\253\217=\323Z\224>\301X\254>^\302\377\274\246\233\203>\252\2236?\301\203\226>>8;\277$}\023\277k\005\367=\321\030\304\276\274\267\003\277b\357\274\276\"9\207\276PB\027\275i\t\366\276\303\315h\277\234\222\232>s\tV>bmA\277\205\365\006\277\302c\362\276\337\217+\277V\363\010\277\2430Z\275\261\245j\276\033p\321=y\373\352\276\341`\231\276\370i\024\277}\206\t=?o+\275\270\223a\277\025\235\326\273\204A\264\275:%R\277\311\342\212\276{vs\275\275\354t?W\341g\277\032\357&\277\335h\006\277Z\3124\275e\007K>\320\352\\=.d(>\352\033\035\274\370q4\276-\005,\277\023{\026\277\321\200\004?"
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2d_transpose_1/stack"
  input: "decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp"
  input: "decoder/conv2d_transpose/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.41931259632110596
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2d_transpose_1/conv2d_transpose"
  input: "decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/decoder_output/Sigmoid"
  op: "Sigmoid"
  input: "decoder/conv2d_transpose_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "NoOp"
  op: "NoOp"
  input: "^decoder/conv2d_transpose/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  input: "^decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp"
  input: "^decoder/dense/BiasAdd/ReadVariableOp"
  input: "^decoder/dense/MatMul/ReadVariableOp"
  attr {
    key: "_acd_function_control_output"
    value {
      b: true
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "decoder/decoder_output/Sigmoid"
  input: "^NoOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 987
}
