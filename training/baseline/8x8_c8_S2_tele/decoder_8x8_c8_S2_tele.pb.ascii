node {
  name: "x"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "decoder/dense/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 128
          }
        }
        tensor_content: "Z<\215<\226\353 \274G}3\275\335\336Z\275\262\275\010>\217\032)>IZ\016>\312N\370\274\304\022\003=\240\356\000\276\317\235\032\276-\304\363\274GV\356=\tq\376=\275~:>8\236\023>\317M\003\276W\204\252\274I\3559=Rh\032>\3108\240=\236|1>\263\224U>\013\005\344=@\022!<\022\321P>\023\326\025\2768W\365\2744\363\337\273b#(\276I\253\027>\221\252\255\275\340\\\274=P\267\210;\311N\360\275\004\264\027\276\000T\003\276\324\253\034\273w\025V>\241\014\227\273D\263\332\275\023\032L\275Xa\331\275i\241\360=Db\337=\233\327C>\212g\263=0Pq:\r!%>\210\000\274<H\235,=\034b\032<\260\362\240<\265\207S=[B\355\275*qC\275x\321,\276mv\242\275\321d\247\275m\364\224\275\353o\356\275\337V]\276,\2362>\322c\360<pG(>\315\370\036\275\204\023\377=\232\005\016>d\307\262=\222u\271=\200\320P=\0210+\276c\203\213=C-\354\275?zU>\236=\314\275=\025\307=\000\246\341\275\342\353\252=}\235.\276S\376\256\275h\362W\276\021}\221=i\034Q\275\0169<>N\306\261=\330o\323\275\323\344M\2760_\013\276~A\031\275\325\246\244\275/B\210\274\244\032\357=\242\347X>\2448\213\275s\241\001=N\330\361\274\235\235\322\275\023\250\355=\365_\373\275\224~\003\276\3718b\275\273Q\273\275\3163\014>\2245\352=\005[F>\3745E>\276*\022\276\3464\364=\371\242\215=\306\030\003\276\30395\276\304\317.\276\177\233_=;T\036>3\025\326\275D\277\205\274\227\004Y>\307<\240=\313\315\203\272\036\354J>-~\r\276\350+\'=X\275\245\274 \320\314\2730\335v=*=,>P\276\350=\025\023\355=\000\316\367\276\254\215\212\275\272\204\035>44\034\300\360/\200\277\300DA?d\320\207>\255\276\316\275\223k0;7p\023>wV\306=\340P\226>nF\334=\337\271\302>\372\271\014>\237\027\262\274G\300\021>\373\247\342\2758\350?>\210\362?=\n\236\242>*\367\326>\3435\031\276\rQ\323>o \037?\230J\314=8Wz\275\357\375\002?\261\235\235?l6\224\276\342w\036@\320\206\305\275\311\r\332=\256\177\242\276\344}\003?\030{z<\205l\201?\305\034\366\276P\371\375>\2308\220>\266\2628;\227\361\035>\325\203\247>E8#>\333\223o>\t\237t>\321\263P\276\305\321\304=%w\217=\211!\235\276\001\350\251>\352/D\276\340FU\273>\277\272>/\313\225\276f\247\374=G(\032=s\337\200?A\334U\277H-Z?`\232\244?\256\243.\277\227 \350?[n\330>x\225\223>T\370-\277\351\276\256\276\235\231\002?\331G\207>\300I%?\016\034\303?uop=\002\246\202>\014k\215?\306\336\273>\027\300o\276\312\201\000@\223\245\001\276j$\224>\210\362\253??\006\307?\023\213c\276\r\031g>\010\351\025>/,\245>\t\330\270?\372\375\205?\323\330\031\275\036!\025\276+@&\2767\310\237>\003\336E??\020A\276Y\024\273?\373\244\226?\341\033\256>\303\204:>\203\375\351?\264Yx>yx\002?\365l\256?&8\027\277\365\273\356>:\217\301>i0*\275XP\233\276&}\020\277\321\254Q?l\227\020\2768F)\277\254\000\325>9\360\310\276J\365\n@,\005\316>\256\276y?\337\006H\277{\002\261<\034b\225?\021\342\316>\354\356\022\275\341\r\356\275\216\217\017>\340.\257=\353\212\005\276\230Y\212\274:\032\357\275z\350>\276l%\265=t\371\270>\317\337E=v\244\002?\254\221m?\327\213\013?;\364\213\276\317p\031?!\312_>\352y\r\277k2\340\276\322l\002?\260\036\227\275\251\225\332\277mu\032\277\007\246\035\27736\315=\343\014\200>I\377I>xS\374\275\222\274*\276\007m\371>\'\301\033?\023d\307\275\223\316\276\276\302\022\302>\272\035\371\276^\270\373\276\030f\211=\016\223v>&+\257\275\320L\223>\335\032(?\232\310\326\276\272\321\r?jz\016\277C`\r\276Z\210Y>J\271\212\276x\032m\277$kH\277\204T\254>zI??1t\035\276\030\253\"\276\026V\002?Lz\302>1A&\276d\014\253=\370\023\021\277\003\331U\275\260\tA\275Y\212*\275\177\257-\275s\007\233<\262X\010>\320X\031>\246C\202\2767\2069>Y I\276\310Z\302\275E\325\256\275]#\341=\3139\023\277\212\246\255\276IW\322\275\275Q\324\276jsz>\367\273,\275\327z\351=\251\333\272>\\\314\237\273\037\352\017\276K\r\025?\013\264\023\277\022\232\006?\342r\267\275\023q\355>\232&6\276\247a\343\276\335EL:\232\177\260?.\3022\276&\367K\276#\325\227>\242\320K>\005N\261\276M,\351>\2300->y\037\224\274\006\317\300\273\376\320\014\277\373\215\356\275\230\206b??\310\324?h\003\035?wk\327>\377RC<\247i+?\301x\377=\375\232\203>d\341\\?R\\W\277\333\205\271>\366\361\007?\222\235\202\276\032[\026=\017e\000\276\203\327\361=M\005\272\275x\001\335\276k\022\275<\277\345\035\277\017\016\237\276\302\0353\277\315zV\277u\022<?F\362\264?\311\326\335\275(\005E?\334W\320=B\313>>\314}\036>\330T\355\274\216\366$>\354\217\026\276\2703K\275]\252\335\275\270O\035\276\354\220m\275\261\201\004?\341\351\267>`I\020>R\312\305>\\L\306\275\227\317\200>E9\332<\302\237S\276\003\nb<\3626\241\276_F\001?\257\253\254=\341+\017?\214\246!\277\311i\033\277k\352\001\277Ju\236>FI\312=\330QU\276\367\235\036>:i4\275\021\262\277\275\361\257\r\2748\316K>\236\341s\277\206|\331\276\327r\332\275{7\265\275\346>\\?yG)>\231\022I\276!\354\033>\362\224\200\274O\334(?\230\377l\275i\235\263\275\276\202\231\2766\336%?\360\301\273\275{\233\322=X\021\232\276\205\360\020\276\\}\220>\232\276\221>x\255\014>\006\275\234<*\310\225=\235[S\277Yh\202?c*R>\322\230\236>\2576h\276\222\226\020\277J\004\344\275~d~?f\200B\276q\203\230\275\301\244\201?\347\212\342\276!i\226\276R\304\265?}z\217=\304\016\003\276/\255\353=^\254\323\276\360\221\230>^\233\262\276\224H\260>\254\316\003>\261\234\022\272R\362\372\276\"\004A\277\321\340\214>\320\236<>\353\253\365\276\357\201 \276\tO\013<t\232\"=\241\265\336\276iD\322\2761\264\216\273\346\355\363\277d>\372\275T\341\353\276\350\233\274\277\332\010&\277\372\251\t?\336\225\373\275\005f/\276o\326\027?\264\264\022?\n\326\361\276\203M\333\277Z\377\344\277\273\305a\277\326\2574?\303\330\037?\235Z>=\020\341\303\276\257\225\346\276A\276\221>_\337\027?\316\370\032\274PT\304\276\375Q8?Z\324\221\276d\257\273\276\200Cb\275\200E*?P\273I\277\364\317\303\276H\3573\300o\277\024?o\366\326<\233\373\251>\303\223*?O\246\004\300\212\340n>\243\225M\276\340\300\322=\006\3552>\247\302\002\276\000\013f=T\202\214\275@\271E\274\236\210\306\275\244y\256=\237\223\237>\246)\226\276\246\253\247>O^\003>\242\262r\275 \357\312>s\227m\276c=\215\276\236FD>\322\313\367<\370\363\255<\005=\260\276\202\030\202\275\246Bt\277\327\003Q<i\272\302\276\2365\216=\034Y\002?/\317/?\252s0<\276X\224;\211\022l\276\302\367\270=\007\315>\275\355\300\232>\220\265N>\'\347\332\276}:\344=M\224s>\010\203\371<\034\311k?\n7\201?\212\301\273\276&\245\030>\32031\275\to\376\275\244\366D?X\374=\277\026\001~>&k\242\276K\210\323\276\372i\257\277^\2307>\026\260\022\2772\316@\277\020pw\277*\347\n\275\002\2113<\n-\005?v\360_\277\252A\331\275\363\242%>`\275a\277\\\307%<\213b\250>\322F\326\277\004\220\'\277t\275\243>J\200\357\276 \311\'=\270\252/?u\364-\2779]o\300\263\020\215<3\337\250>\346\320W=O\261f?0\257\252\275\230\335\331>H\373\001\277\217%\n\276*\024\231\276\261\036\255\277\2250\321\275\371`L\277avV\276sj\264\276\261\314\315\274U\316\223>\257Xg\277\031\027\352\277d\341\031=e#\253\275\343L%\276s#&?\375sX\300\245\334b>\365\337I\277IH(\276Ne\327\274\205.\035?A\362\027?\221\341A\277]\321\303?Mi\216\277r\356*\277\220)O\276\240\343\240=\272\033X\272?i9>\234\037k>u\311\206\276\267\'\222\276\233\231\231\274/\t\255\276\351]\345=2\261\222\276\267\037\260>W9T\276\327\235(\276+K\305\277D\272\220\277*\303\352\277\037(\210\300\237:\260\277\n_\237?\213\033\177\277\027\005\375\2773\376Z?\366\2533>\214\227\034\276\324\327\213\275:\3233\276\342o->\3532\303\275\202\357F\276\364=8=G#\210\275\001<8=\3605\337\275\215\236\350\274%\276\222\277\273\224\275=U\3037?\377\253m\277\014\331\225>v-\265>orA\276\224Rd\277\312E\214\276&\376<>{y]\275[)#?\014c\226\276EV\351=\355v\037\277$\002\325<\354\005i\277YW\010\276\231$\334\275\235b\272\275!\376k?ia\305>#[\253\275\264\037\327>\3719\236>6\310\311?+S\017?#\212\025\276\347\213\231\277\233\237W>\335.\036\276j|3\277Y\266\260=D\2006\277|\251\203?\350\374I>\341\202:>\237\270\031=\317C5=b\306\r\276\271\372\037<\253p\300<\"\306Q?\r\3503\275\330E\303=h\347\\\277\364\332\224>\331\370B=\036\362\277>\017y\332>@U.\276\021.\205>p/K?\035\223\024\277\330dz=\337b\212\276K6\'\277\313\253\216?x\245\272:\005\033*@\366\033\373\276\017\\A\274+2-\277\326`\237>jB\'\276 Rr>ki~>Qj\016\277\257\201#\276I\326\302<\276\250\221\277\342\000\212\276\343\217,\276kk\364>\331\2545\276\010\t\311\276\334,T>o\252\016\276T\2627\276\014\325\307\276\320+\372>\244?\003\277!k-\276S\343C?\006\n\034>\t\355Y\276\223\343\003\275\306\310\242>\340\220\014?R\247\245\275\227\254\241?\332\305R\276\014o\222>\231\240\002>5\260\235?\244\273Z>Q\253\237>\311\304\200?O+\001\277u\t\325>\222^\322> \255\243\276\260\211\365=\362\271\026\276F\350A?\344\030r==\263\241\276\353\204\203>\274\307\232=:\335\017\275\275C\346\277_\303\221\277hi\335>\323\013\207= \344\354\2763\035\353>\000NI:\217d\277\2758i\373=\340T\030<\244Q3\275\324>a\275\220\275\177=~\306\006\276\347\035\263\275H\347z\275\236\352,\276\\\341\240\277\316\370\373>\224\335\263<\333#/\277o\305\321\276\030 b>\341\256\302\275\312\214\326=y\347[\276\3309\026\277\022\r\235\276\3017\232>S\000\310>\366~\346>\211m\300>\364I\377\275@\212\330\275eG\206?\204\233\310\276U\314%\2773\366\303<\255q7?P{\023>qS\036>\345R\252>\276\000\002\277n\226\215\277\001\275\243?m\225\374>\317\262\034\277t3\024?\354\213\222>\336{\032\2762\252\260=\016\345\007\276u\t\330==\361\322\275g\234\242\275\\\255\327=\034\377Y?g;\203\275?\256\034>\366(\023?\0107\024?\333\205m=\027\345~>,#\325>\233\234\010\277\354\341\242\277r\3172\276\340\267(?\330r\"\276M,\240=\361|\030\300|\224\211>m\211\244>\361\273\350\276]\224t?D#I\300I\361\002\300\226O6\300\n-\340\274C\272\226\276\322H\216\276\262\362\r\277He\217\275\335\005\261>\364\351\326=\262E\213>\266{I\276\375m\341\275\355OZ>=\355\274>\345\367\324\275\244/\225>[\305\035<V\3563\275y\273\247?Vi\273?~\\\344\275-\337y\277\334\244N\276\032\337\255<\277Y\006?\362\336\321\276w\274\">~\311]=99\342=\336\261=\277M\222\274\275\236\003\236?!\212\324\276K\001n?\367\212\'\277\025^\355>\217rN?b\3615>x\025\272\274N7\356>a\273\276\276S\344\002?P.\231\276\272H\256\276\225\030\211\274\205m\333\276T\372\013\277\033\352I\276\375\370\306\275\216\331)\277\177PE\277\214d\350\277\317\340\255>R6\320=\232R\212>\356\353\212\276J8\247\276\350=\007?,\027l\275b\343\000>\250\352\227<wF\303\275\330\027\202=\354J\374=\332\252D>u\024G\276/\334\203>\024\017f>\3409\345\276\024\314)>\257\n\324?\372!\213\275\364\365\013?\325\006\326>\377uw>\251\233\374>\214{\310\275\2129]>\3310\357>]\342\030?Ig\234\2764G\331\274\305\261&?\321\215\213>\326\337\226\275_s\211\276\247\205&?\340G\200>5\234v>\007-Z=\277\204\"=F\335\331>]\245W>\354\332\377\275\317\367S>\002;h?\353\004\364\276\255\242\337?\2158.>\020&\211<\270\275M=\255\217\025?\245\010\332\275\024\310\353>\364\316P:\023\355\310<\rRU?\272\027?>\251\027\033?\221o\315=\374\325n=\032={>\2268\027?zF\\\275;\357;>W\3032?\264u/>2\215\237>G\230\030\276\213\366\272=\312\240\272>=\241\031>\233\214\224?\256K\343<\n<J?qz\303\276)\330\247?\034r\254?\375Ey>\255\211L@\034_y\274\242\027\221\2766\252\323=:Mt\275\364\240\207\274\257m\260\275\206y\363=\331$z\277\363s\250\275\311/\255\277\331N\234\275\177\337h\276zQ\231\272^U\r\300\306[\242=3?D\276l!\222>Z\020\236?.\206\022\276\031)\036?s\374,\275\271\306\366>)\266]\300(!\260\277\361\212\201>\210\275\256\275\371\207\217\275\323\217B\277\227\000\226>3$\204>\006\211\272?\342\225/?\276E\t\300C\274\321\274yx\300\276\263\271\271\275\273\341 \275\017hT\276\263\335\247\276\357\334\250>\371\333\221\277\346|\344\275 \225U\277\303\244\322\277&\240\356\277\355\2574\275j\236V<e\370\200\300K\314\r\277\227\006\250\277K\213\322\276\320\231\313\276|\023=\277\374\325 \277<T\236\275wn\232\277d\2440>\260\250*<\2606\032=\234\034\006>j\nL>X7$\276$Q\033>L\254\026>\305\n,\276\201`v<\267E[\276.\236\010?`x^\277{)5\277\2728J?\202\010t\275\207N\021>\246\330\374\275\300\312\014>\276?\035>~B\260\275#zC\276\301\233\037\275\253\2077>\307\204\312=*(a>\343\206&\275\363\274\347\276\036B\327>\t\300\276<\013[\004\276\030r\004>\222,G9\014\351k<\303\261\222\276N\370d\275\246\272*\277\267\245\362\276\'\314e?\320\211\203\277\304\277\003?\266>\036>\221\331Q\276KA\322>\376\250\'\276\365ut?8\2675\275\20687>,\275c\275kE\253\274.7\325>GA3>{\362\206>\035\357\221>\237\204\351>\204\365\367<(+z=\236\316\033\274P\262#?\336\032l\273\337\035\003>\332(#?\030qO\275\213\244\260=\313h\307>\024%I\277\346\366\336\2760\0008>\004\2518?\257\005\262\2777_\201>x\372\007?7uZ\276\364\357G=\033\032\206\275\264\251P=\277\026s\276\"i \277\177\013\r?\027\002I\276\272)\327\274\021\016\212?\232P\212\277\222\226\345=\257\004\022\275\220\013\202\275;\032G<\004\253\234\277pU\006?\370c\247?n\210\036\274D[\033\277i\231\200\276\'\335e=\247\304\025?\215\233d?\332\270\032>\360\325L;w\200\222<\366\360\316\275\270x\356?3\356\335\276\230\307\035@\355\033\353\276\231n_?\\\210\016\276\366l\206\277\225\324\200\276.\262v\276\271\361\203\276\034\036A\2770\013\217?\307\030\325?\220<\273>\275l@?\005(\373>D\270\350=+<\274\275\035pf\276\035\340;=J\210\374>\010\317\207?\210;K;4uu\276\304h\215?\344\306\357?\236-\r@\027\317m?@a\204=\020\003\330<\270\347J=\330X==\302\337\034\276\224\036\215=\204(\271=t\372F>\350\367]>cf\345>R#4\276O\234\371>b\241\355?\370\320\227?p\274\221?6\210\016\277\221\347.\275\310\365\271==\324\024\276\217\332\305\274.`\201\277,e+\277\356\224\200>\367\374\n?\247\331=>q#\246>\2743\003\277\256\320>\275\356\351f\276~\335\031=j\250\253>\217%,\276f*\037?\035\021\245=lHr>,\366\373>vR>>\275g\247?\024\343F>\275\300\327>\000\313\r>\257p\234>\263\263A\277\341\304\264=\r\0224=\010\262\240?zx\226>\322E\210>\255\274J\277sfz\274\302 $\277\250n\264\276\216\262Y=\n\315\274\276+\t\204\277\325B0\276:q\360<vYI\276\337b\350>\001\021(?*Q\220<\314\177\360>\230\350\332=\266\205\256\2766l\275?ks\203\275\217\023J>k\027\350=\r\034D>6{\273?\025\032\r?\034\022\235@\033\234>?c\220\314>\225\254)?Mo\022>;\225\013>\327\377\202>\316\014\255\275\220\363+?`\346=>\316\303\340\273\322\037\313?\350C\303\276.B\223\275\233\350-?\263\307\226=f\021S>\204\200\226>\203U\300?\251qI\275\256\343B>f#\331\276\352\007\231\275\203\222\030\300\326\304\311=\323\254\017?\265\242\253\275\221\334\315\274\274n,>\000<\362>\214\257\244;ula?\255\354\221\277\355\r\250=\375\251\035>-\023\303\276\322\333\017\276\203|\233\276\216^w\277\273\265\326>\335\332\036>\254\341w>\202\260\t>\367{\353>w\025\213>\203\n\252\276\014\332\026=\254,\214>m\234\273>\227\212H\276\203\367B@\232F\257?\315\010\370?\216\372i>\341\232\234>Ga\222?\274n1?@\036\364=\344c&\276\270:\036>\314\213\034\275\200r\307\274\270\213O>\310x\360=h;\002>\350\r\241=\214O\337>\341e\264=\353\236D?j%\245>;\333C?\202|\234?\310\301\234\276&\365\255>HU\036>\022\006\010\277_-<\277\212F\327=\037\031A\276@#\353>\271\345\234\276 )\006?\341~@=\242\307\025>\307\004\014\277\230\006&?\374\311{>\243\340\002?\301Q(\276 \023\"\277\237\364\250\276(\314^\276\351\324\031\276\000\307\375\2768\321\252\277\206\333\242\276\261<\222\2778\370e\277\232,\333=\2077\"\277\210L\">uU6\276\240\035o>W;A?\2369=>.\2410\276\304\022>>/{\265\276\255P7\276aKe>\215\203\205\276\271\023L>\035\002\377=k\000\332=#\226\377>\227\355i\276\276.\014=\327\016\201\276\307A\307>\352\200\002>M\242\271\276\3456\032?\274\311\301\276F5\344\276\261\374\255\275F=B?N\262\247\277\271@\205:]\236\010\277 \036\005\276\013i\311>}\356V\277d5b>Z\034\200=\353,Y\276\341R\027?\023\272-\276\230Y/>\305\215\330=\325\351&\277.\010\n\277L\212T\276\346K\217>\372\3078=\357\267\224>I\374\366=NB\272?\313z\334=\211qF>/B8?&\352f\276\241>$\300\251\216\330>\363y\205>*\\\027\276\264]\337<\326\355\201\277\rt\351>\265>\374>\336\251!@5\332Q\276H\010\016?\010/\002\277T\255\t?}V`\275\017>\307>\321\210\313>\241\235!?T\324B\277\260\001\261\276\350\025\006>\024\200\231\276;\001\002\276\177[\254?\006\'M\276\241;\010>\365R\224?W\215\236?)V\265?\374\365y\277Ub\357\276\245ym\277\3506=?\315F\244?\211\203\024>2\202B>\352\274\000>~\242O\276\200\335\253=X\213P\276\237!9\276\260\372f=\010!\262=Q^\276=\020\3279>Z{\023=\005\001\216?\021$\253>\014\254\301>\316\351\225?\003\252\025=\003\274(=\257\214K>\324\333F\276Z\022\252>\313\002\263\275aD\274>\362\022\021>\020\244\r=\333%\210\276\344\340\372\274;\241\007\276*\226e\276c\375@\277H0\250>\rm6?\037\314\262=\305)\000\277\360\273\371\276\250\276N\276q*\261=\026\265\233\276\341\206\303\277\027\201\246\276\201L\010\300B77=;\332\220\274\371*\375\276ry\250>\010\340V=\241\352,?0\205\217>\207f\005?+x\271>T\343F>\\S\261\275\205b\251\275\351\220}<(V\361=;C\017\277\262\356\224\275}\004#\2767\206\001\277\023\204/\277\221/\204\276\336g6\276x\244\022>\356\2134\274\320\303\377\276\254\270\273\277\260\340L\275h\000o\277\317\325\304\276\237\316\235\277\252p\024\300\266\251a\277\005\203~\300\317t\362>\372\262\031\276\202\n\325>\313\237\013>\331\r\231>\036\270\373>\r\205\273=\341\362\223>\360G\205\275\251\303Z\277r\327\313?\304}D<Yj\260\275\303~9>\261rA\276\350\213\261\274U\265\000?T\344\021?I[Z\276/$0?\002\372\241\2763\026\013>F\363\225\300\305(W\277S5\200\276w`1\276V\256\256\275\021So>\371\276\022>`V\216\275D}H?\344\245{?\026\036\301\277\242\225(?\0031\026?\035\364\001>W,\013\276@F\007<9s\r\277EC\211?\263\033\245\276\2020\245\276\201\017&\276!o\223\277\003\210\320\277\354\3413<j\003[\276\310\252-\300\231\254\233\277ir\247>xV\243?x:\262?\014B\024>\000h\033\277f3_\275\351\260;\275\377\315F\276\230i\207\274B\347*\276\330q>>\370q\036>\330\360\025>\210\300\315=\354\250\263\275\211\005j>\300\243\372=\372\206\314\276\210\207\234\276xIW@\247\023\235\274\370\264,\277@L\023?\377\215{\275B\304\303>\274\306\307>\365\203\204?\241\277k>T\336\230?J\362\237\276\275\"\375=\231\254\023?\274\242\347<4y\240\276\036+-\277s%\365>p\342\242\276w,\313\276RHy\276uw\235\276\341\202\365\276\302\213\230>}\370\231>\315\357\365\276Ce\377\276\272c;\276\260a\322\277\276\363\014?\206\001z\275\2014\006?\342\327*?[\227\331\275\204M\006?\301\355\036\277-\311\377<:\377\212?N\375*\275\243\300<?t\316\324;:\341\214\275\0005\030>\232fd>\350\276\r\276\032\323\031=5\246,?\354[\206?\0045\202> E\304=\231\274\033?^#\214>\014\201\037>\313\013\244?,\265\264>\215\000#\277\224A\030?\3150\301>c\350h\276\233\350\226?\031(@@\312Y\217>\0221\246>\247\355\256>\271\030\360\274x\225<>yM\324>\331\001{\276A\266\300?Q*\303=z\311\207?m\254@?Q\375)?\255\t\245>\334\203\377?\2279 \276\327\324\010>DY\351\2761O*=\037\t\352=\267\'\230?\333\340=\276\303\273\010?\005\250Z<{{\332??\376\207=\350aL\276bA\177\276\263&\026\277mt\000\277\361\'\316\274^5\350\276Q\3117\275|G\306?$z\336\274^\210:?\'dQ>\221\037\277>\352\275`?\242\303K\277\321\372\302=;\031\216?u\315\t\275\373F\367=\377\007y?\032\315p?\242\007;\274p\355c\277U\\\r@kr\202\277>\277:@N\023Z>\276J%?1?\242?7!:?`\016\267>\241|\222?\345O\276\275\340\177\005\274\366\3551\276\230\033\200\274\200\036\352\275\356B,>\300M\355=*l\207\275\337\225\005>ED,\276\271s\213\274\323\314\225>\335\256\004\300Ja\246<9<\340>\216\230\300\276\377m\243>\222\\\356<\324\2220=Q\217;\277\316\026<\275v\026\217>\007v$\277\375n\270=[\2507?j\301S>\3057\232>} \002\277f2\213?\236\343\211\274O\354\215\276\244h\001\275\264\013\333\276\025\254\370=?\254\n\276\217\240\300\276\306\270\r\2771{\003\277\000\303\211>\355\352\027\276c>\321>\001\273\242\276\006\322\014\277\201\270t\277\300\371\026\2751N\221\277\031}]?\305\230\312\276z\311\276>&\256C>2Z\035?)k\371<\256\010\340\276/\341\214=\327\311=>\010\335/=\374\313\204>\235\037`?\365\353$?\r\223 \276n1K\274\227\3152>t\366\250<\0004\326>\365\273\324>&\214H\276\253<\263\274\262\335\250>\346o\231?8\232\032\276\010\0072?\275\021>>PC\244>\313\rd\274\177\260\250?\372\247#?\004\013\333\274\252\004\303>x,X\277\243\312\202\276\2673n=\215\027\255>\245\356g?\016h@\276h\023\265>4`\256<\336\207,\276\365\036\232>\200rm\277\002\037\251?\237\376%\276\345x\226\276\373>\t\276\217\n\367>[\266\223?\237\237A\276\031m\210>Bb\274=\r!x=X\001\345\277\331\344\023\276\225\370o?\222\242\331?\267\200\375\276\254\272\004>\356\213W>ntt\277\003\242\207\2754\343\257\276\035\352\207\277-\020\325>c\004\220\2767\007 \2760\357y\276@\303\253>\3317*?\2624b\277\345\306*\276u:J>)Z\237=\305\354}\277Po\026?\205\'\003@\332p0?\2452\335?P\256\372\275#v\024\277\033c\230?\324\355\032=\220\220\360=\020\n\014=\300\225\205\273\332\204\214\275\276\373+>\010\200<>\352\010\330\275\304`\342>\020a\245>y}&\276\323m\372\275D\rW@s\263b?\274\300G>-\262o>\264\270\225>\"0\374>\t\324\300\276\3407#><up>\271\353\036?\033\301\375=\316\252\344\275K\373\261=!\177\241=\352\346\371=\353\273\265>\243\234\210\275\022.\245>\312o\325>\372\024\216\275\350\013n>\242{\317>.\360\017>]h\216\275\216\223\256>\256%%?\315\t\205\275\376\266\t@\014\225?\277\331\276\243<8\350\220\276\177D\342>!\233\243\275\353\010K\276\345\365??\352\244\026\276_w\036?\026n\240>D.(?\005N\201\276Pb:>\237\010U>\312\315\226\276\004\3258\276\335\236\216\275}\031q>\356\350\037\277^7l<\373\334=\276\216J)\277\220x)=<\377\331=\253P\251\277\250\334\002?v\336n?\2022\314\276\035\210\204>\355!\024?\326\256\206\277\202n\355\277\2013J>\250x\027>As\t?\254N+\276\211\0305=\001\365\010\277\3234\265=\2179\256>\374<\320>J\257\007@4\236\210>\321\306\264>6>F>\2646\226>wm\024\276\244\324\305=\347\016\355\275\222\305H\275\014\201\360\275\216&\212\276\266\264\214>\333Qq\276\355f;\300\031\024\355>\001\360\235\276c@\224\275\005|\264<Q^R>s\246\236\277\325\'\001?\007\213\204\277\357\357_?gQ\371?\344\307\266\276\230\016\226\277\025>|\276\237\335O\276~\006x\277)\230j?\212;\'\277\017\216\264>\200\t\007?\200\262\276>\031\256\276?i\255J?\374l\237=\347-\257>\277\014[@\340C\247?\264\364\267?L\023D@X^\245?\230\n\344\276\210\353N\274\024D\311?\343\240\220=\314\351\001\275X\035A=\032\033\307\275\355\203\005\2760\356\274\274\330\241\376=\234\254\002>\240\001g=\342]\016\277]\014E>\357=,?\021\345\025?(\337\244?\265PA?`\022w\277z\256\260\276Z4\306\276\203G\216\276W\313\365=\000*\205>T\233\267\275\226I\353>J\352\315>\372\263X\275,\304O\274b\217\247:\241\331\201>\220o\266=\231\216\242>\354\006\333>7\203\030?\001\374H\276\'\331\331\276\335 }\276\250\262\r>F\256\030\276\317\027\036\276B\024;\277\244\251\230\276_?)?\220UF\277\010\327\227\276\340\205\306>\t\332\202\276\205\207\036\276\306\203r\277\343x\300>5\"\304=\337\216\343\275\214\224f\276\027\251\203\277\206\316\314\276\002j\023>\023G\016\277\230*\274\277p<\211\275Y\224D\276%J\030?F\362\017\277\237\362\002?\006\013\260\276\366wH\276X\275\236>~\327G\277\333tk\275\220\320\244>\341\232D=`\004|=\216\216\032?\205\201\363\276\267=\252<\263e.\277\362\272\217\276\004U\252\276\207J\235>`q\212>e\262S\275\0268\033>qb\322\276\274\224-\277\312\007*=e\312_\276\363FC\277\275\315\177;\021\'\324>C\200\035\275\314|\024\276\353\006\'\277\240\274\346>\243\266\207\276.\360\254=\226\374\366>&\007m\275X\333\200>Q)\310\275\257&\224?v\224\004\276\347f9\275\200]!\276`#w?\330\251\022?y\230^\277\263\3448\277f\242!\277\200\311\325>\276\265\234>\221E(>\203\373\024>\365\274\221\275\\\237\350>\346\317=\277]P3?u\264e?5\330\217\275 \261k>\371\356\030?\233\375\023=\007\000\360\275~\313\310\276\336\273\302>\256\336j>s:\000@\362mN\277\242\010\256\276\202$\037?\367IT?5U1?x\014\220=\236d\006>k\007\'\276\014/\366=\220\3735=\000\223[\275:*\322\275\341\226\264\275\332KC>"
      }
    }
  }
}
node {
  name: "decoder/dense/MatMul/ReadVariableOp"
  op: "Identity"
  input: "decoder/dense/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/dense/MatMul"
  op: "MatMul"
  input: "x"
  input: "decoder/dense/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/dense/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        tensor_content: "y\313\204?)[\r?\213\303>?5\245\312\277\026P\224\300\361k\264\277T\325\006\300#e\025?\364<\\\2772\214^?N+\322?\206\323t?\341\321\004?\\\274\330\276\212\317j?_#C\276p\'\305?\242\350\215\277W\306\217>=\216\214?J0\310\277\320\377\034\276\215\342\247\276\373&]\274:p3=;\314\350?\236\n\222>\222%\221?\241\377\201?\221{\200\2761\211\325=\264\3702\300\2734%\277\215\177V?\247\375\264?\235J(\277a\214\031\275\010/\225\277\330`\210\277\331\301\010\2766\021\247\277\030j\213?\365\274\250\277P\374\003?\000\352\360\275\351\020\205\276\227-\010\277\347Ik\274\314\024\367\276\315\333\212\277\201\227\032\275\237H0\277\201\375\352>\003\263\007\277\374e\006\277\221\301\345>\"\252Z\277QC\001?\325\240\254\277\327\\\327?\276yn\300\324\030\022?\214\350p?\331\333y\300*\351Q\277\270v/\277}\210\">\324\212\334>\253\271O?\266\274i\277\343\2040?\360\225\335\277c\010\266\273D\'\254\277\372\201\010\300A[(\276q\277\260>\343\211L\300\004\2757\274g\305\r?\244\265\336\276a\266#?z`\257\2741f\344>\340\340f>\324\222\350\276[s\260><\350\"\300r\246\305\276\224\314+\274\247[\206\274\235\231\240?\370`\200?\347\2023\276\203q\307\277\345\310\005\300I\376\247\277GB\216?\341\225\322\277e\233\305\275\331\243\273?q\330)\277\346\256\007@\270\016\273\277\235\350\340\277\332\340\256?\353H\334\276\320dZ\275\356\364\360=\035\215\344\274\275R\242?\247a<\277uL\017@JW!@2j\277\277(1\"\300\\2\032\277\276|[=CQ\255\276\347\025\311?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/dense/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/dense/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/dense/BiasAdd"
  op: "BiasAdd"
  input: "decoder/dense/MatMul"
  input: "decoder/dense/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/dense/Relu"
  op: "Relu"
  input: "decoder/dense/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/reshape/Shape"
  op: "Shape"
  input: "decoder/dense/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/reshape/strided_slice"
  op: "StridedSlice"
  input: "decoder/reshape/Shape"
  input: "decoder/reshape/strided_slice/stack"
  input: "decoder/reshape/strided_slice/stack_1"
  input: "decoder/reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/reshape/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/reshape/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/reshape/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/reshape/Reshape/shape"
  op: "Pack"
  input: "decoder/reshape/strided_slice"
  input: "decoder/reshape/Reshape/shape/1"
  input: "decoder/reshape/Reshape/shape/2"
  input: "decoder/reshape/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/reshape/Reshape"
  op: "Reshape"
  input: "decoder/dense/Relu"
  input: "decoder/reshape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_transpose/Shape"
  op: "Shape"
  input: "decoder/reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_transpose/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2d_transpose/Shape"
  input: "decoder/conv2d_transpose/strided_slice/stack"
  input: "decoder/conv2d_transpose/strided_slice/stack_1"
  input: "decoder/conv2d_transpose/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2d_transpose/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/stack"
  op: "Pack"
  input: "decoder/conv2d_transpose/strided_slice"
  input: "decoder/conv2d_transpose/stack/1"
  input: "decoder/conv2d_transpose/stack/2"
  input: "decoder/conv2d_transpose/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        tensor_content: "\022{\030?\245\224a\276y|q>#1\035\275\245\276\226>\324@/?/\320\206\276@O\202?\210}\033?.\0261??\331\371>F\315:>\354\026\240?7j\330\275E\326\224\2754f0\277\234u\006?\257\324\013?\213S\005?\243\355\005>\236\210\313>A\242\306=+\236\250>\354(\374=\206\200\206>\347}\263>\270\330\222\276\346\304\014?\253\364+?\325\241V\276\025<\022\275\242c5\276\272\000)\276p\277\253\276<\253$?ZPH>\004\212\004?,r\245>\334F\210=IH\027? \242\300\274_\322\027?\266\3136?N\331!>~\272D>\326)\316>C(\'>\276M\033?@e\363>\374\177\244=`\301\020?\n\314\243\275\302\212\317\276\320\261\251?F7\030?\325\306\232\276\'^\355=v\345\031\277x\222\002?8\276u\277() \277j\353\203\276\304\010\236?5#\337>R\337.?\306\2544?\261\367\200>\215\200\360>1\237\243\276\272\220N>\374(D>\251\235\351\274\270\020\224?\312\305\303\276\212\317)>\362\252\226\276\334\352\027\277\227s\201\277\nW\260>\211\377&\2771\370\262=\261\202~>\3522\375>|\314\020\2762e\342\275\304\332\024?r\212\253\275P\314y>$\374%\276?\310\235\275\033M\232<\230>\211\274\241\032\325>\253\205\362>\315\006\016?\365\2156>=t\003@\324^\341>\"\005]?\347\377Q\276\212\252N?\342\230\231\276;\335\357>\022\241}\276R]\372=\275\022e>\216*\t?G\273\005\274L\231\335\276p\367\375>\3020\244>V\214Y\277\223;\350;o\276_=\036S\240<\'\212\216>\365\nV=\226^\366>2\261B\277m\270\020?\2762\227;&\000*\277\314uU?\005\032\377>V\353\323\277\006\367\200\276L1&?\326mF\276\207\340\327\274W\006\205\276\022\343\022?\265\235\344\276/\275\034?n\034d=\227\275\275>l4\361\276\235p\334>Q\"\364=\344\326.\277\311\366\303?g\277\237\276G\022\335\276\035\354\324\276\207\333\213?\001k\217>*\375\246>\377\341\027>0\255\216>\n\0176?\371\004\214\275\360\303\314\276H\374\265\275\335Z@=W\332R>\372\367c\272\352\004\337=\375\267\365\276E\333\213\276E\344\316>\376\364D>-\'n?\302\223\263?t?\033\277\246\275T?\312\331\220?\232J7>\300\357\022>\212\350\234\277\272\035M\277\307\264k\276\330\274\007\275\303u\277\276\007l\014?\247T7?.+u>e\346\020\277`\022\261>E\332\201\276<\265\210>\031\222\036\277\351o\306\276.$\205?XS\227==\315J\276\013IY?\206\364\341\276\236\326 \277\356\233\371>/\201\263\273E\255\371\276\255\320D\276}\225\360=\221\301\337>O\026\215>\326]\345>\226\250\317>2n\356\276\020<\007\277\362\347\305=7\325\364>\0034.\277\263N\356>\203\221\032=\316\033~\277\211V\267\276a\335\241>\371\314K?\003/I>l\244\263>\351_\221>+\226\177<!\025`?\024\034\027?\226\027/?\200\rW\277V\247\357>\000\232\005>{+\264>tB>?\0306\370> /e\275Zq\334>\243Y[\277\330\372M?\345\375\355;\300\316\210\274s\223t\276\315[n?\242@\230?\265\236T=\260\246\237\276\022]\001@\017\2533>\032\273\202>\213~\301>\324\332\315<\367\330\242\277\271\301\354>\200\023\203\2770kz?\245\020V\277}\2511\276[PX?NnI\277]0+\2774R?>\242{\313=\336\206\312>\270\356\035\276X\326\220\277\265w\266\276\336\251&?2\264G?tn8\277\'\370\234?}\220\224>\364\344\354=\356\307L>\274~\303>\237=\001?\027\210\222?dS\017\276c\247\252\275\216\365%\276o`\037\277e\346\277\276TZ\254\277\370\003\234=\236(\006@\260\'\205>@lk?h\245v?+]\354\275\360\337U=O\267*>\321\363\273\273\324\270\311>\275\374\277?\032\205\301\276$\177\231=\360\2417\276Y\354\314;4\020\362\275qN\306\276D`\376\275M\373)>Y\367\002?h\343\263\276\370\200\322?y\010,>E\006\216\277y\240u?:\005\036>\365\246\331>\357\024<\276\030m\240?l\252(>sI\377>\214P\032\277\206\331\335>k\253\234>\227*\361=\360\354c\273\004\010\316>\270t\316?>\255\n>\277d\341\276h\357\033?~\237\n?\341*\310\276]zP\277p$\203?U\243\324\276\256<.\275\267!\033\277C\236\\\275*\220\323?J\231L?\022S\021>\027\206\003\276\024^\361>>\242Y=\020\376\t>\331\010\\\276\213-4=+[\247=\\z\366>\340\030\347\276\242\"!?\312\334c\276\002\255_?\247q$\277l=\260\276Uh\207\276\245\005b>\234\024\017?\215\261\007\276\261q\305\275\236\r<>\007\226u\276#\034\024?\223}\371\273\213,3>\350v\206\276\315\347d?\004\257\255>/@\246>b6\353>\200U\210?:\334<\273\262\177?\277\204X[?\002\221m\277\347AU\277\001\231\032?\213_\256\276\370-\252?\005\030\021\277\300\231\014\275e\016!?\316\311v\2758\017\017=\230\333\030?\023C\027\276\313\277\005=\300\222\303>\247Y\022\275\321\211\351\276\216\014\037\273\325\n\310>\274\375\"?\271I\317>\014iC=56\245>\262o\362=6\256\224\276\3171<?\325\201\212=,\301r\276/,\345\276\037\177\002?\375\323\r\276n\017<\276\351n\357\276k\022\216>\007\342\007\277\351\260\205?\t=\343\276N\036u\276\212+\233>\372\361\217\2751\354\335>+\366\263=\'\3435?V\221\032\277\003\0278?\351j\227>\002\330\245>?\256\030?2\006\242\276\207\212c\274\250\332b=\013\245H\276|\206\314\276\320z\354>\245,\013?$m*\275;.\032\276h\023\244?hb\243\276pN\027\275\030\245\021\276\254\327\247=c\260\222>\310\254\207\276\005\273\236>\367\213I\276\024\312\016>\245-\004\276#\034\007>\027i\302>\004P\242\2747\343D\277\265\025\021\277\346\006\007?\276\2439\276\221b7>l\313\242\276Z<\220=\361\250\277=\243\023\204\277\266\267\267\275\213\031\331>\362\236\252>\007\017m\275\034\007\223?\210\2769\277\235\200\017>=6\r>\347\374(\277i\032[\276/4\000\276q\240u?\335\252\263>o\347\345>\215\037\371<\306|\366\274d\245\231=[0\222>Y\364\223?\337l\r\277\317\t\304>\332\276\302\276F_\247\274M\230\370\275R\354\350\276>@\245\276_\274\343\276\r\333\327<\243<\236>e\320\001\277\267\227\'\276\357\210\215?^\212\251\275\264\245\207\2763\276\326>\002jN\277O\242\206\276\330\261\207?\206\010\304?\033\244\022\277H*\347>\340\3466?!\005\024>\270\366\227>o\000\235\276#\245\242\276\254~9\277~1\230\276\350\310\214=;\256\001?\036\233\201\275$4\202\277\275\250\242>\033\006\266\276\251!]?e\323\375=\022}\002?R\372\234;A\325z>\331W\264\276>S\210\276u\243\356>\240\347 \277\374\244+>\313\247\001\276\275\254\213=]\036\321>\363x\350>E\001\013\277p\330\004?\352O[\276&`\201?\002\315R\277\250\245I>\351\255\217>\301\361\214\277R\331@>\326\347T\277\371\271/> \343\203\276\253\355&\276\261 \312>\0203\005\276\231#\003\277\357\007;\276\222A\221={\340\277>\014]\256\274*\373\261>\2622\305\276\3307b\277\237e]=\020\360\305\276d\365<?\235\321\035\277\273\003\034\277\212\"\342\276\377\342\r>\3554\"\276\003W\204\275P\260;;\313R\031\276X\025\211\276\036\335\216\275\t\222\210\276\014\'\213=\340\3320\276\200}\005?\'v\231=\337\021R\277\266\027x<\311n\250>\025\240\214\276\330\300p?\306m\243\275\334\354\025?\354\001&=R\346\347\275\374LE?\311\0036\277Ggd\277\305\323\t?\007\210\034=\202{x\277D\207T>L\313\347=\210\030w>\034\304\000\277\362\353d>Q\346\300>@\337R\276s5G\277:\346\253=\t\360\267?}\306\227>*\255!\277\210\3074?\247\210\341\275\311\266\177>\354\365X>P \237\275?\310\315>R\357\324>\024\342\007?\304),\276"
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2d_transpose/stack"
  input: "decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  input: "decoder/reshape/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2d_transpose/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        tensor_content: "\375\0075\276\374\241[?HL\037\277\301\371\021\275\033\203h\276\014mK\276*\255\034?\271\261d="
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_transpose/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2d_transpose/conv2d_transpose"
  input: "decoder/conv2d_transpose/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/conv2d_transpose/Relu"
  op: "Relu"
  input: "decoder/conv2d_transpose/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/Shape"
  op: "Shape"
  input: "decoder/conv2d_transpose/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/strided_slice"
  op: "StridedSlice"
  input: "decoder/conv2d_transpose_1/Shape"
  input: "decoder/conv2d_transpose_1/strided_slice/stack"
  input: "decoder/conv2d_transpose_1/strided_slice/stack_1"
  input: "decoder/conv2d_transpose_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/stack"
  op: "Pack"
  input: "decoder/conv2d_transpose_1/strided_slice"
  input: "decoder/conv2d_transpose_1/stack/1"
  input: "decoder/conv2d_transpose_1/stack/2"
  input: "decoder/conv2d_transpose_1/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 8
          }
        }
        tensor_content: "\252\314\303\276-\364\025\277\257\304\224\275\212\334\211\272\000\336\351>\025\231\014\277\23110?\303I\373>\033N\307\276\206;\236\276\320\216\357\276\221\"\333\276D\364\315\276x\221\035\277\353q(?\204\026\327>\325,\365>\366\000\373\275\t\323\374\276\256\\6\277e\0307?\016T\343\275\344v\223>\205\260x\277\270\251/\277\375o\'?8\010\301\276\357\\M>W\r\032\277\214\024\343\276\234C]>uV\360\276vLm\277\355\217\273>\263\302\251\277\t\240f\277\025\036\255\276Xk\\\277\257\326\340=,\005}\276e\331\376\275\034#\030=\300&\375\276\0241\000\277\032\315\234>hkQ\277#!L?\377\243\265\276-\n1\277\306c\001?\014&\363\276p\202\236>8\034\246>\326\014\354;\r,\231\276\357z\202\276s\000\314\276\366\372\367\276\257\211\"\277\307\206\231<\275\252\365;\231\017\036\277\0250\207\276hic>]\027\270=>\217\273\276\2312\343\273Y\317\033\277\260\244\313=\324D\265\276HP\252\275x\372\026>"
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "decoder/conv2d_transpose_1/stack"
  input: "decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp"
  input: "decoder/conv2d_transpose/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 1.4616657495498657
      }
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/conv2d_transpose_1/BiasAdd"
  op: "BiasAdd"
  input: "decoder/conv2d_transpose_1/conv2d_transpose"
  input: "decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/decoder_output/Sigmoid"
  op: "Sigmoid"
  input: "decoder/conv2d_transpose_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "NoOp"
  op: "NoOp"
  input: "^decoder/conv2d_transpose/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2d_transpose/conv2d_transpose/ReadVariableOp"
  input: "^decoder/conv2d_transpose_1/BiasAdd/ReadVariableOp"
  input: "^decoder/conv2d_transpose_1/conv2d_transpose/ReadVariableOp"
  input: "^decoder/dense/BiasAdd/ReadVariableOp"
  input: "^decoder/dense/MatMul/ReadVariableOp"
  attr {
    key: "_acd_function_control_output"
    value {
      b: true
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "decoder/decoder_output/Sigmoid"
  input: "^NoOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 987
}
